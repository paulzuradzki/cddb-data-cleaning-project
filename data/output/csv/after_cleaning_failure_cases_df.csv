schema_context,column,check,check_number,failure_case,index,check_source_code
Column,title,Check for *possibly* invalid symbols.,0,La \Dolce Vita\ Les Tubes Dance Italiens / Les Chansons Dance Italiennes (Disc 1),22,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'arÃÂ¨ne des rumeurs,6677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bring 'Em Out \Live\,6911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le DÃÂ´me,6901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃÂ©mzene,6880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HangulavÃÂ¡ltozÃÂ¡sok,6875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La BarberÃÂ­a del Sur,6856,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Just Say NoÃÂ«l,6847,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃÂ¶ÃÅ¸ten Hits der 80er und 90er aus Ãâsterreich - Papermoon,6830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥ÃÂ¥ÃÂ³ÃÂ§ÃÂ¥ÃÂ¾ÃÂ¨ÃÂ»ÃÂ¢ÃÂ§Ã¢â¬ïÃÂ¸ 1&2 ÃÂ¥?ÃÂ¬ÃÂ¥Ã¢â¬âÃÂ¡ÃÂ§Ã¢â¬ÂºÃÂ¤ & ÃÂ¥?Ãâ ÃÂ¤ÃÂ½Ã¢â¬ÅÃÂ§Ã¢â¬ÂºÃÂ¤ [VICL-40029&30] (Disk2 - ÃÂ¥?Ãâ ÃÂ¤ÃÂ½Ã¢â¬ÅÃÂ§Ã¢â¬ÂºÃÂ¤),6827,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El Loco Mundo De Los JÃÂ³venes,6793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Con Mucho CariÃÂ±o,6787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ab 80 - Alles ÃÂ¼ber Sex,6774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'ÃÂ©clat du ciel ÃÂ©tait insoutenable,6708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RecopilaciÃÂ³n,6694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uncle BenÃÂ´s Christmas Mix,6646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥VÃÂ¤ÃâÃÂªÃÂºÃÂ¬GÃÂ¨Ãâ ,4360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£ÃâÃ¢â¬Â¡ÃÂ£Ã¢â¬Å¡ÃÂ£ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ´,6633,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,y'ÃÂ© quelle heure?,6632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"WHITE TRASH, TWO HEEBS AND ÃÂ¯ÃÂ¼ÃÂ¡ BEAN",6613,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The WorryinÃÂ´ Kind,6584,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TriplezÃÂ©ro,6550,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Venter PÃÂ¥ Verden,6536,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"dollÃÂ¡r, hatalom, pornÃÂ³",6480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZurÃÂ¼ck zur Front,6458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GeraÃÂ§ÃÂ£o Pop,6381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SchÃÂ¶n ist es auf der Welt zu sein (CD3),6379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A la fontaine des romÃÂ©os,6325,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ§ÃâÃÂ¸ÃÂ§ÃÂ©ÃÂºÃÂ£ÃâÃ¢â¬ËÃÂ£ÃâÃâÃÂ£Ã¢â¬Å¡ÃÂ¯,6300,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥ÃÂ¾ÃÂ©ÃÂ¦ÃÂ´ÃÂ»!! The Timers,6236,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rock En EspaÃÂ±ol Vol2 Cd 2,6941,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃÂ³savÃÂ­n og RaftÃÂ³nlist,6946,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¦ÃÂ¤Ã¢â¬Â¹ÃÂ©ÃÂ³ÃÂ¥ÃÂ£ÃâÃÂ­ÃÂ£ÃâÃ¢â¬ÅÃÂ£ÃâÃÂ³,6962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PequeÃÂ±os Exitos,6963,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Parlez vous franÃÂ§ais,7707,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dixie-LÃÂ¤ndler,7691,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Contigo AprendÃÂ­ CD2,7634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Great Soul Hits\,7612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Seu ÃÅ¡ltimo Show Gravado Ao Vivo,7607,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ³ÃÅÃÂ¨ÃÅ½ÃÂ¤ÃïÃÂ±ÃÂ¡ÃÂ¤H,7581,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Summertime Jazz (Jazz & TÃÂ¦ÃÂ¡ÃÂ¦ - 64),7521,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Wanna Have More Fun -12ÃÂ£Ã¢â¬Å¡Ã¢â¬Âº Version Collection,7518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,w-inds.ÃÂ£Ã¢âÂ¬ÃâTHE SYSTEM OF ALIVE,7481,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Com AÃÂ§ucar Com Afeto,7455,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TheresÃÂ´s Nothing Like This,7445,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃïÃÂ¥ÃÂ°ÃÂ¥ÃÂªÃÂ°ÃÂ¥ÃÂ±ÃÂ²ÃÂ®ÃÂª,7370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tausend TrÃÂ¤ume von Zuhaus,7360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ViolÃÂ£o apaixonado,7313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CanÃÂ´t Get The Hell Out Of Texas,7304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GarrÃÂ£o do Pampa,7272,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Otevrete! Jsou tady lidÃÂ©..,7247,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Virgis StakÃÂ«nas,7214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mexe Mexe que ÃÂ© Bom,7191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Como AlcanÃÂ§ar uma Estrela,7128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃÂ£o sem PoluiÃÂ§ÃÂ£o,7114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Endless Love - Die schÃÂ¶nsten Pop-Duos (CD 2),7046,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ³ Alegria,7005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ask YÃÂ¼zÃÂ¼nden,6997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VidasongstaÃÂ§ÃÂµes,6994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃÂ¼r immer frei,6982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃÂ±ana Cruzamos El Missouri (CD2),6975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,(Non ÃÂ¨ Per Sempre),6216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"BÃÂ¡lnÃÂ¡k, ki a partra",6175,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DonÃÂ´t Call Me MÃÂ¼ller!,6165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MotÃÂ­! Avalot...,5275,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Je M'en Viens SoÃÂ»l,5245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,80ÃÂ´s,5233,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alles FÃÂ¼r Den Herrn cd 2,5204,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£Ã¢âÂ¬ÃâÃÂ¦ÃÂ©ÃÂ¸ÃÂ¥Ã¢â¬Â¹Ã¢â¬Â¢ÃÂ¦Ãâ ÃÂ¦ÃÂ¥ÃÂ£ÃÂ«ÃÂ£Ã¢â¬Å¡ÃÂ¬ÃÂ£ÃâÃÂ³ÃÂ£ÃâÃ¢âÂ¬ÃÂ£ÃâÃÂ SEEDÃÂ£Ã¢âÂ¬?COMPLETE BEST,5188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Live At The GrenzÃÂ´,5187,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blut FÃÂ¼r Blut,5185,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃÂ±ana Cruzamos el Missouri,5167,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kast Dine HÃÂ¦nder Op,5096,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Psychokiller QuÃÂ©st Que CÃÂ©st Part Two,5073,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¡Simpatico!,5057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tribal Mix Sessions VoÃÂ¬. 1,5038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tabaluga und das verschenkte GlÃÂ¼ck,5020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kai Pilnaties Akis UÃÂ¾merks Mirtis,4962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Durstige MÃÂ¤nner,4881,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EhjÃÂ¤,4870,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂºsica contra osopetos,4782,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IllÃÂ©s '96 #1,4748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZdravÃÂ­,4720,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Flickor Och KÃÂ¤rlek,4715,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Segismundo ToxicÃÂ³mano,4692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Au RÃÂªve,4654,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SzajhÃÂ¡k & PartizÃÂ¡nok,4649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¨ÃâÃâ,4594,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Complete\ Rehearsals 1987 disc 4,4582,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃÂ³n De Pop Internacional De La Historia - Cd 12,4575,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sezen Aksu SÃÂ¶ylÃÂ¼yor,4552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¿La calle es tuya?,4542,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UstmamÃÂ²,5261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥?Ã¢â¬ïÃÂ¥ÃÂ¥?ÃÂ¦Ã¢â¬ÂºÃÂ²ÃÂ£Ã¢âÂ¬ÃâThe 2nd LPÃÂ£Ã¢âÂ¬Ãâ,5281,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Rock On\ Sessions,6154,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jag ÃÂ¤r du,5288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Devo Tudo a VocÃÂª,6137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Best Of ManÃÂ¡ - Live!,6105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£Ã¢â¬Å¡ÃÂ¤ÃÂ£ÃâÃ¢â¬Â¡ÃÂ£Ã¢â¬Å¡ÃÂ¢ÃÂ£?ÃÂ®ÃÂ¦ÃÂ°ÃÂ´ÃÂ¦ÃÂ§ÃÂ½,6051,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£Ã¢â¬Å¡ÃÂ¤ÃÂ£ÃâÃÂ¾ÃÂ£Ã¢â¬Å¡ÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ³ÃÂ£ÃâÃ¢â¬Â¹ÃÂ£Ã¢â¬Å¡ÃÂ¢ÃÂ£ÃâÃÂ«ÃÂ£ÃâÃÂ¢ÃÂ£ÃâÃÂ½,6018,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets - \Apponyi\ Op. 71 - Tatrai Quartet - cd 1,6002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Las Mejores 100 Baladas en EspaÃÂ±ol - CD3,5938,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Sweet Live - \Ballroom Blitz\,5907,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Laura HÃÂ¤kkisen SilmÃÂ¤t,5873,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Funk ÃÂ´d, RaptÃÂ´ n TrashÃÂ´d",5792,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RakkauskirjeitÃÂ¤,5763,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ¶ndermarken,5762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Secrets Of Your Dreams - Live @The DÃÂ¼sseldorf Easter Festival, Germany, April 07, 1996",5745,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\FÃÂ¼r Elise\ and other piano favourites,5735,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Paris-ZÃÂ©nith CD1,5713,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CambierÃÂ  il tempo,5675,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃÂ³n De Pop Internacional De La Historia - CD 15,5655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¿Donde esta Judas?,5598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MillÃÂ©sime - Live 00/01,5577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets \The Lark\ Op. 64 - Tatrai Quartet - cd 1,5539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich hÃÂ¤ng an Dir,5518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Negl mÃÂ¶t KÃÂ¶pf,5486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,2ÃÂº VersÃÂ£o,5480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Various/Hits ÃÅber 30 CD3,5462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£ÃâÃ¢â¬Â¢ÃÂ£Ã¢â¬Å¡ÃÂ¡ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ­ÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃÂ»ÃÂ£ÃâÃÂ¢ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ­ÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃÂ»ÃÂ£ÃâÃ¢âÂ¢ÃÂ£Ã¢â¬Å¡ÃÂ¤ÃÂ£ÃâÃ¢â¬ÅÃÂ£ÃâÃÂ¼,5429,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RockÃÂ´nÃÂ´roll meltdown,5295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Takamehtien mekatÃÂ¤htiÃÂ¤,5292,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂºsica Serve Pra Isso,5291,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Angel Sings Janis \Live\,7717,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Di Doido ÃÂ© Pouco,7780,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A FÃÂ¡brica Do Poema,7788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die schÃÂ¶nsten Lieder der Disney-Club-Serien,9145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HistÃÂ³ria Antiga,9120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃÂ¥ eventyr med Plet,9119,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,4ÃÂ¿ÃÂ¹ Ãâ¬ÃÅÃÂ¾ÃÅ¸ÃÂ±ÃÂ¢ O.S.T,9115,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£Ã¢â¬Å¡ÃÂ°ÃÂ£ÃâÃÂªÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ°ÃÂ£ÃâÃÂªÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃÂ³ Vocal Album ÃÂ©?ÃÅÃÂ£ÃâÃÂ½ÃÂ©ÃÂ¸ÃÂ³ÃÂ£ÃâÃÂ©ÃÂ£Ãâ?ÃÂ£ÃâÃÂ¼,9097,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Forro de comeÃÂ§o ao fim,9092,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Per-Colle ÃÂ£ÃâÃ¢â¬Â°ÃÂ£ÃâÃÂ©ÃÂ£Ã¢â¬Å¡ÃÂ´ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ¹ÃÂ£ÃâÃÂ¬ÃÂ£Ã¢â¬Å¡ÃÂ¤ÃÂ£ÃâÃÂ¤ÃÂ£ÃâÃÂ¼ÃÂ¨Ã¢â¬Â¹ÃÂ±ÃÂ©Ã¢â¬ÂºÃ¢â¬Å¾ÃÂ¤ÃÂ¼?ÃÂ¨ÃÂªÃÂ¬II Disc2,9070,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£?ÃÂ¨ÃÂ£Ã¢â¬Å¡Ã¢â¬Â°ÃÂ£?Ã¢â¬Å¾ÃÂ£?Ã¢â¬Å¡ÃÂ£Ã¢â¬Å¡Ã¢â¬ÅÃÂ£??ÃÂ£Ã¢â¬Å¡Ã¢â¬Â¹ÃÂ£Ãâ?ÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃâ 'S ÃÂ£Ã¢â¬Å¡ÃÂµÃÂ£Ã¢â¬Å¡ÃÂ¦ÃÂ£ÃâÃÂ³ÃÂ£ÃâÃ¢â¬Â°ÃÂ£Ã¢â¬Å¡ÃÂ¹ÃÂ£ÃâÃ¢â¬Â ÃÂ£ÃâÃÂ¼ÃÂ£Ã¢â¬Å¡ÃÂ¸,9065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor Do Bang Bang Ãâ¬ Italiana,9057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Grosse Emission (ComÃÂ©die),9055,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃËÃÂ¥Ãâ¬ÃÅ¡ÃÂµÃÂ»ÃÂ¶ÃÂ³Ãâ¡ÃïÃÂ´Ãâ ÃÂ¾ÃÂ®ÃÂ¸ÃÂ°Ãâ¬ÃÅÃÂµÃÂ¿ÃÂ¿ÃÂ¤ 02,9030,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ¬ÃÂ®ÃâÃË-ÃâÃÂ°ÃÅ ÃâÃÂ¸ÃÂ¨Ãâ¡ÃÂºÃÂ¾ÃÂ«ÃâÃÂ¡,9027,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ³l og MÃÂ¡ni,9026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pulcinella - La consagraciÃÂ³n de la primavera,9009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Aulos-BlÃÂ¤serquintett spielt Danzi,Klughardt,Ravel,Heckel",9007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets Op 74 Nos. 1 - 3    KodÃÂ¡ly Quartet,8996,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Clavier bien TempÃÂ©rÃÂ© (1) (Gustav Leonhardt),8990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlÃÂ¤ser spielen Bach,8985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Chansons FranÃÂ§aises, Vol. I",8979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Festliche PanflÃÂ¶te zu Weihnachten,8975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mi BeBÃÂ©,8952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Suite \Cator et Pollux\ - 3 Fantasias,8939,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tributa ÃÂ  MÃÂºsica Popular Brasileira,8937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ©nitienne,8936,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Il Gregoriano \Mille anni di musica\ - CD 1 - Culto e culture,8928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"HÃÂ¤ndel, George Frideric, Israel in Egypt, Kings Collelge Choir CambridgeHÃÂ¤ndel CD 1",8924,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Musique barroque ÃÂ  la Royale Audience de Charcas (BolÃÂ­via),8906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tres Piezas EspaÃÂ±olas - Sonata Giocosa,8895,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tubes TÃÂ©lÃÂ© AnnÃÂ©es 80 (Vol 1),9144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ¡ÃÂ  ÃÂ¤ÃÂ¢ÃÂ³ÃÂ¬ÃÂ¿ ÃÂ§ÃÂ ÃÂ©ÃÂ¶ÃÂ ÃÂ¬ÃÂ¨,9165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlockflÃÂ¶tenkonzerte,8890,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£ÃâÃ¢â¬ËÃÂ£ÃâÃ¢â¬Â ÃÂ£Ã¢â¬Å¡ÃÂ£ÃÂ£Ã¢â¬Å¡ÃÂ·ÃÂ£Ã¢â¬Å¡ÃÂ¨ÃÂ£?ÃÂªÃÂ£?ÃÂ«ÃÂ£Ã¢â¬Å¡ÃâÃÂ£Ã¢â¬Å¡Ã¢â¬ÅÃÂ£?Ã¢â¬Å Original Sound Tracks DISC2,9167,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UltrasÃÂ³nica,9646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Revolution... revoluciÃÂ³n,9630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂºsicas para louvar ao Senhor,9464,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¿DÃÂ³nde jugaran las niÃÂ±as?,9462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KBS TVÃÂ¸ÃÂ¸ÃËÃÂ­ÃÂ¿ÃÂµÃËÃÂ­ ÃÂ³ÃÂ«ÃÂ·ÃÂ¡ÃÂ¸ÃÂ°Ãâ¬ÃÂ½,9460,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Na PressÃÂ£o,9452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La realtÃÂ  la lealtÃÂ  e lo scont,9444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"La RealtÃÂ , la LealtÃÂ  e lo Scontro",9404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃÂ¦k din kat i halen,9396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los paraÃÂ­sos desiertos,9383,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KBS TVÃÂ¸ÃÂ¸ÃËÃÂ­ÃÂ¿ÃÂµÃËÃÂ­ ÃÂ³ÃÂ«ÃÂ·ÃÂ¡ÃÂ¸ÃÂ°Ãâ¬ÃÂ½,9328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fablernas VÃÂ¤rld - Simma Lungt Del 1,9299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¹ÃÅÃÂ¼ÃÂºÃÂ°ÃÂ¼ ÃÂ¿ÃÂ· ÃÂµÃÂ¿ÃÂ¹ÃÂ°ÃÂ¿ÃÂ¸,9287,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le mÃÂ©pris,9280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HelmiÃÂ¤ Ja Sikoja,9274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃïÃÂ¥ÃÂ§ÃÂ³ÃÂ¬ÃÂ­ÃÂ»ÃÂ© ÃâÃÂ¥ÃÂ­ÃÂ¼ ÃÂ¨ÃÂ«ÃÂ¨ Ãâ ÃÂ¥ÃÂ­ÃÂ¨ÃÂ²ÃÂ¼ÃÂ¡ÃÂ  ÃâÃÂ¨ÃÂ£ÃÂ ÃÂ°ÃÂ®,9269,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra PasiÃÂ³n - Vol. 2,9230,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ»ÃÂªÃËÃâ¹ÃÂµÃÂ§ÃâÃÂ°ÃâÃÂ´Ãâ¬ÃâÃÂµÃÂ¤ÃÂ²ÃË,9215,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂ©lange de couleurs,9211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£ÃâÃ¢â¬Å¾ÃÂ£Ã¢â¬Å¡ÃÂ¤ÃÂ£ÃâÃÂ³ÃÂ£ÃâÃ¢â¬ÅÃÂ£ÃâÃÂ¼ PARADISE 5th. Anniversary,9210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£Ãâ?ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ­ÃÂ£ÃâÃâÃÂ£Ã¢â¬Å¡ÃÂ­ÃÂ£ÃâÃÂ¼ÃÂ£Ã¢â¬Å¡ÃÂºÃÂ£ÃâÃÂ»ÃÂ£ÃâÃÂ¡ÃÂ£ÃâÃÂ­ÃÂ£ÃâÃ¢â¬Â¡ÃÂ£Ã¢â¬Å¡ÃÂ£ 2,9209,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ist das alles ? (13 HÃÂ¶hepunkte mit den Ãârzten),9202,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Knight's Tale (CorazÃÂ³n de Caballero),9195,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ£ÃâÃÂ¡ÃÂ£Ã¢â¬Å¡ÃÂ¬ÃÂ£Ã¢â¬Å¡ÃÂ¾ÃÂ£ÃâÃÂ¼ÃÂ£ÃâÃÂ³23 ÃÂ£Ã¢â¬Å¡ÃÂªÃÂ£ÃâÃÂªÃÂ£Ã¢â¬Å¡ÃÂ¸ÃÂ£ÃâÃÂ ÃÂ£ÃâÃÂ«ÃÂ£ÃâÃÂ»ÃÂ£Ã¢â¬Å¡ÃÂµÃÂ£Ã¢â¬Å¡ÃÂ¦ÃÂ£ÃâÃÂ³ÃÂ£ÃâÃ¢â¬Â°ÃÂ£ÃâÃâ ÃÂ£ÃâÃÂ©ÃÂ£ÃâÃâÃÂ£Ã¢â¬Å¡ÃÂ¯,9190,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AxÃÂ© Bahia 2001,9174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Star Trek Voyager - \Caretaker\,9173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,National Lampoon's \Animal House\,9169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mass in C kajor, K. 317 \Coronation\ - Missa solemnis op. 123 CD1",8893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Jungfrau, dein schÃÂ¶n Gestalt (Das deutsche Chorlied um 1600)",8885,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃÂ¤um mit mir,7794,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃÂ¶nsten Lieder der Flippers,8463,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Concierto  PresentaciÃÂ³n,8439,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃÂ¼hlingsstimmen,8404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"GÃÂ¶tterdÃÂ¤mmerung, CD1",8400,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassik fÃÂ¼r Babys,8381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der fliegende HollÃÂ¤nder,8374,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,English suite No. 1 ÃÂ· Tocattas,8370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GÃÂ¶tterdÃÂ¤mmerung CD 2,8369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassiska mÃÂ¤sterverk CD1,8335,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weihnachten mit den Wiener SÃÂ¤ngerknaben,8328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃÅ¸-Edition Vol. 23,8321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Art de Maurice AndrÃÂ© CD4,8307,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les GÃÂ©nies Du Classique: Lully & Charpentier,8293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,JamaÃÂ¯que,8239,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EssiÃÂ©dubÃÂ£o,8223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FranÃÂ§afrique,8200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Time Has Come...\ the best of Ziggy Marley and the Melody Makers,8179,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chris Sheppard's \Have A Nice Trip\,8088,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Kleiner HÃÂ¤lfte der Welt,8083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Love D12\co Diamonds Vol. 3,8062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Inca - Aux Sources Du MystÃÂ¨re,8044,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥Ã¢â¬Â¡?ÃÂ£?ÃÂ¦ÃÂ£?ÃÂ¤ÃÂ£?Ã¢â¬Å¾ÃÂ£?ÃÂ¸ÃÂ§Ã¢â¬âÃÂ¾ÃÂ¨ÃÂµÃÂ°ÃÂ¨Ã¢âÂ¬Ã¢â¬Â¦,8007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,itÃÂ´s all about the stragglers,7970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los NÃÂºmeros 1 de FLAIX FM / CD 3,7954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¿... o fue un sueÃÂ±o? (VersiÃÂ³n Remasterizada),7932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DÃÂ­zimo ÃÂ© Partilha,7904,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ©ÃÂ¸ÃÂ³ÃÂ¦ÃÂ¥ÃÂ½ÃÂ©ÃÂ Ã¢âÂ¬ÃÂ¥ÃÂºÃÂ§,7899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Enigma CLUB - ÃïÃÂ®ÃÂ·ÃÂ¼ ÃâÃÂ ÃÂ²ÃÂ¨ÃÂªÃÂ ÃÂ­ÃÂ ,7874,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¹ÃÅÃÂ¼Ãâ (CD 09-ÃÂ¿ÃÂ¹ÃÂ¼ÃÂºÃÂ°ÃÂ¡Ãâ¬Ãâ¡ ÃÆÃÅ ÃÂ»ÃÂ³),8452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,OrphÃÂ©e ed Euridice,8468,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn, La CreaciÃÂ³n (02)",8860,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,De Beste OperettemelodieÃÂ«n CD 1,8520,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Gran misa en do menor (LÃÂ¡ki, Denes, Equiluz, Holl-Harnoncourt)",8840,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trio Henry - intÃÂ©grale,8781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Scala HÃÂ¶rtip-CD,8778,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CD 13 - frÃÂ©dÃÂ©ric chopin,8774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jozsef RÃÂ©ti,8763,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥ÃÂ¬ÃÂ«ÃÂ½ÃÂ¡EÃÂºÃÂ¿ÃÂ¾ÃÂ·  Eva Marton  ÃÂ¤kÃÂ°ÃÂªÃÂ­ÃÂµÃÂ¡EÃÂ½ÃïÃÂµ^ÃÂ¡EÃÂ¬ÃâºÃÂ¬MÃÂ¥ÃïÃÂ½ÃÂ·  New York Harp Ensemble,8751,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,13 PrÃÂ©ludes,8743,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Valsas e DanÃÂ§as ClÃÂ¡ssicas,8734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Homenaje a la Ãâpera - Norma,8722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haydn: The \Paris\ Symphonies - CD1,8682,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IntÃÂ©grale des Quatuors CD1,8679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Sinfonische TÃÂ¤nze, Elegische Melodien, Peer Gynt Suiten",8667,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"MatthÃÂ¤us-Passion (Akademie fÃÂ¼r alte Musik Berlin, CD 2)",8666,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Georg Friedrich HÃÂ¤ndel - Der Messias (AuszÃÂ¼ge in engl. Sprache),8665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Journey Home ÃÂ¤sÃÂ¸yÃÂ¤WÃÂªÃÂºÃÂ®a,8659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'intÃÂ©grale des sonates pour flÃÂ»te (CD2-2),8657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 Jahre Ãâsterreich,8646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂºsica en Daroca,8625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La BohÃÂ¨me - CD2,8620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ³ÃÂ«ÃÂ·ÃÂ¡Ãâ¬Ãâ¡ ÃÂ³ÃÂ¯ÃÂ°ÃÂ³ Ãâ¬ÃÂ§ÃÂ¿ÃÂ¡ ÃÂ¶ÃÅ¸ÃÂ´Ãâ ÃÂºÃÂ°,8608,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassische HÃÂ¶hepunkte,8596,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃÅ¸-Edition Vol. 46,8572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn: The \London\ Symphonies, Vol. 2, CD2",8552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃÂ¤umerei,8545,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hungarian Chamber Orchestra5 in E flat major \Schoolmaster\,8543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les Grands Classiques au CinÃÂ©ma,8541,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die vier Jahreszeiten des kleinen BÃÂ¤ren,8531,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ki nevet a vÃÂ©gÃÂ©n,4435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,bandemÃÂ³nio / silÃÂªncio,4290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÆÃÂ ÃÂºÃÂ¹ (CD 09),24,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Project NoÃÂ°1,1351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Des isch bÃÂ¤rig,1629,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuba Es MÃÂºsica - Vol. 1,1625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mitt ÃÂ¶ga - samlade krÃÂ¶nikor och andra bekÃÂ¤nnelser,1621,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los aÃÂ±os Rico-Vox 62-66,1598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ChÃÂ¶re,1513,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Unsigned\ Collection,1490,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La CompaÃÂ±ia,1486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Douce France RÃÂ©tro - Fernandel,1426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃâÃÂ¡ ÃÂ«ÃÂ¡ÃÂºÃÂªÃÅ ÃÂ´ÃÂ±ÃÂ¡ÃÂ£ÃÂ¯ÃÂ½ÃÂ¤ÃÂ©ÃÂ¡ ÃÂ¬ÃÂ¡ÃÂ²,1420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Et dusin med drÃÂ¦sinen,1411,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gympa PÃÂ¥,1402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Basse ÃÂ©lectrique - Warner Jazz Collection,1389,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmÃÂ¥t SmÃÂ¥t,1372,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La LÃÂ©gende (Disc 2),1344,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃËÃÂ¥ÃÂªÃÂ®ÃÂ£ÃÂ ÃÂ«ÃÂ¨,4252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IndÃÂ©tendances Jazz,1328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Louisiana CafÃÂ©,1268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sucessos InesquecÃÂ­veis de Elis Regina - Vol. 5,1223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ManhÃÂ£ de Liberdade,1211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,plays Rolf von NordenskjÃÂ¶ld - Passages,1194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PozvÃÂ¡nka Na Jazz,1171,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,jeden ÃÂ¶wiat (cd2),982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CafÃÂ© Copacabana vol.2  cd2,889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HeimatklÃÂ¤nge 2001 (Live),807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Improvisations pour FlÃÂ»te de pan et Orgue (1/2),802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sayas y huayÃÂ±os,757,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃÂ©javarÃÂ¡zs,756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La dÃÂ©sabusion,754,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"A bisserl GlÃÂ¼ck, a bisserl Freud",1634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EVER AFTER -MUSIC FROM \TSUKIHIME\-,1637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AdiÃÂ³s Nonino,1649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ven acÃÂ¡,1661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La mÃÂ©moire des boÃÂ®tes ÃÂ  chansons (Disque 2),2049,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lei ÃÂ¨....,2042,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HipHop fÃÂ¼r Angestellte,2037,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les Plus Belles Chansons d'Amour ÃÂ  la FlÃÂ»te de Pan,2033,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Emilio JosÃÂ© Lorenzo SantamarÃÂ­a y otros inimitables de los 70s,2013,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KevÃÂ¤t herÃÂ¤si tÃÂ¤ÃÂ¤llÃÂ¤,1994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KinderchÃÂ¶re singen die schÃÂ¶nsten Weihnachtlieder,1982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Balades i canÃÂ§ons,1977,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Papa te raconte vol.16 - PoÃÂ¨mes De Grands Auteurs,1975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ­,1905,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lillebror och Karlsson pÃÂ¥ taket,1880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SkÃÂ¦rmtrolden Hugo,1862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SoirÃÂ©e Cocktail,1861,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãïfrica Gerais,1849,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les nouveaux HÃÂ©ros,1842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jos Vain TietÃÂ¤isit,1805,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Mudlark\,1798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TÃÂº CambiarÃÂ¡s,1796,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Morot, Raka vÃÂ¤gen till dig",1787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KindertrÃÂ¤umeland - Ich bin der kleine Zappelmann,1768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,12\ 80's Dance Groove Classics (CD 2),1762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CD audio personnalisÃÂ©,1759,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LÃÂ¶cher (Die Geheimnisse von Green Lake),1729,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El SultÃÂ¡n De La Bachata,1690,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrajetÃÂ³ria,1683,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CrÃÂ¨vecoeur,1680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RaÃÂ§as Brasil,1679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 kossa nÃÂ³tt,744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Prohibido dÃÂ¡ el cante,734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weihnachtskonzert der Fischer ChÃÂ¶re,731,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LejsmelÃÂ¥tar,391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃÂ´l i vÃÂ¤gga,362,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ§ui-lÃÂ ,360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantar ÃÂ© preciso,358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sevillanas HistÃÂ³ricas - Volumen I,357,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ° Festa!,341,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PasiÃÂ³n latina,320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C'est NoÃÂ«l! C'est NoÃÂ«l! C'est NoÃÂ«l!,317,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uma noite sÃÂ³ (Disc 2),304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Az ifjÃÂºsÃÂ¡g sÃÂ³lyommadÃÂ¡r,288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trekkspilltreff i SÃÂ¸ristua,273,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Um Barquinho e Um ViolÃÂ£o - Vol.1 Disco 2,270,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃÂ¦nt goddag,266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmaragdvÃÂ¡ros,251,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,^MADE IN GREECE,244,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jari SillanpÃÂ¤ÃÂ¤,235,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ¥r kÃÂ¤rlek ÃÂ¤r stark,223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I muaÃÅ¸ dir no sag'n das i  di gern hab,213,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Euro Darkness 1 ÃÂ£Ã¢âÂ¬ÃâThe Early Days OF SebÃÂ£Ã¢âÂ¬Ãâ,210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃÂ¼hstÃÂ¼ck in Budapest,199,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Om hundrede ÃÂ¥r er alting glemt,169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¤ÃÂ¸ÃÂ­ÃÂ¥ÃÂ³ÃÂ¶ÃÂ£?ÃÂ¿ÃÂ£Ã¢â¬Å¡Ã¢â¬Â ÃÂ£?? SONG LIBRARY 1,146,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GuzmÃÂ¡n y CÃÂ­a,138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MinnesmÃÂ¤rken,134,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PopulÃÂ¤re Musik aus Griechenland,128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃÂ¶dselfest,88,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beinah (GefÃÂ¼hlsecht und Lebensfroh),85,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,wÃÂ¤ge dir,80,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"En el CafÃÂ© de los Artesanos, Aguascalientes. Vol. 1",379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich mÃÂ¶chtÃÂ´ so gern dein TeddybÃÂ¤r sein,401,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NÃÂºmeros Antiguos,726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ­ctor Herdia,402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MarÃÂ­a Dolores Pradera acompaÃÂ±ada por Los Gemelos,722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,och 14 andra sÃÂ¥nger om bÃÂ¥tar och vatten,680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ¡ & Guarabyra,669,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Stolpern dÃÂ¤rfst ....,650,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃÂ­a De La Navidad Canaria,646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le MystÃÂ¨re Des Voix Bulgares Vol. 1,632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ¤nner fÃÂ¶r livet,597,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuando el amor se daÃÂ±a,587,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ  l'Olympia 1992 CD2,558,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SzÃÂ©p szerelmem MagyarorszÃÂ¡g #1 - NapfÃÂ©nyfia,546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SchwyzerÃÂ¶rgeli,539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Er rouÃÂ© Stevan,529,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AddÃÂ²,524,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Segredo ÃÂ© Louvar,511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃÂ¤sta Dansband 15,505,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El flamenco a travÃÂ©s Vol.V,500,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃÂ¤sta Dansband 8,499,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schuine CafÃÂ© Hits,496,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die weiÃÅ¸blaue Hitparade CD 2/2,493,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AixÃÂ² ÃÂ©s pecat,485,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ°xitos de MarÃÂ­a Dolores Pradera,484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vem esta ÃÂ© a hora,482,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpielrÃÂ¤ume - JubilÃÂ¤ums CD der Wirkstatt e.V.,480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sorge-Ecke-MÃÂ¼hsam,469,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"God Morgen, SÃÂ¸ster",451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BrÃÂ¨va E TivÃÂ n,432,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,lieder zum fÃÂ¼rchten,420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schlager ÃÂ  la carte,2054,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¦ÃÂ®ÃÂ¯ ÃÂ±ÃÂ¥ÃÂ«ÃÂ¸,2062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâdemarkens Son,2084,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Que Viva ChangÃÂ³!,3787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KarÃÂ¡csony ZÃÂ¡mbÃÂ³ Jimmyvel,3773,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ¤gen till Jerusalem,3742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La FÃÂªte ÃÂ  Boris,3718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÅ ÃÂ®ÃÂ«ÃÂ¼ÃÂ¶ÃÂ  ÃâÃÂ°ÃÂ¥ÃÂ¬ÃÂ¥ÃÂ­ÃÂ¨. ÃâÃÂ ÃÂ±ÃÂ²ÃÂ¼ 2,3709,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¶ÃÂ«ÃÂ·ÃÂ½ÃâÃÂ®ÃâÃÂ©III,3708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Luz das NaÃÂ§ÃÂµes,3677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElÃÂ¤mÃÂ¤ Vie,3665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A MÃÂºsica do SÃÂ©culo - vol. 1 - Revista Caras,3649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FamÃÂ­lia Lima,3637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ©rgio Reis,3628,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les PlusBeaux Chants de NoÃÂ«l,3617,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃÂ¶liche Weihnachten CD 2,3599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nossas CanÃÂ§ÃÂµes 2,3517,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElfonÃÂ­a,3458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sur les dÃÂ©combres,3430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LaÃÅ¸t uns froh und munter sein - CD2,3423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le MÃÂ©crÃÂ©ant,3406,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¨Ã¢âÂ¢ÃÂ«,3401,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pura PiÃÂ±ita Colombiana,3399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Diether Krebs und ungebetene GÃÂ¤ste,3378,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂ¤nner!,3373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sana-mode II ÃÂ£Ã¢âÂ¬Ãâpop'n music & beatmania momentsÃÂ£Ã¢âÂ¬Ãâ,3332,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pop EspaÃÂ±ol 88 Vol.1,3305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HANGAR 21 by \Winterthur\,3228,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,StjÃÂ¤rnfall CD2,3224,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PrÃÂªmio Visa MPB Instrumental,3214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Igreja batista Nova JerusalÃÂ©m-Bom ÃÂ© Louvar a Deus,3194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EmoÃÂ§ÃÂµes Vol. 3,3781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¤@ÃÂ®aÃÂ¤H,3793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃÂ¡s Noches De Blanco SatÃÂ©n,3165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Buffet des anciens ÃÂ©lÃÂ¨ves,3798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amo VocÃÂª - Vol. 7,4222,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,25 ÃÂ¥r med \The Real dansktop\ CD2,4200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃÂ¼hwerke,4130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃÂ¤rldens bÃÂ¤sta by,4105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃÂ£o Urbano,4091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Floating Waves - the glasnost compilation ÃÂ´94,4080,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die HÃÂ¶hle des Grauens,4077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hol a nadrÃÂ¡gom?,4065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alma CaribeÃÂ±a (Caribbean Soul),4039,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Undir FjÃÂ¶gur Augu,4020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ½ÃÂ£ÃïÃâ¬Ãâ¡ÃÂ©ÃâÃÂµ,4007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GrÃÂ­nlÃÂ¶gin Illu,3998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Grandes Ãâ°xitos,3988,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Csak egy vallomÃÂ¡s,3982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ° Esse AÃÂ­ Que Ãâ° O Homem,3957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dans Une Heure - 5ÃÂ¨me LP,3945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TournÃÂ©e 2002 CD 1,3917,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hit News 90 \Volume 2\,3893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃÂ¶ÃÅ¸ten Hits von Queen,3889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nenhuma LÃÂ¡grima,3883,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hoirr ÃângÃÂ¶,3877,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¥xÃâ WÃÂ²ÃâÃÂ¤QÃÂ¤GÃÂ©ÃÂ¡ÃÂ­ÃÂµÃâ¦TÃÂ®i,3876,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Depois De VocÃÂª...,3867,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\hon\,3863,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra MediterrÃÂ¡nea Vol 1,3835,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Probier's mal mit GemÃÂ¼tlichkeit,3807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Par curiositÃÂ©,3800,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ett gott skratt pÃÂ¥ BjÃÂ¶rkgÃÂ¥rden,3176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Liebe die alles trÃÂ¤gt,3136,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor de LembranÃÂ§as,2100,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CoolinÃÂ´ in Cali,2617,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sommer Schlager TrÃÂ¤ume,2584,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amigo Ãâ° Pra Essas Coisas,2580,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Risainen elÃÂ¤mÃÂ¤ - Juice leskisen lauluja a cappella,2570,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃÂ¶rt Ihr Alle Glocken LÃÂ¤uten,2546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Auf Den Mond SchieÃÅ¸en (Hinterherfliegen),2543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BÃÂ¸nder i solnedgang,2538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ©lection Talents,2483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃÂµhja vahemÃÂ¤ng,2441,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GrÃÂ¼nes Licht,2423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haykirsam DÃÂ¼nyaya,2420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantos y Encantos OaxaqueÃÂ±os,2395,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ohne ZÃÂ¤rtlichkeit geht gar nix,2387,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãâ°xitos Vol. 2,2376,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die ZimtlÃÂ¤den,2338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"1992-01-30 - Oakland Coliseum, Oakland, CA - \Mirrors\ - Disc 1",2309,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂªFÃÂ¤ÃÂ¨ÃÂ¤ÃÂ§ÃÂ¯]ÃÂ¢ÃÂ¼,2285,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ConexÃÂµes,2274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VocÃÂª nÃÂ£o pode desistir,2255,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃÂ­a Musical,2245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZÃÂ© Ramalho - Parcerias,2238,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YeloÃÂ­molo,2234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NiÃÂ±a piensa en ti,2231,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SitÃÂ¤ Saa MitÃÂ¤ Tilaa,2210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Como ÃÂ© que a gente faz,2205,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃïÃÂ®ÃÂ«ÃÂ¸ÃÂ² ÃïÃÂ®ÃÂ°ÃÂ¬ÃÂ ÃÂ«ÃÂ¼ÃÂ­ÃÂ»ÃÂ©,2162,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mega FÃÂªte - cd 4,2160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ca va ÃÂ§a va,2123,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,21ÃÂ¤ÃÂ¸Ã¢â¬âÃÂ§ÃÂ´Ã¢âÂ¬ÃÂ£?ÃÂ«ÃÂ©?ÃÂºÃÂ£?Ã¢â¬âÃÂ£?ÃÂ¸ÃÂ£?Ã¢â¬Å¾ÃÂ£Ã¢â¬Å¡ÃÂ¢ÃÂ£ÃâÃ¢â¬Â¹ÃÂ£ÃâÃÂ¡ÃÂ£Ã¢â¬Å¡ÃÂ½ÃÂ£ÃâÃÂ³ÃÂ£Ã¢â¬Å¡ÃÂ°ÃÂ¥ÃÂ¤ÃÂ§ÃÂ¥Ã¢â¬Â¦ÃÂ¨ÃÂ£ÃâÃÂ¸ÃÂ£ÃâÃÂ¬ÃÂ£ÃâÃ¢â¬Â¹ÃÂ£Ã¢â¬Å¡ÃÂ¢ÃÂ£ÃâÃÂ ÃÂ£ÃâÃâÃÂ£ÃâÃâÃÂ£Ã¢â¬Å¡ÃÂ¯ÃÂ£Ã¢â¬Å¡ÃÂ¹ Disc.1,2606,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bag de blÃÂ¥ persienner,2618,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃÂ³ No Sapatinho,3108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GÃÂ¶tter auf Abruf,2620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpektColÃÂ¶r,3107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ColecciÃÂ³n Aniversario,3083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les annÃÂ©es YÃÂ©yÃÂ© - Vol1 - CD2,3078,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,30 phonÃÂ©mes en 30 chansons (GS-CP),3076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃÂªves Multicolores,3072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les AnnÃÂ©es YÃÂ©yÃÂ© -Vol1 - CD1,3068,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Yes-IÃÂ´m Limited Vol. III (disk 2),3004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Voyage IntÃÂ©rieur,2952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,28 hammergo'e bÃÂ¸rnesange (cd2),2942,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YÃÂ¶n tuuli vain,2926,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃÂ©lÃÂ¨ne 1997,2903,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CafÃÂ© Latino,2899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Al CompÃÂ¡s De Un Tango,2882,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Das groÃÅ¸e Bibel-HÃÂ¶rbuch,2868,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beat of the 80ÃÂ´s - CD 2,2818,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LibertÃÂ  obbligatoria (Cd 2),2814,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DikÃÂ¨s/ A Vif,2785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Som pÃÂ¥ film,2781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TraumtÃÂ¤nze,2767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'OdyssÃÂ©e,2756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Musica do SÃÂ©culo  4,2748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,99.9FÃÂ°,2725,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃÂ¶nsten Lieder Zur Weihnacht-CD1,2723,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Livre GrÃÂ©gorien de Silos CD1,2718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lutz GÃÂ¶rner spricht Joachim Ringelnatz,2659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AlgÃÂ©rie,2655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tango RevoluciÃÂ³n,2653,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÂ¿Donde JugarÃÂ¡n Las NiÃÂ±as?,9660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÂÃÅÆÇÌÕÖÜâåçïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
