schema_context,column,check,check_number,failure_case,index,check_source_code
Column,title,Check for *possibly* invalid symbols.,0,La \Dolce Vita\ Les Tubes Dance Italiens / Les Chansons Dance Italiennes (Disc 1),22,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazil Jazz Pulsation,6136,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sho' Gone Crazy!,5951,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brave and Crazy (Remix),5994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Raza Sin Raza,5995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets - \Apponyi\ Op. 71 - Tatrai Quartet - cd 1,6002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Conspiritualized,6009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy World,6026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Best Of ManÃ¡ - Live!,6105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Globalization,6135,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Devo Tudo a VocÃª,6137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Sweet Live - \Ballroom Blitz\,5907,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sociedad Mecanizada,6152,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Rock On\ Sessions,6154,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DonÂ´t Call Me MÃ¼ller!,6165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szvit,6169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,(Non Ã¨ Per Sempre),6216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzz And Nonsense,6232,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzanine,6264,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Å“Å¸Ã§Â©ÂºÃ£Æ’â€˜Ã£Æ’Æ’Ã£â€šÂ¯,6300,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Las Mejores 100 Baladas en EspaÃ±ol - CD3,5938,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Laura HÃ¤kkisen SilmÃ¤t,5873,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GarrÃ£o do Pampa,7272,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Netvor z ciernej hvezdy Q 7A,5672,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,2Âº VersÃ£o,5480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Negl mÃ¶t KÃ¶pf,5486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets \The Lark\ Op. 64 - Tatrai Quartet - cd 1,5539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,veter nadezhdi,5549,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Last Waltz Disc 1,5566,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,All Eyez On Me Book 1,5573,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MillÃ©sime - Live 00/01,5577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃ³n De Pop Internacional De La Historia - CD 15,5655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CambierÃ  il tempo,5675,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Funk Â´d, RaptÂ´ n TrashÂ´d",5792,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chillout Ibiza CD One,5687,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cristian Azul,5697,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Live Bizzare Festival 2000,5715,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\FÃ¼r Elise\ and other piano favourites,5735,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Club Cutz,5738,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Secrets Of Your Dreams - Live @The DÃ¼sseldorf Easter Festival, Germany, April 07, 1996",5745,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RakkauskirjeitÃ¤,5763,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'involuzione della specie,5788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A la fontaine des romÃ©os,6325,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy In The Night,6350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy,6367,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ¼r immer frei,6982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ©mzene,6880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le DÃ´me,6901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Dance Vol. 2,6904,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bring 'Em Out \Live\,6911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rock En EspaÃ±ol Vol2 Cd 2,6941,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃ³savÃ­n og RaftÃ³nlist,6946,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PequeÃ±os Exitos,6963,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃ±ana Cruzamos El Missouri (CD2),6975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VidasongstaÃ§Ãµes,6994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GeraÃ§Ã£o Pop,6381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³ Alegria,7005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Endless Love - Die schÃ¶nsten Pop-Duos (CD 2),7046,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃ£o sem PoluiÃ§Ã£o,7114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Como AlcanÃ§ar uma Estrela,7128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Roger's Waltz,7130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jen kdyz to musi bejt,7160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mexe Mexe que Ã© Bom,7191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Otevrete! Jsou tady lidÃ©..,7247,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Just Say NoÃ«l,6847,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,celeste azzuro e blu,6845,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃ¶ÃŸten Hits der 80er und 90er aus Ã–sterreich - Papermoon,6830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Raza Odiada,6803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mixing Desk Recording Stadion Basel Switzerland - Disc 1,6417,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Caly Swiat Nalezy do Nas,6423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El hambre de su poder es la sed de nuestra venganza,6456,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZurÃ¼ck zur Front,6458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Playaz N The Game,6496,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Venter PÃ¥ Verden,6536,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,No Parlez,6538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TriplezÃ©ro,6550,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"WHITE TRASH, TWO HEEBS AND Ã¯Â¼Â¡ BEAN",6613,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,y'Ã© quelle heure?,6632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Off To See The Lizard,6660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'arÃ¨ne des rumeurs,6677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bazooka!!!,6685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RecopilaciÃ³n,6694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Ã©clat du ciel Ã©tait insoutenable,6708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Con Mucho CariÃ±o,6787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Egy kicsit bulizgatunk,6799,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Various/Hits Ãœber 30 CD3,5462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trail Blazer,5396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bat Head Soup - Tribute To Ozzy,5354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amo VocÃª - Vol. 7,4222,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃ£o Urbano,4091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤rldens bÃ¤sta by,4105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Bonne Chanson - Gerard Souzay,4113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pacha Ibiza 2001 - CD1,4124,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¼hwerke,4130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"The 60`s for the 90`s - Witzige, spritzige Schlager",4155,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hits van de geheime zenders 3/3,4168,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,25 Ã¥r med \The Real dansktop\ CD2,4200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz Vol. 80,4268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bog ne zabyl,4408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sizhu - Silk Bamboo - Chamber Music of South China,4283,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,bandemÃ³nio / silÃªncio,4290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Romanza,4311,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ambien Ibiza vol 2,4313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bozai Trance 10e Anniversary (DISK Two),4317,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King Size Rock 'n' Roll Thrills,4323,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Shades of Jazz,4327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zadnji Krizarski Pohod,4337,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Privilege Ibiza - CD1 - Island Cafe,4076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hol a nadrÃ¡gom?,4065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Viva Moniuszko, Viva Verdi",4050,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alma CaribeÃ±a (Caribbean Soul),4039,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nenhuma LÃ¡grima,3883,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃ¶ÃŸten Hits von Queen,3889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hit News 90 \Volume 2\,3893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Breeze  - Jazz Ballads,3896,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ghazals to remember,3912,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TournÃ©e 2002 CD 1,3917,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nazer / Lewis,3935,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dans Une Heure - 5Ã¨me LP,3945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Csak egy vallomÃ¡s,3982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O cem mluvi muzi,3983,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Grandes Ã‰xitos,3988,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Turboschlager 4 - Die tollsten Hits der letzten Jahrzehnte,3990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GrÃ­nlÃ¶gin Illu,3998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amazing Love,4012,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Undir FjÃ¶gur Augu,4020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szevasztook,4021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rock Rendez Vouz CD1,4031,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Licht am Horizont,4391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Merack za FaK,4518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Takamehtien mekatÃ¤htiÃ¤,5292,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"06-14-00 Praha, Czech Republic (Side B)",5166,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Crystal Horizon - Shadows of Winter vol. 2,5029,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azuli Presents Miami 2003 Cd.1,5035,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tribal Mix Sessions VoÃ¬. 1,5038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¡Simpatico!,5057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Psychokiller QuÃ©st Que CÃ©st Part Two,5073,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hot Hazy and Human,5086,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Greats,5127,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synkronized,5138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃ±ana Cruzamos el Missouri,5167,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La luz del cuerpo,4528,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Live At The GrenzÂ´,5187,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alles FÃ¼r Den Herrn cd 2,5204,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzz Parade,5242,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Je M'en Viens SoÃ»l,5245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UstmamÃ²,5261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MotÃ­! Avalot...,5275,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jag Ã¤r du,5288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsica Serve Pra Isso,5291,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tabaluga und das verschenkte GlÃ¼ck,5020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Drifting into Amazing,4997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kai Pilnaties Akis UÃ¾merks Mirtis,4962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzzbusters,4953,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿La calle es tuya?,4542,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sedona Arizona,4548,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃ³n De Pop Internacional De La Historia - Cd 12,4575,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Complete\ Rehearsals 1987 disc 4,4582,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SzajhÃ¡k & PartizÃ¡nok,4649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Au RÃªve,4654,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Anokha: Soundz of the Asian Underground,4661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Segismundo ToxicÃ³mano,4692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Flickor Och KÃ¤rlek,4715,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZdravÃ­,4720,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dantzig Twist,4744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Astronomia Razonable,4756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsica contra osopetos,4782,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EhjÃ¤,4870,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Durstige MÃ¤nner,4881,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Razorblade Romance (Limited Edition),4911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Too much fun in a no fun zone,4916,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Onder dezelfde zon,7260,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ViolÃ£o apaixonado,7313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Citizen of Sun,3868,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tres Piezas EspaÃ±olas - Sonata Giocosa,8895,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Donizetti - Lucia di Lammermoor [3of3],8798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azzuri,8832,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Vol. 68-Bach,Franck,Liszt,Debussy,Villa-Lobos",8859,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn, La CreaciÃ³n (02)",8860,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Suzuki Violin School,8880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Od Samice Do Jazza,8881,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlockflÃ¶tenkonzerte,8890,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart, Vivaldi, Luciani, Biber",8891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Musique barroque Ã  la Royale Audience de Charcas (BolÃ­via),8906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Astor Piazzolla  -  El Tango,8789,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart - Klaviersonaten 15-18,8913,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Donizetti - La favorita CD2,8915,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Il Gregoriano \Mille anni di musica\ - CD 1 - Culto e culture,8928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'incoronazione di Poppea,8931,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tributa Ã  MÃºsica Popular Brasileira,8937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Suite \Cator et Pollux\ - 3 Fantasias,8939,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Piano Works CD 09. Mazurkas (1),8959,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Festliche PanflÃ¶te zu Weihnachten,8975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Thomanerchor und Gewandhausorchester Leipzig / Messe h-moll BWV 232 / Live-Aufnahme v. 28.7.2000 Thomaskirche Leipzig,8793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazil bossa e samba (CD2),8785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Country Breeze,7318,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart, Symphonies Nos. 13, 14 & 20",8726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brandenburgische Konzerte Nr 4-6,8649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'intÃ©grale des sonates pour flÃ»te (CD2-2),8657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Journey Home Â¤sÂ¸yÂ¤WÂªÂºÂ®a,8659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Star of the Magi (Suzie LeBlanc, Daniel Tylor, Voix Humaines)",8661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"MatthÃ¤us-Passion (Akademie fÃ¼r alte Musik Berlin, CD 2)",8666,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Sinfonische TÃ¤nze, Elegische Melodien, Peer Gynt Suiten",8667,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haydn: The \Paris\ Symphonies - CD1,8682,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C. Stamitz: Clarinet Concertos - Vol. II,8696,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mazzini canta Battisti,8727,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trio Henry - intÃ©grale,8781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Valsas e DanÃ§as ClÃ¡ssicas,8734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sacre Du Printemps & Firebird (Pierre Boulez),8742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,13 PrÃ©ludes,8743,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Young Wolfgang Amadeus Mozart,8746,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥Ã¬Â«Â½Â¡EÂºÂ¿Â¾Â·  Eva Marton  Â¤kÂ°ÂªÂ­ÂµÂ¡EÂ½ÃÂµ^Â¡EÂ¬Ã›Â¬MÂ¥ÃÂ½Ã·  New York Harp Ensemble,8751,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Heroes (Arias by Handel, Hasse, Gluck, Mozart)",8757,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"W.A. Mozart, Klavierwerk III",8770,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Scala HÃ¶rtip-CD,8778,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Chansons FranÃ§aises, Vol. I",8979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlÃ¤ser spielen Bach,8985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets Op 74 Nos. 1 - 3    KodÃ¡ly Quartet,8996,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"La RealtÃ , la LealtÃ  e lo Scontro",9404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HelmiÃ¤ Ja Sikoja,9274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le mÃ©pris,9280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Original Film Soundtracks: The Best of Godzilla 1984-1995,9295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fablernas VÃ¤rld - Simma Lungt Del 1,9299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart greatest hits,9325,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Up a Lazy River,9338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schizophonic,9361,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los paraÃ­sos desiertos,9383,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blazing Away,9419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haydn: Sch pfungsmess - Mozart: Spaur-Mess,8998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La realtÃ  la lealtÃ  e lo scont,9444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Na PressÃ£o,9452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,la era de la boludez,9453,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsicas para louvar ao Senhor,9464,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schizophonic!,9550,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Era De La Boludez,9572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Revolution... revoluciÃ³n,9630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UltrasÃ³nica,9646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã§Ã³Ã¬Ã­Ã»Ã© Ã„Ã¥Ã­Ã¼ Ã¨Ã«Ã¨ Ã†Ã¥Ã­Ã¨Ã²Ã¼Ã¡Ã  Ã”Ã¨Ã£Ã Ã°Ã®,9269,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra PasiÃ³n - Vol. 2,9230,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Knight's Tale (CorazÃ³n de Caballero),9195,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Eisenherz,9179,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pulcinella - La consagraciÃ³n de la primavera,9009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O'Zone:  Noize of A Subculture,9019,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,School Daze,9022,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³l og MÃ¡ni,9026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Grosse Emission (ComÃ©die),9055,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor Do Bang Bang Ã€ Italiana,9057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Shirat HaZinzana,9072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Solarize,9107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Original Cast - Tanz Der Vampire (CD 2),9108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cirque Eloize,9114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃ¥ eventyr med Plet,9119,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tubes TÃ©lÃ© AnnÃ©es 80 (Vol 1),9144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die schÃ¶nsten Lieder der Disney-Club-Serien,9145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lorenzo's Oil,9160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,National Lampoon's \Animal House\,9169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,OST Elia Kazan's America America,9170,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Star Trek Voyager - \Caretaker\,9173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Waltz and Polkas,8648,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 Jahre Ã–sterreich,8646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vier letzte lieder,8641,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 15,7981,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ministry Presents... Ibiza Chillout,7869,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Enigma CLUB - ÃÃ®Ã·Ã¼ Ã‚Ã Ã²Ã¨ÃªÃ Ã­Ã ,7874,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kdyz muz se zenou snida,7928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,zeig mir dein gesicht,7930,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿... o fue un sueÃ±o? (VersiÃ³n Remasterizada),7932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 45,7951,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los NÃºmeros 1 de FLAIX FM / CD 3,7954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zakryv glaza,7979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bar Itaca Ibiza-BPM_HOUSE,7985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chillout in Ibiza 5 CD 2,8086,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥â€¡?Ã£?Â¦Ã£?Â¤Ã£?â€žÃ£?Å¸Ã§â€“Â¾Ã¨ÂµÂ°Ã¨â‚¬â€¦,8007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 20,8020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Inca - Aux Sources Du MystÃ¨re,8044,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Piosenki Nieprzyzwoite,8052,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nuova Era & Meditazione Vol. 28,8058,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Love D12\co Diamonds Vol. 3,8062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fresh Jazz Vibes,8073,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Kleiner HÃ¤lfte der Welt,8083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Oz Factor,7855,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rendez-Vous (Disque 2/2),7803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¤um mit mir,7794,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A FÃ¡brica Do Poema,7788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Atrayendo Corazones,7320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jen blazen zarli,7347,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rymovani o zivote,7402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Com AÃ§ucar Com Afeto,7455,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Sexy,7515,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Wanna Have More Fun -12Ã£â€šâ€º Version Collection,7518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Summertime Jazz (Jazz & TÃ¦Ã¡Ã¦ - 64),7521,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King Clarentz,7528,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Seu Ãšltimo Show Gravado Ao Vivo,7607,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Great Soul Hits\,7612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Contigo AprendÃ­ CD2,7634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Night Jazz Fantasy Vol. 1,7674,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy 'Bout a Saxophone,7694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Parlez vous franÃ§ais,7707,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Harvest Jazz And Blues Festival (Fredericton, NB, Canada)",7716,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Angel Sings Janis \Live\,7717,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Di Doido Ã© Pouco,7780,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Abduction - Gee Moore (Ibiza),8085,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chris Sheppard's \Have A Nice Trip\,8088,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Famous Waltzes,8630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¤umerei,8545,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Novecento 02 - Incontro con il Jazz,8477,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Aren lezen cd3,8486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart - Late Symphonies (2-3) - Nr.29,38,39",8497,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,De Beste OperettemelodieÃ«n CD 1,8520,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Nocturnes , Polonaises, Mazurkas",8526,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die vier Jahreszeiten des kleinen BÃ¤ren,8531,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les Grands Classiques au CinÃ©ma,8541,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hungarian Chamber Orchestra5 in E flat major \Schoolmaster\,8543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart: Streichquartette KV 465, 490, 80",8546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ozone-Project 7 (CD2),8127,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kamermuziek vol.2,8547,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn: The \London\ Symphonies, Vol. 2, CD2",8552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃŸ-Edition Vol. 46,8572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart,8577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart - Symphonies,8588,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassische HÃ¶hepunkte,8596,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Constanzo Festa - La Spagna,8613,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La BohÃ¨me - CD2,8620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,OrphÃ©e ed Euridice,8468,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃ¶nsten Lieder der Flippers,8463,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Konzerte fuer Cembalo Solo Vol. 2,8462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹ÃŒÂ¼Ã’ (CD 09-Â¿Â¹Â¼ÃºÂ°Â¡Ã€Ã‡ ÃƒÃŠÂ»Ã³),8452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Limelite, Luv & Niteclubz",8129,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Time Has Come...\ the best of Ziggy Marley and the Melody Makers,8179,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FranÃ§afrique,8200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EssiÃ©dubÃ£o,8223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,JamaÃ¯que,8239,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les GÃ©nies Du Classique: Lully & Charpentier,8293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃŸ-Edition Vol. 23,8321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassiska mÃ¤sterverk CD1,8335,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GÃ¶tterdÃ¤mmerung CD 2,8369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,English suite No. 1 Â· Tocattas,8370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der fliegende HollÃ¤nder,8374,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassik fÃ¼r Babys,8381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Waltzes Complete,8388,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart / Hoorn concerten,8393,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"GÃ¶tterdÃ¤mmerung, CD1",8400,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Concierto  PresentaciÃ³n,8439,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,W.A. Mozart: Klavierkonzert Nr.24 c-moll KV491 + weiteres,8451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hoirr Ã–ngÃ¶,3877,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Depois De VocÃª...,3867,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nu Skool Breakz 2,34,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Compact Jazz (compilation),1156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazzpolice,1082,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Sampler,1087,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Jazz,1104,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Onztet De Violon Jazz,1105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Cool School of Jazz,1114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Colors of Latin Jazz - A Latin Vibe!,1115,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Jazz Fusion, Volume 1",1132,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Smooth Jazz Piano - CD3,1153,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Most Relaxing Jazz Album in the Universe,1160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best of the 1997 CT Jazz Festival,1077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PozvÃ¡nka Na Jazz,1171,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dizionario Enciclopedico del Jazz,1192,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Moods cd 2,1198,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters 4,1202,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz  & Tzaz (compilation),1206,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz & Bossa,1210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ManhÃ£ de Liberdade,1211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz U.S.A.,1214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters 21,1081,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Euro Jazz 2002,1076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,This Is... Ibiza Summer 2000 (Disc 1),1604,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazilian Byrd,975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz At The Hi-Hat,921,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KWJZ Smooth Jazz Volume 5,940,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazz Collector Edition - Jimmy McGriff,941,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Savoy Jazz Sampler,943,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Baduizm Live,964,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Waltz For Debby,965,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blue Gardenia: The Latin-American Music of Hal Isbitz,968,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz In The House 3 (CD1),970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,le jazz et la java,979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Antonio Vivaldi - The Four Seasons - New Jazz Arrangements,1069,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Piano: Jazz 'Round Midnight,994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zanzibar,995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz:  December 1997,1000,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Soultry,Jazzy & Sexy",1003,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Concord Jazz Heritage Series: Ray Brown,1005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Light Lines - Horizons,1010,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Greats,1035,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Leza Viva,1037,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Piano Christmas,1216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sucessos InesquecÃ­veis de Elis Regina - Vol. 5,1223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Portrait in Jazz,1227,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Et dusin med drÃ¦sinen,1411,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Night Moves In Jazz,1365,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pisnicky Jaroslava Jezka a V+W,1368,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Last Session (Live at Perugia Jazz Festival july, 11th 1987)",1369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmÃ¥t SmÃ¥t,1372,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1925-26,1373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Basse Ã©lectrique - Warner Jazz Collection,1389,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Make Jazz Not War,1396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gympa PÃ¥,1402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã¡ Ã«Ã¡ÃºÃªÃœ Ã´Ã±Ã¡Ã£Ã¯Ã½Ã¤Ã©Ã¡ Ã¬Ã¡Ã²,1420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Dance,1228,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Douce France RÃ©tro - Fernandel,1426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jo Stafford The Great Jazz Artist Series,1440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mein Schutzengel,1452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Von Spitzbuben und anderen Halunken,1465,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Unauthorized Live Vol 1,1483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Unsigned\ Collection,1490,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Berlioz: The Berlioz Experience 8-10,1538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Real Ibiza V CD 2,1559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz Nov 2000,1362,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Project NoÂ°1,1351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lazuli,1349,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La LÃ©gende (Disc 2),1344,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Smooth Jazz (Disc 2 - The Night),1234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Atlantic Jazz,1248,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1943-44,1251,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz After Hours,1252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Essentials Of Jazz,1258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz - Dec 2003,1261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Louisiana CafÃ©,1268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz for lovers,1290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jimmy Scott (Warner jazz),1294,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fantasy Presents - Big Band Jazz,1299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Modern Day Jazz Stories,1305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,International Jazz-Festival Berlin,1308,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Welcome to the Jazz Cafe,1321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Caribbean Jazz Project,1323,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IndÃ©tendances Jazz,1328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1925-26,1339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters,1342,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Gitanes Jazz, Contrebasse",914,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Timeless - Buenos Aires 8 y la Obra de Astor Piazzolla,898,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Maze - Live,894,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PasiÃ³n latina,320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GuitjaZzathon,272,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trekkspilltreff i SÃ¸ristua,273,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzogiorno sulle alpi,281,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crystal Gazer,284,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Az ifjÃºsÃ¡g sÃ³lyommadÃ¡r,288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tisic zpusobu jak zabit lasku,290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uma noite sÃ³ (Disc 2),304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C'est NoÃ«l! C'est NoÃ«l! C'est NoÃ«l!,317,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Aimez-vous les uns les autres ou bien disparaissez,333,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BrÃ¨va E TivÃ n,432,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰ Festa!,341,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantar Ã© preciso,358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§ui-lÃ ,360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ´l i vÃ¤gga,362,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LejsmelÃ¥tar,391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ­ctor Herdia,402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chez Madeleine,410,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,lieder zum fÃ¼rchten,420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Um Barquinho e Um ViolÃ£o - Vol.1 Disco 2,270,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃ¦nt goddag,266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzica & Rinascita,254,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmaragdvÃ¡ros,251,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beinah (GefÃ¼hlsecht und Lebensfroh),85,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Verhaal zonder woorden,86,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ¶dselfest,88,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Canzoni brindisine,120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PopulÃ¤re Musik aus Griechenland,128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Leguizamon-Castilla por...,133,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MinnesmÃ¤rken,134,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Glasba zdruzila nas je,168,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Om hundrede Ã¥r er alting glemt,169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tzlil Mechuvan,174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Over De Grenzen,192,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Breeze,194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¼hstÃ¼ck in Budapest,199,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Euro Darkness 1 Ã£â‚¬Å“The Early Days OF SebÃ£â‚¬Å“,210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I muaÃŸ dir no sag'n das i  di gern hab,213,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azul celeste,216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,^MADE IN GREECE,244,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Y Tenerte Otra Vez,430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Art of Alghoza from Sind,444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Late Night Jazz,892,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sayas y huayÃ±os,757,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,och 14 andra sÃ¥nger om bÃ¥tar och vatten,680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NÃºmeros Antiguos,726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Corazon de Arpa,728,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weihnachtskonzert der Fischer ChÃ¶re,731,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Prohibido dÃ¡ el cante,734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 kossa nÃ³tt,744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La dÃ©sabusion,754,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ©javarÃ¡zs,756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Razorblade Romance,787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"God Morgen, SÃ¸ster",451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Improvisations pour FlÃ»te de pan et Orgue (1/2),802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HeimatklÃ¤nge 2001 (Live),807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dance Classics - Waltz,815,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zimy zal - piosenki z Kabaretu Starszych Panow 1,838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazzmatazz,855,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Acid Jazz,870,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazz Beatles Colection,874,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CafÃ© Copacabana vol.2  cd2,889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ¡ & Guarabyra,669,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Stolpern dÃ¤rfst ....,650,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃ­a De La Navidad Canaria,646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ochsenfurter Musikantenherz,637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sorge-Ecke-MÃ¼hsam,469,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpielrÃ¤ume - JubilÃ¤ums CD der Wirkstatt e.V.,480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vem esta Ã© a hora,482,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰xitos de MarÃ­a Dolores Pradera,484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die weiÃŸblaue Hitparade CD 2/2,493,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schuine CafÃ© Hits,496,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃ¤sta Dansband 8,499,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃ¤sta Dansband 15,505,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Segredo Ã© Louvar,511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Er rouÃ© Stevan,529,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SchwyzerÃ¶rgeli,539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã  l'Olympia 1992 CD2,558,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,New World Flamenco Jazz,570,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Eens zal alles overgaan,578,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Das Zigeunerlager zieht in den Himmel - Original Soundtrack,582,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuando el amor se daÃ±a,587,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤nner fÃ¶r livet,597,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jak Hurvinek potkal Mozarta,1599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mitt Ã¶ga - samlade krÃ¶nikor och andra bekÃ¤nnelser,1621,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\hon\,3863,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpektColÃ¶r,3107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chill Out from Ibiza Playa Salinas CD 2,3043,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Balthazar [CD 3 -- AudioBook],3056,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ernst Mosch in Leipzig,3067,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les AnnÃ©es YÃ©yÃ© -Vol1 - CD1,3068,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃªves Multicolores,3072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,30 phonÃ©mes en 30 chansons (GS-CP),3076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les annÃ©es YÃ©yÃ© - Vol1 - CD2,3078,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Turbo compressor noz injection,3091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³ No Sapatinho,3108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dansez,3013,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,5 - Hotzenplotz ist wieder da,3122,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Liebe die alles trÃ¤gt,3136,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃ¡s Noches De Blanco SatÃ©n,3165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ett gott skratt pÃ¥ BjÃ¶rkgÃ¥rden,3176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amazing Love,3200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kazaa,3219,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HANGAR 21 by \Winterthur\,3228,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Muzyka Rozna i Rozniasta,3234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Soundz of the Asian Underground,3033,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Yes-IÂ´m Limited Vol. III (disk 2),3004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuba Es MÃºsica - Vol. 1,1625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Das groÃŸe Bibel-HÃ¶rbuch,2868,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TraumtÃ¤nze,2767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Frozen,2769,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Antifaz,2803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LibertÃ  obbligatoria (Cd 2),2814,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beat of the 80Â´s - CD 2,2818,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tanz auf dem Drahtseil,2826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,freezone 4 - Dangerous Lullabies cd2,2842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Provincija Uzvraca Udarac,2852,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Al CompÃ¡s De Un Tango,2882,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Voyage IntÃ©rieur,2952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Un Canto Al Corazon,2885,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich halt' zu dir,2909,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Herz in Sicht,2916,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vadaszat I.,2920,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Albero Pazzo,2925,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YÃ¶n tuuli vain,2926,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jarocho de Corazon,2933,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,28 hammergo'e bÃ¸rnesange (cd2),2942,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ambi-Ant Beatz - Beatz Disc,3237,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,European Future Soundz (Excursions In Trance),3244,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Power Collection - The Crazy Fifties - The Roaring Sixties,3254,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Von Bismarck zu Hitler CD 1,3728,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FamÃ­lia Lima,3637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElÃ¤mÃ¤ Vie,3665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Luz das NaÃ§Ãµes,3677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pazzo Compilation,3685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Star Gazing,3700,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ®Ã«Ã¼Ã¶Ã  Ã‚Ã°Ã¥Ã¬Ã¥Ã­Ã¨. Ã—Ã Ã±Ã²Ã¼ 2,3709,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La FÃªte Ã  Boris,3718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Subliminal Live at Pacha Ibiza CD1,3724,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Freezone 1: the phenomenology of ambient - cd1,3740,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ahora Comienzo A Vivir,3267,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤gen till Jerusalem,3742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KarÃ¡csony ZÃ¡mbÃ³ Jimmyvel,3773,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Buffet des anciens Ã©lÃ¨ves,3798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Par curiositÃ©,3800,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Probier's mal mit GemÃ¼tlichkeit,3807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sucessos de Barzinho - Volume I,3833,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra MediterrÃ¡nea Vol 1,3835,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pacha Ibiza 30 Aniversario - cd3,3838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Volver A Empezar,3626,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les PlusBeaux Chants de NoÃ«l,3617,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ghislaine Cantini Interpreta Pe Zezinho,3612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Petra en Alabanza,3611,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zelta Izlase,3280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pockam si na zazrak,3297,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lederzwang,3304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pop EspaÃ±ol 88 Vol.1,3305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Es gibt einen Ort zum Beten,3358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Diether Krebs und ungebetene GÃ¤ste,3378,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Africanize,3385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Xtravaganza Mix,3388,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pura PiÃ±ita Colombiana,3399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le MÃ©crÃ©ant,3406,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LaÃŸt uns froh und munter sein - CD2,3423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sur les dÃ©combres,3430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Plzenske povesti, pisne a jine plisne",3444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElfonÃ­a,3458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GRW Freestyle Frenzy Vol. 4,3473,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nossas CanÃ§Ãµes 2,3517,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The a-z of Alma Cogan disc 1,3575,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Musica do SÃ©culo  4,2748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Waltzes,2736,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃ¶nsten Lieder Zur Weihnacht-CD1,2723,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Balades i canÃ§ons,1977,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SoirÃ©e Cocktail,1861,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SkÃ¦rmtrolden Hugo,1862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Playback-CD zum Songbook,1872,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lillebror och Karlsson pÃ¥ taket,1880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy For You,1894,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der Schatz im Silbensee,1901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ­,1905,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"FLOATING ON... - vibes from chilled jazz, soulful tone keep you warm",1937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KinderchÃ¶re singen die schÃ¶nsten Weihnachtlieder,1982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor de LembranÃ§as,2100,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KevÃ¤t herÃ¤si tÃ¤Ã¤llÃ¤,1994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Occupational Hazard,2001,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Emilio JosÃ© Lorenzo SantamarÃ­a y otros inimitables de los 70s,2013,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los Petersellers contra la amenaza del Dr. Thedio,2017,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HipHop fÃ¼r Angestellte,2037,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Greatest,2050,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schlager Ã  la carte,2054,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weerzien In Panama - Disc 2,2080,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Naveky zustane cas,1838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy,1826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ritter Rost und Prinz Protz,1822,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jos Vain TietÃ¤isit,1805,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Des isch bÃ¤rig,1629,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"A bisserl GlÃ¼ck, a bisserl Freud",1634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ven acÃ¡,1661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CrÃ¨vecoeur,1680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mit ganzem Herzen Vol. 2,1709,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LÃ¶cher (Die Geheimnisse von Green Lake),1729,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blechreiz,1742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzica la Tarantula,1744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CD audio personnalisÃ©,1759,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,12\ 80's Dance Groove Classics (CD 2),1762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Freezone 2: Variations On A Chill - CD 1,1767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KindertrÃ¤umeland - Ich bin der kleine Zappelmann,1768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,the ibizarre ambient collection CD 1,1769,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Morot, Raka vÃ¤gen till dig",1787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Poker De Corazones 2,1789,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TÃº CambiarÃ¡s,1796,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Mudlark\,1798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã–demarkens Son,2084,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lorenzo Perosi: Missa Pontificalis - Missa Secunda Pontificalis,2105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Spiewaj z Kinga,2713,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ¶rt Ihr Alle Glocken LÃ¤uten,2546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haykirsam DÃ¼nyaya,2420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃµhja vahemÃ¤ng,2441,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ©lection Talents,2483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzanine Del Alcazar - Dinner Time Vol.3,2494,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blitzkrieg on Wembley - LIVE Vol2,2512,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bonzai Trance Progressive (Disc 2),2526,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BÃ¸nder i solnedgang,2538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Auf Den Mond SchieÃŸen (Hinterherfliegen),2543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Risainen elÃ¤mÃ¤ - Juice leskisen lauluja a cappella,2570,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,After Five Jazz - Expressions,2113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fjja El A Szl,2576,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Grenzenlos II,2577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amigo Ã‰ Pra Essas Coisas,2580,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sommer Schlager TrÃ¤ume,2584,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gira Nacional Del Amor Venezolano,2599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szklanka wody,2609,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bag de blÃ¥ persienner,2618,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AlgÃ©rie,2655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C'era un ragazzo,2412,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantos y Encantos OaxaqueÃ±os,2395,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ohne ZÃ¤rtlichkeit geht gar nix,2387,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰xitos Vol. 2,2376,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ca va Ã§a va,2123,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Paul Oakenfold - Ibiza CD1,2144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Summerbreeze,2149,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mega FÃªte - cd 4,2160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Melitzer Oneg Shabbos,2200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SitÃ¤ Saa MitÃ¤ Tilaa,2210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NiÃ±a piensa en ti,2231,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YeloÂ­molo,2234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃ­a Musical,2245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VocÃª nÃ£o pode desistir,2255,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,zu neuen ufern,2266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DJ Hype & True Playaz Presents Real Vibes,2271,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ConexÃµes,2274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King of Waitz,2305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"1992-01-30 - Oakland Coliseum, Oakland, CA - \Mirrors\ - Disc 1",2309,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The a-z of Alma Cogan disc 3,2339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Desensitized,2353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blazing Away,9685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
