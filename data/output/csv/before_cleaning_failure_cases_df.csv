schema_context,column,check,check_number,failure_case,index,check_source_code
Column,artist,not_nullable,,,9030,
Column,genre,not_nullable,,,8088,
Column,genre,not_nullable,,,8135,
Column,genre,not_nullable,,,8134,
Column,genre,not_nullable,,,8127,
Column,genre,not_nullable,,,8123,
Column,genre,not_nullable,,,8121,
Column,genre,not_nullable,,,8120,
Column,genre,not_nullable,,,8117,
Column,genre,not_nullable,,,8114,
Column,genre,not_nullable,,,8098,
Column,genre,not_nullable,,,8097,
Column,genre,not_nullable,,,8095,
Column,genre,not_nullable,,,8085,
Column,genre,not_nullable,,,8047,
Column,genre,not_nullable,,,8082,
Column,genre,not_nullable,,,8080,
Column,genre,not_nullable,,,8077,
Column,genre,not_nullable,,,8076,
Column,genre,not_nullable,,,8071,
Column,genre,not_nullable,,,8061,
Column,genre,not_nullable,,,8059,
Column,genre,not_nullable,,,8058,
Column,genre,not_nullable,,,8055,
Column,genre,not_nullable,,,8053,
Column,genre,not_nullable,,,8051,
Column,genre,not_nullable,,,8137,
Column,genre,not_nullable,,,8138,
Column,genre,not_nullable,,,8143,
Column,genre,not_nullable,,,8146,
Column,genre,not_nullable,,,8200,
Column,genre,not_nullable,,,8198,
Column,genre,not_nullable,,,8197,
Column,genre,not_nullable,,,8196,
Column,genre,not_nullable,,,8195,
Column,genre,not_nullable,,,8191,
Column,genre,not_nullable,,,8189,
Column,genre,not_nullable,,,8187,
Column,genre,not_nullable,,,8185,
Column,genre,not_nullable,,,8184,
Column,genre,not_nullable,,,8183,
Column,genre,not_nullable,,,8182,
Column,genre,not_nullable,,,8179,
Column,genre,not_nullable,,,8170,
Column,genre,not_nullable,,,8168,
Column,genre,not_nullable,,,8163,
Column,genre,not_nullable,,,8160,
Column,genre,not_nullable,,,8158,
Column,genre,not_nullable,,,8152,
Column,genre,not_nullable,,,8151,
Column,genre,not_nullable,,,8150,
Column,genre,not_nullable,,,8149,
Column,genre,not_nullable,,,8148,
Column,genre,not_nullable,,,8049,
Column,genre,not_nullable,,,8037,
Column,genre,not_nullable,,,8505,
Column,genre,not_nullable,,,7926,
Column,genre,not_nullable,,,7948,
Column,genre,not_nullable,,,7943,
Column,genre,not_nullable,,,7942,
Column,genre,not_nullable,,,7940,
Column,genre,not_nullable,,,7938,
Column,genre,not_nullable,,,7934,
Column,genre,not_nullable,,,7933,
Column,genre,not_nullable,,,7931,
Column,genre,not_nullable,,,7930,
Column,genre,not_nullable,,,7929,
Column,genre,not_nullable,,,7928,
Column,genre,not_nullable,,,7925,
Column,genre,not_nullable,,,8034,
Column,genre,not_nullable,,,7924,
Column,genre,not_nullable,,,7917,
Column,genre,not_nullable,,,7916,
Column,genre,not_nullable,,,7913,
Column,genre,not_nullable,,,7910,
Column,genre,not_nullable,,,7908,
Column,genre,not_nullable,,,7906,
Column,genre,not_nullable,,,7900,
Column,genre,not_nullable,,,7896,
Column,genre,not_nullable,,,7895,
Column,genre,not_nullable,,,7889,
Column,genre,not_nullable,,,7949,
Column,genre,not_nullable,,,7953,
Column,genre,not_nullable,,,7956,
Column,genre,not_nullable,,,7960,
Column,genre,not_nullable,,,8033,
Column,genre,not_nullable,,,8032,
Column,genre,not_nullable,,,8027,
Column,genre,not_nullable,,,8016,
Column,genre,not_nullable,,,8015,
Column,genre,not_nullable,,,8014,
Column,genre,not_nullable,,,8013,
Column,genre,not_nullable,,,8010,
Column,genre,not_nullable,,,8004,
Column,genre,not_nullable,,,8000,
Column,genre,not_nullable,,,7996,
Column,genre,not_nullable,,,7993,
Column,genre,not_nullable,,,7992,
Column,genre,not_nullable,,,7989,
Column,genre,not_nullable,,,7987,
Column,genre,not_nullable,,,7984,
Column,genre,not_nullable,,,7982,
Column,genre,not_nullable,,,7979,
Column,genre,not_nullable,,,7977,
Column,genre,not_nullable,,,7976,
Column,genre,not_nullable,,,7974,
Column,genre,not_nullable,,,7970,
Column,genre,not_nullable,,,7964,
Column,genre,not_nullable,,,8203,
Column,genre,not_nullable,,,8207,
Column,genre,not_nullable,,,8208,
Column,genre,not_nullable,,,8392,
Column,genre,not_nullable,,,8430,
Column,genre,not_nullable,,,8429,
Column,genre,not_nullable,,,8428,
Column,genre,not_nullable,,,8421,
Column,genre,not_nullable,,,8416,
Column,genre,not_nullable,,,8412,
Column,genre,not_nullable,,,8410,
Column,genre,not_nullable,,,8406,
Column,genre,not_nullable,,,8401,
Column,genre,not_nullable,,,8397,
Column,genre,not_nullable,,,8393,
Column,genre,not_nullable,,,8386,
Column,genre,not_nullable,,,8214,
Column,genre,not_nullable,,,8384,
Column,genre,not_nullable,,,8380,
Column,genre,not_nullable,,,8379,
Column,genre,not_nullable,,,8378,
Column,genre,not_nullable,,,8377,
Column,genre,not_nullable,,,8375,
Column,genre,not_nullable,,,8373,
Column,genre,not_nullable,,,8368,
Column,genre,not_nullable,,,8367,
Column,genre,not_nullable,,,8364,
Column,genre,not_nullable,,,8363,
Column,genre,not_nullable,,,8433,
Column,genre,not_nullable,,,8434,
Column,genre,not_nullable,,,8438,
Column,genre,not_nullable,,,8439,
Column,genre,not_nullable,,,8502,
Column,genre,not_nullable,,,8501,
Column,genre,not_nullable,,,8491,
Column,genre,not_nullable,,,8490,
Column,genre,not_nullable,,,8487,
Column,genre,not_nullable,,,8486,
Column,genre,not_nullable,,,8481,
Column,genre,not_nullable,,,8480,
Column,genre,not_nullable,,,8477,
Column,genre,not_nullable,,,8475,
Column,genre,not_nullable,,,8474,
Column,genre,not_nullable,,,8473,
Column,genre,not_nullable,,,8471,
Column,genre,not_nullable,,,8466,
Column,genre,not_nullable,,,8465,
Column,genre,not_nullable,,,8464,
Column,genre,not_nullable,,,8462,
Column,genre,not_nullable,,,8461,
Column,genre,not_nullable,,,8456,
Column,genre,not_nullable,,,8455,
Column,genre,not_nullable,,,8454,
Column,genre,not_nullable,,,8451,
Column,genre,not_nullable,,,8450,
Column,genre,not_nullable,,,8361,
Column,genre,not_nullable,,,8354,
Column,genre,not_nullable,,,8349,
Column,genre,not_nullable,,,8285,
Column,genre,not_nullable,,,8281,
Column,genre,not_nullable,,,8280,
Column,genre,not_nullable,,,8277,
Column,genre,not_nullable,,,8276,
Column,genre,not_nullable,,,8267,
Column,genre,not_nullable,,,8264,
Column,genre,not_nullable,,,8263,
Column,genre,not_nullable,,,8262,
Column,genre,not_nullable,,,8252,
Column,genre,not_nullable,,,8251,
Column,genre,not_nullable,,,8245,
Column,genre,not_nullable,,,8238,
Column,genre,not_nullable,,,8236,
Column,genre,not_nullable,,,8235,
Column,genre,not_nullable,,,8233,
Column,genre,not_nullable,,,8231,
Column,genre,not_nullable,,,8228,
Column,genre,not_nullable,,,8224,
Column,genre,not_nullable,,,8222,
Column,genre,not_nullable,,,8220,
Column,genre,not_nullable,,,8219,
Column,genre,not_nullable,,,8216,
Column,genre,not_nullable,,,8215,
Column,genre,not_nullable,,,8282,
Column,genre,not_nullable,,,8288,
Column,genre,not_nullable,,,8346,
Column,genre,not_nullable,,,8290,
Column,genre,not_nullable,,,8343,
Column,genre,not_nullable,,,8342,
Column,genre,not_nullable,,,8337,
Column,genre,not_nullable,,,8333,
Column,genre,not_nullable,,,8332,
Column,genre,not_nullable,,,8331,
Column,genre,not_nullable,,,8328,
Column,genre,not_nullable,,,8327,
Column,genre,not_nullable,,,8326,
Column,genre,not_nullable,,,8325,
Column,genre,not_nullable,,,8319,
Column,genre,not_nullable,,,8318,
Column,genre,not_nullable,,,8315,
Column,genre,not_nullable,,,8312,
Column,genre,not_nullable,,,8308,
Column,genre,not_nullable,,,8305,
Column,genre,not_nullable,,,8304,
Column,genre,not_nullable,,,8302,
Column,genre,not_nullable,,,8301,
Column,genre,not_nullable,,,8300,
Column,genre,not_nullable,,,8293,
Column,genre,not_nullable,,,8292,
Column,genre,not_nullable,,,8291,
Column,genre,not_nullable,,,7886,
Column,genre,not_nullable,,,7885,
Column,genre,not_nullable,,,7880,
Column,genre,not_nullable,,,7465,
Column,genre,not_nullable,,,7491,
Column,genre,not_nullable,,,7490,
Column,genre,not_nullable,,,7483,
Column,genre,not_nullable,,,7479,
Column,genre,not_nullable,,,7477,
Column,genre,not_nullable,,,7476,
Column,genre,not_nullable,,,7475,
Column,genre,not_nullable,,,7474,
Column,genre,not_nullable,,,7470,
Column,genre,not_nullable,,,7469,
Column,genre,not_nullable,,,7467,
Column,genre,not_nullable,,,7461,
Column,genre,not_nullable,,,7581,
Column,genre,not_nullable,,,7458,
Column,genre,not_nullable,,,7456,
Column,genre,not_nullable,,,7453,
Column,genre,not_nullable,,,7447,
Column,genre,not_nullable,,,7443,
Column,genre,not_nullable,,,7439,
Column,genre,not_nullable,,,7437,
Column,genre,not_nullable,,,7435,
Column,genre,not_nullable,,,7434,
Column,genre,not_nullable,,,7433,
Column,genre,not_nullable,,,7429,
Column,genre,not_nullable,,,7492,
Column,genre,not_nullable,,,7494,
Column,genre,not_nullable,,,7495,
Column,genre,not_nullable,,,7506,
Column,genre,not_nullable,,,7576,
Column,genre,not_nullable,,,7567,
Column,genre,not_nullable,,,7565,
Column,genre,not_nullable,,,7562,
Column,genre,not_nullable,,,7560,
Column,genre,not_nullable,,,7559,
Column,genre,not_nullable,,,7558,
Column,genre,not_nullable,,,7557,
Column,genre,not_nullable,,,7555,
Column,genre,not_nullable,,,7551,
Column,genre,not_nullable,,,7550,
Column,genre,not_nullable,,,7548,
Column,genre,not_nullable,,,7547,
Column,genre,not_nullable,,,7543,
Column,genre,not_nullable,,,7539,
Column,genre,not_nullable,,,7535,
Column,genre,not_nullable,,,7534,
Column,genre,not_nullable,,,7533,
Column,genre,not_nullable,,,7531,
Column,genre,not_nullable,,,7530,
Column,genre,not_nullable,,,7523,
Column,genre,not_nullable,,,7519,
Column,genre,not_nullable,,,7516,
Column,genre,not_nullable,,,7421,
Column,genre,not_nullable,,,7419,
Column,genre,not_nullable,,,7410,
Column,genre,not_nullable,,,7341,
Column,genre,not_nullable,,,7339,
Column,genre,not_nullable,,,7335,
Column,genre,not_nullable,,,7334,
Column,genre,not_nullable,,,7330,
Column,genre,not_nullable,,,7324,
Column,genre,not_nullable,,,7322,
Column,genre,not_nullable,,,7320,
Column,genre,not_nullable,,,7316,
Column,genre,not_nullable,,,7315,
Column,genre,not_nullable,,,7314,
Column,genre,not_nullable,,,7313,
Column,genre,not_nullable,,,7312,
Column,genre,not_nullable,,,7308,
Column,genre,not_nullable,,,7307,
Column,genre,not_nullable,,,7305,
Column,genre,not_nullable,,,7304,
Column,genre,not_nullable,,,7302,
Column,genre,not_nullable,,,7301,
Column,genre,not_nullable,,,7299,
Column,genre,not_nullable,,,7297,
Column,genre,not_nullable,,,7294,
Column,genre,not_nullable,,,7292,
Column,genre,not_nullable,,,7290,
Column,genre,not_nullable,,,7340,
Column,genre,not_nullable,,,7342,
Column,genre,not_nullable,,,7406,
Column,genre,not_nullable,,,7346,
Column,genre,not_nullable,,,7405,
Column,genre,not_nullable,,,7404,
Column,genre,not_nullable,,,7402,
Column,genre,not_nullable,,,7401,
Column,genre,not_nullable,,,7400,
Column,genre,not_nullable,,,7397,
Column,genre,not_nullable,,,7394,
Column,genre,not_nullable,,,7392,
Column,genre,not_nullable,,,7391,
Column,genre,not_nullable,,,7382,
Column,genre,not_nullable,,,7381,
Column,genre,not_nullable,,,7379,
Column,genre,not_nullable,,,7377,
Column,genre,not_nullable,,,7376,
Column,genre,not_nullable,,,7371,
Column,genre,not_nullable,,,7367,
Column,genre,not_nullable,,,7361,
Column,genre,not_nullable,,,7359,
Column,genre,not_nullable,,,7357,
Column,genre,not_nullable,,,7353,
Column,genre,not_nullable,,,7351,
Column,genre,not_nullable,,,7350,
Column,genre,not_nullable,,,7348,
Column,genre,not_nullable,,,7579,
Column,genre,not_nullable,,,7583,
Column,genre,not_nullable,,,7879,
Column,genre,not_nullable,,,7770,
Column,genre,not_nullable,,,7805,
Column,genre,not_nullable,,,7796,
Column,genre,not_nullable,,,7794,
Column,genre,not_nullable,,,7791,
Column,genre,not_nullable,,,7789,
Column,genre,not_nullable,,,7788,
Column,genre,not_nullable,,,7787,
Column,genre,not_nullable,,,7781,
Column,genre,not_nullable,,,7779,
Column,genre,not_nullable,,,7776,
Column,genre,not_nullable,,,7775,
Column,genre,not_nullable,,,7763,
Column,genre,not_nullable,,,7584,
Column,genre,not_nullable,,,7762,
Column,genre,not_nullable,,,7759,
Column,genre,not_nullable,,,7758,
Column,genre,not_nullable,,,7757,
Column,genre,not_nullable,,,7755,
Column,genre,not_nullable,,,7752,
Column,genre,not_nullable,,,7751,
Column,genre,not_nullable,,,7748,
Column,genre,not_nullable,,,7742,
Column,genre,not_nullable,,,7736,
Column,genre,not_nullable,,,7733,
Column,genre,not_nullable,,,7806,
Column,genre,not_nullable,,,7807,
Column,genre,not_nullable,,,7809,
Column,genre,not_nullable,,,7811,
Column,genre,not_nullable,,,7877,
Column,genre,not_nullable,,,7872,
Column,genre,not_nullable,,,7870,
Column,genre,not_nullable,,,7867,
Column,genre,not_nullable,,,7865,
Column,genre,not_nullable,,,7863,
Column,genre,not_nullable,,,7862,
Column,genre,not_nullable,,,7857,
Column,genre,not_nullable,,,7854,
Column,genre,not_nullable,,,7851,
Column,genre,not_nullable,,,7843,
Column,genre,not_nullable,,,7835,
Column,genre,not_nullable,,,7829,
Column,genre,not_nullable,,,7828,
Column,genre,not_nullable,,,7826,
Column,genre,not_nullable,,,7825,
Column,genre,not_nullable,,,7823,
Column,genre,not_nullable,,,7820,
Column,genre,not_nullable,,,7819,
Column,genre,not_nullable,,,7815,
Column,genre,not_nullable,,,7814,
Column,genre,not_nullable,,,7813,
Column,genre,not_nullable,,,7812,
Column,genre,not_nullable,,,7732,
Column,genre,not_nullable,,,7731,
Column,genre,not_nullable,,,7729,
Column,genre,not_nullable,,,7654,
Column,genre,not_nullable,,,7650,
Column,genre,not_nullable,,,7649,
Column,genre,not_nullable,,,7647,
Column,genre,not_nullable,,,7646,
Column,genre,not_nullable,,,7642,
Column,genre,not_nullable,,,7641,
Column,genre,not_nullable,,,7639,
Column,genre,not_nullable,,,7638,
Column,genre,not_nullable,,,7636,
Column,genre,not_nullable,,,7634,
Column,genre,not_nullable,,,7626,
Column,genre,not_nullable,,,7625,
Column,genre,not_nullable,,,7620,
Column,genre,not_nullable,,,7619,
Column,genre,not_nullable,,,7618,
Column,genre,not_nullable,,,7615,
Column,genre,not_nullable,,,7610,
Column,genre,not_nullable,,,7608,
Column,genre,not_nullable,,,7602,
Column,genre,not_nullable,,,7596,
Column,genre,not_nullable,,,7595,
Column,genre,not_nullable,,,7592,
Column,genre,not_nullable,,,7586,
Column,genre,not_nullable,,,7652,
Column,genre,not_nullable,,,7657,
Column,genre,not_nullable,,,7728,
Column,genre,not_nullable,,,7661,
Column,genre,not_nullable,,,7727,
Column,genre,not_nullable,,,7723,
Column,genre,not_nullable,,,7722,
Column,genre,not_nullable,,,7721,
Column,genre,not_nullable,,,7717,
Column,genre,not_nullable,,,7712,
Column,genre,not_nullable,,,7710,
Column,genre,not_nullable,,,7705,
Column,genre,not_nullable,,,7703,
Column,genre,not_nullable,,,7697,
Column,genre,not_nullable,,,7696,
Column,genre,not_nullable,,,7694,
Column,genre,not_nullable,,,7693,
Column,genre,not_nullable,,,7687,
Column,genre,not_nullable,,,7681,
Column,genre,not_nullable,,,7676,
Column,genre,not_nullable,,,7675,
Column,genre,not_nullable,,,7670,
Column,genre,not_nullable,,,7669,
Column,genre,not_nullable,,,7668,
Column,genre,not_nullable,,,7666,
Column,genre,not_nullable,,,7665,
Column,genre,not_nullable,,,7662,
Column,genre,not_nullable,,,8504,
Column,genre,not_nullable,,,8512,
Column,title,Check for *possibly* invalid symbols.,0,wÃ¤ge dir,80,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,genre,not_nullable,,,9304,
Column,genre,not_nullable,,,9333,
Column,genre,not_nullable,,,9331,
Column,genre,not_nullable,,,9329,
Column,genre,not_nullable,,,9325,
Column,genre,not_nullable,,,9324,
Column,genre,not_nullable,,,9321,
Column,genre,not_nullable,,,9319,
Column,genre,not_nullable,,,9318,
Column,genre,not_nullable,,,9315,
Column,genre,not_nullable,,,9311,
Column,genre,not_nullable,,,9306,
Column,genre,not_nullable,,,9299,
Column,genre,not_nullable,,,9262,
Column,genre,not_nullable,,,9297,
Column,genre,not_nullable,,,9294,
Column,genre,not_nullable,,,9293,
Column,genre,not_nullable,,,9291,
Column,genre,not_nullable,,,9288,
Column,genre,not_nullable,,,9285,
Column,genre,not_nullable,,,9281,
Column,genre,not_nullable,,,9280,
Column,genre,not_nullable,,,9278,
Column,genre,not_nullable,,,9272,
Column,genre,not_nullable,,,9271,
Column,genre,not_nullable,,,9336,
Column,genre,not_nullable,,,9344,
Column,genre,not_nullable,,,9362,
Column,genre,not_nullable,,,9364,
Column,genre,not_nullable,,,9442,
Column,genre,not_nullable,,,9440,
Column,genre,not_nullable,,,9439,
Column,genre,not_nullable,,,9435,
Column,genre,not_nullable,,,9430,
Column,genre,not_nullable,,,9429,
Column,genre,not_nullable,,,9418,
Column,genre,not_nullable,,,9407,
Column,genre,not_nullable,,,9403,
Column,genre,not_nullable,,,9398,
Column,genre,not_nullable,,,9397,
Column,genre,not_nullable,,,9396,
Column,genre,not_nullable,,,9394,
Column,genre,not_nullable,,,9391,
Column,genre,not_nullable,,,9386,
Column,genre,not_nullable,,,9385,
Column,genre,not_nullable,,,9384,
Column,genre,not_nullable,,,9380,
Column,genre,not_nullable,,,9377,
Column,genre,not_nullable,,,9373,
Column,genre,not_nullable,,,9372,
Column,genre,not_nullable,,,9370,
Column,genre,not_nullable,,,9366,
Column,genre,not_nullable,,,9266,
Column,genre,not_nullable,,,9260,
Column,genre,not_nullable,,,8515,
Column,genre,not_nullable,,,9132,
Column,genre,not_nullable,,,9162,
Column,genre,not_nullable,,,9157,
Column,genre,not_nullable,,,9155,
Column,genre,not_nullable,,,9154,
Column,genre,not_nullable,,,9153,
Column,genre,not_nullable,,,9152,
Column,genre,not_nullable,,,9149,
Column,genre,not_nullable,,,9142,
Column,genre,not_nullable,,,9140,
Column,genre,not_nullable,,,9136,
Column,genre,not_nullable,,,9134,
Column,genre,not_nullable,,,9129,
Column,genre,not_nullable,,,9259,
Column,genre,not_nullable,,,9124,
Column,genre,not_nullable,,,9123,
Column,genre,not_nullable,,,9122,
Column,genre,not_nullable,,,9120,
Column,genre,not_nullable,,,9116,
Column,genre,not_nullable,,,9115,
Column,genre,not_nullable,,,9114,
Column,genre,not_nullable,,,9111,
Column,genre,not_nullable,,,9110,
Column,genre,not_nullable,,,9109,
Column,genre,not_nullable,,,9107,
Column,genre,not_nullable,,,9164,
Column,genre,not_nullable,,,9166,
Column,genre,not_nullable,,,9177,
Column,genre,not_nullable,,,9179,
Column,genre,not_nullable,,,9256,
Column,genre,not_nullable,,,9255,
Column,genre,not_nullable,,,9244,
Column,genre,not_nullable,,,9243,
Column,genre,not_nullable,,,9240,
Column,genre,not_nullable,,,9236,
Column,genre,not_nullable,,,9233,
Column,genre,not_nullable,,,9226,
Column,genre,not_nullable,,,9224,
Column,genre,not_nullable,,,9223,
Column,genre,not_nullable,,,9220,
Column,genre,not_nullable,,,9219,
Column,genre,not_nullable,,,9218,
Column,genre,not_nullable,,,9217,
Column,genre,not_nullable,,,9214,
Column,genre,not_nullable,,,9209,
Column,genre,not_nullable,,,9205,
Column,genre,not_nullable,,,9200,
Column,genre,not_nullable,,,9199,
Column,genre,not_nullable,,,9196,
Column,genre,not_nullable,,,9191,
Column,genre,not_nullable,,,9186,
Column,genre,not_nullable,,,9182,
Column,genre,not_nullable,,,9450,
Column,genre,not_nullable,,,9451,
Column,genre,not_nullable,,,9452,
Column,genre,not_nullable,,,9707,
Column,genre,not_nullable,,,9740,
Column,genre,not_nullable,,,9737,
Column,genre,not_nullable,,,9735,
Column,genre,not_nullable,,,9734,
Column,genre,not_nullable,,,9730,
Column,genre,not_nullable,,,9728,
Column,genre,not_nullable,,,9719,
Column,genre,not_nullable,,,9718,
Column,genre,not_nullable,,,9716,
Column,genre,not_nullable,,,9712,
Column,genre,not_nullable,,,9708,
Column,genre,not_nullable,,,9705,
Column,genre,not_nullable,,,9458,
Column,genre,not_nullable,,,9703,
Column,genre,not_nullable,,,9698,
Column,genre,not_nullable,,,9687,
Column,genre,not_nullable,,,9686,
Column,genre,not_nullable,,,9685,
Column,genre,not_nullable,,,9679,
Column,genre,not_nullable,,,9676,
Column,genre,not_nullable,,,9670,
Column,genre,not_nullable,,,9667,
Column,genre,not_nullable,,,9666,
Column,genre,not_nullable,,,9664,
Column,genre,not_nullable,,,9741,
Column,genre,not_nullable,,,9742,
Column,genre,not_nullable,,,9750,
Column,genre,not_nullable,,,9756,
Column,title,Check for *possibly* invalid symbols.,0,Franz Lambert spielt beliebte Evergreens,71,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ABSOLUTÃÃ›Ã‰ Ã•ÃˆÃ’ 2,68,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â»ÃµÂºÂ®Â±Ã¢ÂµÂµÂ¸Â¦ Ã€Â§Ã‡Ã‘ Â°Ã¦Ã€Â½Â¾Ã‡ 6,65,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SUPER LIVE Ã¦â€”Â¥Ã¦Å“Â¬Ã¦Â­Â¦Ã©?â€œÃ©Â¤Â¨ Disc 1,54,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¤Ã£Ã¢ Ã°Ã§Ã¹,49,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nu Skool Breakz 2,34,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Gazebo,31,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Disc13 Ã¨Å Â±Ã£?â€“Ã£?â€¹Ã£â€šÅ ,27,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Signatures,25,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃƒÃ ÂºÂ¹ (CD 09),24,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La \Dolce Vita\ Les Tubes Dance Italiens / Les Chansons Dance Italiennes (Disc 1),22,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best of Dingdong Avanzado,20,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CATSÃ£â‚¬â‚¬Ã£â€šÂªÃ£Æ’ÂªÃ£â€šÂ¸Ã£Æ’Å Ã£Æ’Â«Ã¯Â½Â¥Ã£â€šÂ­Ã£Æ’Â£Ã£â€šÂ¹Ã£Æ’Ë†,5,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Æ’Â³Ã£?â€žÃ¥â€¡ÂºÃ£?Â®Ã£?â€¹Ã£?â€˜Ã£â€šâ€°,3,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,not_nullable,,,7705,
Column,title,not_nullable,,,6093,
Column,title,not_nullable,,,5821,
Column,title,not_nullable,,,2901,
Column,title,not_nullable,,,2662,
Column,title,not_nullable,,,1255,
Column,title,not_nullable,,,634,
Column,title,not_nullable,,,589,
Column,genre,Check for invalid genres.,0,------------------ MKD NARODNA ------------------,617,"def check_genre_is_valid(x: Any) -> bool:
    """"""Check for invalid genres.""""""
    try:
        if ""--"" in x:
            return False
    except Exception:
        return False
    else:
        return True
"
Column,genre,not_nullable,,,9661,
Column,genre,not_nullable,,,9659,
Column,genre,not_nullable,,,9658,
Column,genre,not_nullable,,,9546,
Column,genre,not_nullable,,,9538,
Column,genre,not_nullable,,,9536,
Column,genre,not_nullable,,,9531,
Column,genre,not_nullable,,,9528,
Column,genre,not_nullable,,,9522,
Column,genre,not_nullable,,,9521,
Column,genre,not_nullable,,,9515,
Column,genre,not_nullable,,,9509,
Column,genre,not_nullable,,,9503,
Column,genre,not_nullable,,,9501,
Column,genre,not_nullable,,,9497,
Column,genre,not_nullable,,,9496,
Column,genre,not_nullable,,,9495,
Column,genre,not_nullable,,,9489,
Column,genre,not_nullable,,,9487,
Column,genre,not_nullable,,,9480,
Column,genre,not_nullable,,,9478,
Column,genre,not_nullable,,,9472,
Column,genre,not_nullable,,,9471,
Column,genre,not_nullable,,,9463,
Column,genre,not_nullable,,,9462,
Column,genre,not_nullable,,,9461,
Column,genre,not_nullable,,,9459,
Column,genre,not_nullable,,,9540,
Column,genre,not_nullable,,,9549,
Column,genre,not_nullable,,,9657,
Column,genre,not_nullable,,,9551,
Column,genre,not_nullable,,,9655,
Column,genre,not_nullable,,,9642,
Column,genre,not_nullable,,,9640,
Column,genre,not_nullable,,,9637,
Column,genre,not_nullable,,,9621,
Column,genre,not_nullable,,,9614,
Column,genre,not_nullable,,,9611,
Column,genre,not_nullable,,,9607,
Column,genre,not_nullable,,,9601,
Column,genre,not_nullable,,,9599,
Column,genre,not_nullable,,,9598,
Column,genre,not_nullable,,,9593,
Column,genre,not_nullable,,,9585,
Column,genre,not_nullable,,,9584,
Column,genre,not_nullable,,,9578,
Column,genre,not_nullable,,,9576,
Column,genre,not_nullable,,,9575,
Column,genre,not_nullable,,,9574,
Column,genre,not_nullable,,,9563,
Column,genre,not_nullable,,,9562,
Column,genre,not_nullable,,,9560,
Column,genre,not_nullable,,,9556,
Column,genre,not_nullable,,,9554,
Column,genre,not_nullable,,,9105,
Column,genre,not_nullable,,,9103,
Column,genre,not_nullable,,,9101,
Column,genre,not_nullable,,,8694,
Column,genre,not_nullable,,,8721,
Column,genre,not_nullable,,,8720,
Column,genre,not_nullable,,,8719,
Column,genre,not_nullable,,,8718,
Column,genre,not_nullable,,,8714,
Column,genre,not_nullable,,,8712,
Column,genre,not_nullable,,,8710,
Column,genre,not_nullable,,,8708,
Column,genre,not_nullable,,,8705,
Column,genre,not_nullable,,,8704,
Column,genre,not_nullable,,,8699,
Column,genre,not_nullable,,,8693,
Column,genre,not_nullable,,,8816,
Column,genre,not_nullable,,,8688,
Column,genre,not_nullable,,,8686,
Column,genre,not_nullable,,,8682,
Column,genre,not_nullable,,,8680,
Column,genre,not_nullable,,,8677,
Column,genre,not_nullable,,,8676,
Column,genre,not_nullable,,,8674,
Column,genre,not_nullable,,,8669,
Column,genre,not_nullable,,,8666,
Column,genre,not_nullable,,,8665,
Column,genre,not_nullable,,,8664,
Column,genre,not_nullable,,,8723,
Column,genre,not_nullable,,,8724,
Column,genre,not_nullable,,,8727,
Column,genre,not_nullable,,,8733,
Column,genre,not_nullable,,,8811,
Column,genre,not_nullable,,,8805,
Column,genre,not_nullable,,,8800,
Column,genre,not_nullable,,,8797,
Column,genre,not_nullable,,,8788,
Column,genre,not_nullable,,,8787,
Column,genre,not_nullable,,,8785,
Column,genre,not_nullable,,,8783,
Column,genre,not_nullable,,,8778,
Column,genre,not_nullable,,,8777,
Column,genre,not_nullable,,,8776,
Column,genre,not_nullable,,,8769,
Column,genre,not_nullable,,,8766,
Column,genre,not_nullable,,,8765,
Column,genre,not_nullable,,,8761,
Column,genre,not_nullable,,,8760,
Column,genre,not_nullable,,,8754,
Column,genre,not_nullable,,,8753,
Column,genre,not_nullable,,,8750,
Column,genre,not_nullable,,,8747,
Column,genre,not_nullable,,,8743,
Column,genre,not_nullable,,,8738,
Column,genre,not_nullable,,,8735,
Column,genre,not_nullable,,,8662,
Column,genre,not_nullable,,,8660,
Column,genre,not_nullable,,,8656,
Column,genre,not_nullable,,,8589,
Column,genre,not_nullable,,,8585,
Column,genre,not_nullable,,,8582,
Column,genre,not_nullable,,,8577,
Column,genre,not_nullable,,,8571,
Column,genre,not_nullable,,,8570,
Column,genre,not_nullable,,,8567,
Column,genre,not_nullable,,,8563,
Column,genre,not_nullable,,,8561,
Column,genre,not_nullable,,,8558,
Column,genre,not_nullable,,,8556,
Column,genre,not_nullable,,,8555,
Column,genre,not_nullable,,,8554,
Column,genre,not_nullable,,,8552,
Column,genre,not_nullable,,,8551,
Column,genre,not_nullable,,,8546,
Column,genre,not_nullable,,,8542,
Column,genre,not_nullable,,,8538,
Column,genre,not_nullable,,,8537,
Column,genre,not_nullable,,,8536,
Column,genre,not_nullable,,,8533,
Column,genre,not_nullable,,,8521,
Column,genre,not_nullable,,,8518,
Column,genre,not_nullable,,,8516,
Column,genre,not_nullable,,,8587,
Column,genre,not_nullable,,,8593,
Column,genre,not_nullable,,,8652,
Column,genre,not_nullable,,,8594,
Column,genre,not_nullable,,,8650,
Column,genre,not_nullable,,,8647,
Column,genre,not_nullable,,,8640,
Column,genre,not_nullable,,,8637,
Column,genre,not_nullable,,,8636,
Column,genre,not_nullable,,,8632,
Column,genre,not_nullable,,,8631,
Column,genre,not_nullable,,,8630,
Column,genre,not_nullable,,,8629,
Column,genre,not_nullable,,,8627,
Column,genre,not_nullable,,,8625,
Column,genre,not_nullable,,,8621,
Column,genre,not_nullable,,,8620,
Column,genre,not_nullable,,,8619,
Column,genre,not_nullable,,,8618,
Column,genre,not_nullable,,,8617,
Column,genre,not_nullable,,,8615,
Column,genre,not_nullable,,,8614,
Column,genre,not_nullable,,,8611,
Column,genre,not_nullable,,,8610,
Column,genre,not_nullable,,,8605,
Column,genre,not_nullable,,,8601,
Column,genre,not_nullable,,,8596,
Column,genre,not_nullable,,,8812,
Column,genre,not_nullable,,,8818,
Column,genre,not_nullable,,,9094,
Column,genre,not_nullable,,,8988,
Column,genre,not_nullable,,,9016,
Column,genre,not_nullable,,,9010,
Column,genre,not_nullable,,,9009,
Column,genre,not_nullable,,,9006,
Column,genre,not_nullable,,,9000,
Column,genre,not_nullable,,,8998,
Column,genre,not_nullable,,,8997,
Column,genre,not_nullable,,,8996,
Column,genre,not_nullable,,,8994,
Column,genre,not_nullable,,,8993,
Column,genre,not_nullable,,,8992,
Column,genre,not_nullable,,,8986,
Column,genre,not_nullable,,,8822,
Column,genre,not_nullable,,,8985,
Column,genre,not_nullable,,,8981,
Column,genre,not_nullable,,,8979,
Column,genre,not_nullable,,,8976,
Column,genre,not_nullable,,,8974,
Column,genre,not_nullable,,,8970,
Column,genre,not_nullable,,,8969,
Column,genre,not_nullable,,,8967,
Column,genre,not_nullable,,,8966,
Column,genre,not_nullable,,,8965,
Column,genre,not_nullable,,,8964,
Column,genre,not_nullable,,,9028,
Column,genre,not_nullable,,,9029,
Column,genre,not_nullable,,,9031,
Column,genre,not_nullable,,,9032,
Column,genre,not_nullable,,,9092,
Column,genre,not_nullable,,,9089,
Column,genre,not_nullable,,,9088,
Column,genre,not_nullable,,,9075,
Column,genre,not_nullable,,,9073,
Column,genre,not_nullable,,,9072,
Column,genre,not_nullable,,,9069,
Column,genre,not_nullable,,,9068,
Column,genre,not_nullable,,,9067,
Column,genre,not_nullable,,,9063,
Column,genre,not_nullable,,,9062,
Column,genre,not_nullable,,,9059,
Column,genre,not_nullable,,,9056,
Column,genre,not_nullable,,,9055,
Column,genre,not_nullable,,,9049,
Column,genre,not_nullable,,,9044,
Column,genre,not_nullable,,,9043,
Column,genre,not_nullable,,,9042,
Column,genre,not_nullable,,,9041,
Column,genre,not_nullable,,,9040,
Column,genre,not_nullable,,,9039,
Column,genre,not_nullable,,,9038,
Column,genre,not_nullable,,,9037,
Column,genre,not_nullable,,,8963,
Column,genre,not_nullable,,,8960,
Column,genre,not_nullable,,,8955,
Column,genre,not_nullable,,,8874,
Column,genre,not_nullable,,,8870,
Column,genre,not_nullable,,,8868,
Column,genre,not_nullable,,,8866,
Column,genre,not_nullable,,,8864,
Column,genre,not_nullable,,,8862,
Column,genre,not_nullable,,,8858,
Column,genre,not_nullable,,,8855,
Column,genre,not_nullable,,,8854,
Column,genre,not_nullable,,,8853,
Column,genre,not_nullable,,,8852,
Column,genre,not_nullable,,,8851,
Column,genre,not_nullable,,,8847,
Column,genre,not_nullable,,,8844,
Column,genre,not_nullable,,,8842,
Column,genre,not_nullable,,,8838,
Column,genre,not_nullable,,,8837,
Column,genre,not_nullable,,,8835,
Column,genre,not_nullable,,,8833,
Column,genre,not_nullable,,,8829,
Column,genre,not_nullable,,,8828,
Column,genre,not_nullable,,,8827,
Column,genre,not_nullable,,,8825,
Column,genre,not_nullable,,,8824,
Column,genre,not_nullable,,,8873,
Column,genre,not_nullable,,,8880,
Column,genre,not_nullable,,,8954,
Column,genre,not_nullable,,,8882,
Column,genre,not_nullable,,,8953,
Column,genre,not_nullable,,,8946,
Column,genre,not_nullable,,,8943,
Column,genre,not_nullable,,,8941,
Column,genre,not_nullable,,,8938,
Column,genre,not_nullable,,,8933,
Column,genre,not_nullable,,,8931,
Column,genre,not_nullable,,,8921,
Column,genre,not_nullable,,,8919,
Column,genre,not_nullable,,,8918,
Column,genre,not_nullable,,,8916,
Column,genre,not_nullable,,,8915,
Column,genre,not_nullable,,,8910,
Column,genre,not_nullable,,,8908,
Column,genre,not_nullable,,,8906,
Column,genre,not_nullable,,,8904,
Column,genre,not_nullable,,,8903,
Column,genre,not_nullable,,,8898,
Column,genre,not_nullable,,,8895,
Column,genre,not_nullable,,,8891,
Column,genre,not_nullable,,,8890,
Column,genre,not_nullable,,,8886,
Column,genre,not_nullable,,,8884,
Column,genre,not_nullable,,,7288,
Column,genre,not_nullable,,,7284,
Column,genre,not_nullable,,,7282,
Column,genre,not_nullable,,,5560,
Column,genre,not_nullable,,,5596,
Column,genre,not_nullable,,,5592,
Column,genre,not_nullable,,,5588,
Column,genre,not_nullable,,,5584,
Column,genre,not_nullable,,,5583,
Column,genre,not_nullable,,,5580,
Column,genre,not_nullable,,,5572,
Column,genre,not_nullable,,,5569,
Column,genre,not_nullable,,,5568,
Column,genre,not_nullable,,,5567,
Column,genre,not_nullable,,,5561,
Column,genre,not_nullable,,,5557,
Column,genre,not_nullable,,,5503,
Column,genre,not_nullable,,,5553,
Column,genre,not_nullable,,,5550,
Column,genre,not_nullable,,,5547,
Column,genre,not_nullable,,,5543,
Column,genre,not_nullable,,,5540,
Column,genre,not_nullable,,,5535,
Column,genre,not_nullable,,,5532,
Column,genre,not_nullable,,,5524,
Column,genre,not_nullable,,,5523,
Column,genre,not_nullable,,,5519,
Column,genre,not_nullable,,,5513,
Column,genre,not_nullable,,,5597,
Column,genre,not_nullable,,,5603,
Column,genre,not_nullable,,,5604,
Column,genre,not_nullable,,,5609,
Column,genre,not_nullable,,,5668,
Column,genre,not_nullable,,,5665,
Column,genre,not_nullable,,,5660,
Column,genre,not_nullable,,,5657,
Column,genre,not_nullable,,,5651,
Column,genre,not_nullable,,,5647,
Column,genre,not_nullable,,,5645,
Column,genre,not_nullable,,,5644,
Column,genre,not_nullable,,,5642,
Column,genre,not_nullable,,,5639,
Column,genre,not_nullable,,,5635,
Column,genre,not_nullable,,,5631,
Column,genre,not_nullable,,,5630,
Column,genre,not_nullable,,,5628,
Column,genre,not_nullable,,,5627,
Column,genre,not_nullable,,,5625,
Column,genre,not_nullable,,,5624,
Column,genre,not_nullable,,,5619,
Column,genre,not_nullable,,,5616,
Column,genre,not_nullable,,,5615,
Column,genre,not_nullable,,,5613,
Column,genre,not_nullable,,,5612,
Column,genre,not_nullable,,,5611,
Column,genre,not_nullable,,,5509,
Column,genre,not_nullable,,,5501,
Column,genre,not_nullable,,,7277,
Column,genre,not_nullable,,,5397,
Column,genre,not_nullable,,,5423,
Column,genre,not_nullable,,,5421,
Column,genre,not_nullable,,,5417,
Column,genre,not_nullable,,,5415,
Column,genre,not_nullable,,,5414,
Column,genre,not_nullable,,,5413,
Column,genre,not_nullable,,,5409,
Column,genre,not_nullable,,,5407,
Column,genre,not_nullable,,,5406,
Column,genre,not_nullable,,,5401,
Column,genre,not_nullable,,,5399,
Column,genre,not_nullable,,,5395,
Column,genre,not_nullable,,,5499,
Column,genre,not_nullable,,,5393,
Column,genre,not_nullable,,,5382,
Column,genre,not_nullable,,,5379,
Column,genre,not_nullable,,,5378,
Column,genre,not_nullable,,,5377,
Column,genre,not_nullable,,,5375,
Column,genre,not_nullable,,,5371,
Column,genre,not_nullable,,,5367,
Column,genre,not_nullable,,,5366,
Column,genre,not_nullable,,,5364,
Column,genre,not_nullable,,,5361,
Column,genre,not_nullable,,,5424,
Column,genre,not_nullable,,,5428,
Column,genre,not_nullable,,,5433,
Column,genre,not_nullable,,,5434,
Column,genre,not_nullable,,,5497,
Column,genre,not_nullable,,,5494,
Column,genre,not_nullable,,,5493,
Column,genre,not_nullable,,,5492,
Column,genre,not_nullable,,,5487,
Column,genre,not_nullable,,,5486,
Column,genre,not_nullable,,,5475,
Column,genre,not_nullable,,,5473,
Column,genre,not_nullable,,,5471,
Column,genre,not_nullable,,,5470,
Column,genre,not_nullable,,,5468,
Column,genre,not_nullable,,,5467,
Column,genre,not_nullable,,,5462,
Column,genre,not_nullable,,,5456,
Column,genre,not_nullable,,,5454,
Column,genre,not_nullable,,,5453,
Column,genre,not_nullable,,,5451,
Column,genre,not_nullable,,,5447,
Column,genre,not_nullable,,,5446,
Column,genre,not_nullable,,,5445,
Column,genre,not_nullable,,,5443,
Column,genre,not_nullable,,,5438,
Column,genre,not_nullable,,,5437,
Column,genre,not_nullable,,,5669,
Column,genre,not_nullable,,,5678,
Column,genre,not_nullable,,,5679,
Column,genre,not_nullable,,,5905,
Column,genre,not_nullable,,,5932,
Column,genre,not_nullable,,,5930,
Column,genre,not_nullable,,,5929,
Column,genre,not_nullable,,,5926,
Column,genre,not_nullable,,,5925,
Column,genre,not_nullable,,,5922,
Column,genre,not_nullable,,,5921,
Column,genre,not_nullable,,,5915,
Column,genre,not_nullable,,,5911,
Column,genre,not_nullable,,,5909,
Column,genre,not_nullable,,,5908,
Column,genre,not_nullable,,,5904,
Column,genre,not_nullable,,,5682,
Column,genre,not_nullable,,,5903,
Column,genre,not_nullable,,,5902,
Column,genre,not_nullable,,,5900,
Column,genre,not_nullable,,,5898,
Column,genre,not_nullable,,,5886,
Column,genre,not_nullable,,,5881,
Column,genre,not_nullable,,,5880,
Column,genre,not_nullable,,,5877,
Column,genre,not_nullable,,,5873,
Column,genre,not_nullable,,,5872,
Column,genre,not_nullable,,,5869,
Column,genre,not_nullable,,,5934,
Column,genre,not_nullable,,,5938,
Column,genre,not_nullable,,,5939,
Column,genre,not_nullable,,,5944,
Column,genre,not_nullable,,,5998,
Column,genre,not_nullable,,,5997,
Column,genre,not_nullable,,,5994,
Column,genre,not_nullable,,,5992,
Column,genre,not_nullable,,,5990,
Column,genre,not_nullable,,,5987,
Column,genre,not_nullable,,,5986,
Column,genre,not_nullable,,,5985,
Column,genre,not_nullable,,,5984,
Column,genre,not_nullable,,,5983,
Column,genre,not_nullable,,,5982,
Column,genre,not_nullable,,,5981,
Column,genre,not_nullable,,,5976,
Column,genre,not_nullable,,,5973,
Column,genre,not_nullable,,,5972,
Column,genre,not_nullable,,,5970,
Column,genre,not_nullable,,,5966,
Column,genre,not_nullable,,,5965,
Column,genre,not_nullable,,,5964,
Column,genre,not_nullable,,,5961,
Column,genre,not_nullable,,,5952,
Column,genre,not_nullable,,,5951,
Column,genre,not_nullable,,,5947,
Column,genre,not_nullable,,,5863,
Column,genre,not_nullable,,,5861,
Column,genre,not_nullable,,,5857,
Column,genre,not_nullable,,,5770,
Column,genre,not_nullable,,,5764,
Column,genre,not_nullable,,,5760,
Column,genre,not_nullable,,,5758,
Column,genre,not_nullable,,,5757,
Column,genre,not_nullable,,,5753,
Column,genre,not_nullable,,,5751,
Column,genre,not_nullable,,,5750,
Column,genre,not_nullable,,,5749,
Column,genre,not_nullable,,,5747,
Column,genre,not_nullable,,,5745,
Column,genre,not_nullable,,,5743,
Column,genre,not_nullable,,,5740,
Column,genre,not_nullable,,,5733,
Column,genre,not_nullable,,,5732,
Column,genre,not_nullable,,,5731,
Column,genre,not_nullable,,,5728,
Column,genre,not_nullable,,,5725,
Column,genre,not_nullable,,,5723,
Column,genre,not_nullable,,,5719,
Column,genre,not_nullable,,,5718,
Column,genre,not_nullable,,,5711,
Column,genre,not_nullable,,,5701,
Column,genre,not_nullable,,,5684,
Column,genre,not_nullable,,,5769,
Column,genre,not_nullable,,,5772,
Column,genre,not_nullable,,,5856,
Column,genre,not_nullable,,,5776,
Column,genre,not_nullable,,,5855,
Column,genre,not_nullable,,,5851,
Column,genre,not_nullable,,,5846,
Column,genre,not_nullable,,,5843,
Column,genre,not_nullable,,,5838,
Column,genre,not_nullable,,,5835,
Column,genre,not_nullable,,,5829,
Column,genre,not_nullable,,,5827,
Column,genre,not_nullable,,,5825,
Column,genre,not_nullable,,,5820,
Column,genre,not_nullable,,,5818,
Column,genre,not_nullable,,,5814,
Column,genre,not_nullable,,,5810,
Column,genre,not_nullable,,,5808,
Column,genre,not_nullable,,,5804,
Column,genre,not_nullable,,,5801,
Column,genre,not_nullable,,,5794,
Column,genre,not_nullable,,,5793,
Column,genre,not_nullable,,,5787,
Column,genre,not_nullable,,,5786,
Column,genre,not_nullable,,,5784,
Column,genre,not_nullable,,,5782,
Column,genre,not_nullable,,,5777,
Column,genre,not_nullable,,,5356,
Column,genre,not_nullable,,,5355,
Column,genre,not_nullable,,,5354,
Column,genre,not_nullable,,,4880,
Column,genre,not_nullable,,,4912,
Column,genre,not_nullable,,,4910,
Column,genre,not_nullable,,,4908,
Column,genre,not_nullable,,,4907,
Column,genre,not_nullable,,,4906,
Column,genre,not_nullable,,,4901,
Column,genre,not_nullable,,,4898,
Column,genre,not_nullable,,,4895,
Column,genre,not_nullable,,,4892,
Column,genre,not_nullable,,,4889,
Column,genre,not_nullable,,,4885,
Column,genre,not_nullable,,,4878,
Column,genre,not_nullable,,,5015,
Column,genre,not_nullable,,,4877,
Column,genre,not_nullable,,,4874,
Column,genre,not_nullable,,,4873,
Column,genre,not_nullable,,,4870,
Column,genre,not_nullable,,,4865,
Column,genre,not_nullable,,,4863,
Column,genre,not_nullable,,,4862,
Column,genre,not_nullable,,,4858,
Column,genre,not_nullable,,,4856,
Column,genre,not_nullable,,,4855,
Column,genre,not_nullable,,,4854,
Column,genre,not_nullable,,,4916,
Column,genre,not_nullable,,,4919,
Column,genre,not_nullable,,,4922,
Column,genre,not_nullable,,,4924,
Column,genre,not_nullable,,,5009,
Column,genre,not_nullable,,,5006,
Column,genre,not_nullable,,,5004,
Column,genre,not_nullable,,,5003,
Column,genre,not_nullable,,,4994,
Column,genre,not_nullable,,,4983,
Column,genre,not_nullable,,,4979,
Column,genre,not_nullable,,,4978,
Column,genre,not_nullable,,,4973,
Column,genre,not_nullable,,,4972,
Column,genre,not_nullable,,,4968,
Column,genre,not_nullable,,,4967,
Column,genre,not_nullable,,,4964,
Column,genre,not_nullable,,,4963,
Column,genre,not_nullable,,,4960,
Column,genre,not_nullable,,,4959,
Column,genre,not_nullable,,,4955,
Column,genre,not_nullable,,,4952,
Column,genre,not_nullable,,,4951,
Column,genre,not_nullable,,,4947,
Column,genre,not_nullable,,,4945,
Column,genre,not_nullable,,,4932,
Column,genre,not_nullable,,,4926,
Column,genre,not_nullable,,,4853,
Column,genre,not_nullable,,,4852,
Column,genre,not_nullable,,,4851,
Column,genre,not_nullable,,,4782,
Column,genre,not_nullable,,,4778,
Column,genre,not_nullable,,,4773,
Column,genre,not_nullable,,,4772,
Column,genre,not_nullable,,,4769,
Column,genre,not_nullable,,,4766,
Column,genre,not_nullable,,,4764,
Column,genre,not_nullable,,,4761,
Column,genre,not_nullable,,,4757,
Column,genre,not_nullable,,,4754,
Column,genre,not_nullable,,,4748,
Column,genre,not_nullable,,,4746,
Column,genre,not_nullable,,,4744,
Column,genre,not_nullable,,,4740,
Column,genre,not_nullable,,,4739,
Column,genre,not_nullable,,,4737,
Column,genre,not_nullable,,,4736,
Column,genre,not_nullable,,,4734,
Column,genre,not_nullable,,,4732,
Column,genre,not_nullable,,,4731,
Column,genre,not_nullable,,,4727,
Column,genre,not_nullable,,,4723,
Column,genre,not_nullable,,,4714,
Column,genre,not_nullable,,,4710,
Column,genre,not_nullable,,,4781,
Column,genre,not_nullable,,,4783,
Column,genre,not_nullable,,,4850,
Column,genre,not_nullable,,,4784,
Column,genre,not_nullable,,,4849,
Column,genre,not_nullable,,,4842,
Column,genre,not_nullable,,,4838,
Column,genre,not_nullable,,,4836,
Column,genre,not_nullable,,,4835,
Column,genre,not_nullable,,,4833,
Column,genre,not_nullable,,,4831,
Column,genre,not_nullable,,,4828,
Column,genre,not_nullable,,,4827,
Column,genre,not_nullable,,,4819,
Column,genre,not_nullable,,,4817,
Column,genre,not_nullable,,,4815,
Column,genre,not_nullable,,,4814,
Column,genre,not_nullable,,,4810,
Column,genre,not_nullable,,,4809,
Column,genre,not_nullable,,,4808,
Column,genre,not_nullable,,,4806,
Column,genre,not_nullable,,,4794,
Column,genre,not_nullable,,,4793,
Column,genre,not_nullable,,,4792,
Column,genre,not_nullable,,,4791,
Column,genre,not_nullable,,,4787,
Column,genre,not_nullable,,,4786,
Column,genre,not_nullable,,,5012,
Column,genre,not_nullable,,,5021,
Column,genre,not_nullable,,,5353,
Column,genre,not_nullable,,,5236,
Column,genre,not_nullable,,,5273,
Column,genre,not_nullable,,,5272,
Column,genre,not_nullable,,,5271,
Column,genre,not_nullable,,,5262,
Column,genre,not_nullable,,,5261,
Column,genre,not_nullable,,,5257,
Column,genre,not_nullable,,,5252,
Column,genre,not_nullable,,,5250,
Column,genre,not_nullable,,,5245,
Column,genre,not_nullable,,,5244,
Column,genre,not_nullable,,,5242,
Column,genre,not_nullable,,,5233,
Column,genre,not_nullable,,,5023,
Column,genre,not_nullable,,,5232,
Column,genre,not_nullable,,,5231,
Column,genre,not_nullable,,,5227,
Column,genre,not_nullable,,,5226,
Column,genre,not_nullable,,,5225,
Column,genre,not_nullable,,,5223,
Column,genre,not_nullable,,,5212,
Column,genre,not_nullable,,,5206,
Column,genre,not_nullable,,,5202,
Column,genre,not_nullable,,,5199,
Column,genre,not_nullable,,,5194,
Column,genre,not_nullable,,,5275,
Column,genre,not_nullable,,,5276,
Column,genre,not_nullable,,,5278,
Column,genre,not_nullable,,,5280,
Column,genre,not_nullable,,,5351,
Column,genre,not_nullable,,,5348,
Column,genre,not_nullable,,,5347,
Column,genre,not_nullable,,,5344,
Column,genre,not_nullable,,,5340,
Column,genre,not_nullable,,,5334,
Column,genre,not_nullable,,,5332,
Column,genre,not_nullable,,,5328,
Column,genre,not_nullable,,,5322,
Column,genre,not_nullable,,,5321,
Column,genre,not_nullable,,,5320,
Column,genre,not_nullable,,,5316,
Column,genre,not_nullable,,,5312,
Column,genre,not_nullable,,,5306,
Column,genre,not_nullable,,,5303,
Column,genre,not_nullable,,,5301,
Column,genre,not_nullable,,,5300,
Column,genre,not_nullable,,,5299,
Column,genre,not_nullable,,,5296,
Column,genre,not_nullable,,,5295,
Column,genre,not_nullable,,,5293,
Column,genre,not_nullable,,,5290,
Column,genre,not_nullable,,,5287,
Column,genre,not_nullable,,,5189,
Column,genre,not_nullable,,,5186,
Column,genre,not_nullable,,,5185,
Column,genre,not_nullable,,,5094,
Column,genre,not_nullable,,,5084,
Column,genre,not_nullable,,,5078,
Column,genre,not_nullable,,,5076,
Column,genre,not_nullable,,,5074,
Column,genre,not_nullable,,,5072,
Column,genre,not_nullable,,,5068,
Column,genre,not_nullable,,,5063,
Column,genre,not_nullable,,,5062,
Column,genre,not_nullable,,,5061,
Column,genre,not_nullable,,,5060,
Column,genre,not_nullable,,,5057,
Column,genre,not_nullable,,,5056,
Column,genre,not_nullable,,,5054,
Column,genre,not_nullable,,,5049,
Column,genre,not_nullable,,,5048,
Column,genre,not_nullable,,,5045,
Column,genre,not_nullable,,,5044,
Column,genre,not_nullable,,,5043,
Column,genre,not_nullable,,,5041,
Column,genre,not_nullable,,,5031,
Column,genre,not_nullable,,,5029,
Column,genre,not_nullable,,,5025,
Column,genre,not_nullable,,,5024,
Column,genre,not_nullable,,,5093,
Column,genre,not_nullable,,,5097,
Column,genre,not_nullable,,,5181,
Column,genre,not_nullable,,,5098,
Column,genre,not_nullable,,,5179,
Column,genre,not_nullable,,,5168,
Column,genre,not_nullable,,,5166,
Column,genre,not_nullable,,,5162,
Column,genre,not_nullable,,,5159,
Column,genre,not_nullable,,,5158,
Column,genre,not_nullable,,,5157,
Column,genre,not_nullable,,,5148,
Column,genre,not_nullable,,,5147,
Column,genre,not_nullable,,,5142,
Column,genre,not_nullable,,,5129,
Column,genre,not_nullable,,,5126,
Column,genre,not_nullable,,,5123,
Column,genre,not_nullable,,,5122,
Column,genre,not_nullable,,,5121,
Column,genre,not_nullable,,,5117,
Column,genre,not_nullable,,,5115,
Column,genre,not_nullable,,,5114,
Column,genre,not_nullable,,,5112,
Column,genre,not_nullable,,,5110,
Column,genre,not_nullable,,,5109,
Column,genre,not_nullable,,,5105,
Column,genre,not_nullable,,,5100,
Column,genre,not_nullable,,,5999,
Column,genre,not_nullable,,,6003,
Column,genre,not_nullable,,,6004,
Column,genre,not_nullable,,,6814,
Column,genre,not_nullable,,,6844,
Column,genre,not_nullable,,,6841,
Column,genre,not_nullable,,,6839,
Column,genre,not_nullable,,,6837,
Column,genre,not_nullable,,,6834,
Column,genre,not_nullable,,,6833,
Column,genre,not_nullable,,,6824,
Column,genre,not_nullable,,,6823,
Column,genre,not_nullable,,,6822,
Column,genre,not_nullable,,,6820,
Column,genre,not_nullable,,,6817,
Column,genre,not_nullable,,,6812,
Column,genre,not_nullable,,,6949,
Column,genre,not_nullable,,,6809,
Column,genre,not_nullable,,,6807,
Column,genre,not_nullable,,,6805,
Column,genre,not_nullable,,,6804,
Column,genre,not_nullable,,,6803,
Column,genre,not_nullable,,,6801,
Column,genre,not_nullable,,,6800,
Column,genre,not_nullable,,,6796,
Column,genre,not_nullable,,,6795,
Column,genre,not_nullable,,,6793,
Column,genre,not_nullable,,,6791,
Column,genre,not_nullable,,,6850,
Column,genre,not_nullable,,,6851,
Column,genre,not_nullable,,,6853,
Column,genre,not_nullable,,,6855,
Column,genre,not_nullable,,,6940,
Column,genre,not_nullable,,,6937,
Column,genre,not_nullable,,,6932,
Column,genre,not_nullable,,,6926,
Column,genre,not_nullable,,,6925,
Column,genre,not_nullable,,,6922,
Column,genre,not_nullable,,,6912,
Column,genre,not_nullable,,,6900,
Column,genre,not_nullable,,,6893,
Column,genre,not_nullable,,,6892,
Column,genre,not_nullable,,,6887,
Column,genre,not_nullable,,,6882,
Column,genre,not_nullable,,,6879,
Column,genre,not_nullable,,,6877,
Column,genre,not_nullable,,,6874,
Column,genre,not_nullable,,,6869,
Column,genre,not_nullable,,,6868,
Column,genre,not_nullable,,,6866,
Column,genre,not_nullable,,,6864,
Column,genre,not_nullable,,,6863,
Column,genre,not_nullable,,,6862,
Column,genre,not_nullable,,,6861,
Column,genre,not_nullable,,,6857,
Column,genre,not_nullable,,,6790,
Column,genre,not_nullable,,,6788,
Column,genre,not_nullable,,,6785,
Column,genre,not_nullable,,,6715,
Column,genre,not_nullable,,,6712,
Column,genre,not_nullable,,,6705,
Column,genre,not_nullable,,,6700,
Column,genre,not_nullable,,,6698,
Column,genre,not_nullable,,,6697,
Column,genre,not_nullable,,,6682,
Column,genre,not_nullable,,,6676,
Column,genre,not_nullable,,,6671,
Column,genre,not_nullable,,,6669,
Column,genre,not_nullable,,,6667,
Column,genre,not_nullable,,,6666,
Column,genre,not_nullable,,,6665,
Column,genre,not_nullable,,,6663,
Column,genre,not_nullable,,,6661,
Column,genre,not_nullable,,,6659,
Column,genre,not_nullable,,,6649,
Column,genre,not_nullable,,,6648,
Column,genre,not_nullable,,,6644,
Column,genre,not_nullable,,,6640,
Column,genre,not_nullable,,,6632,
Column,genre,not_nullable,,,6630,
Column,genre,not_nullable,,,6627,
Column,genre,not_nullable,,,6625,
Column,genre,not_nullable,,,6713,
Column,genre,not_nullable,,,6717,
Column,genre,not_nullable,,,6783,
Column,genre,not_nullable,,,6718,
Column,genre,not_nullable,,,6781,
Column,genre,not_nullable,,,6778,
Column,genre,not_nullable,,,6770,
Column,genre,not_nullable,,,6768,
Column,genre,not_nullable,,,6766,
Column,genre,not_nullable,,,6764,
Column,genre,not_nullable,,,6762,
Column,genre,not_nullable,,,6756,
Column,genre,not_nullable,,,6754,
Column,genre,not_nullable,,,6751,
Column,genre,not_nullable,,,6750,
Column,genre,not_nullable,,,6741,
Column,genre,not_nullable,,,6738,
Column,genre,not_nullable,,,6737,
Column,genre,not_nullable,,,6736,
Column,genre,not_nullable,,,6732,
Column,genre,not_nullable,,,6731,
Column,genre,not_nullable,,,6730,
Column,genre,not_nullable,,,6727,
Column,genre,not_nullable,,,6724,
Column,genre,not_nullable,,,6723,
Column,genre,not_nullable,,,6720,
Column,genre,not_nullable,,,6719,
Column,genre,not_nullable,,,6944,
Column,genre,not_nullable,,,6950,
Column,genre,not_nullable,,,6621,
Column,genre,not_nullable,,,7165,
Column,genre,not_nullable,,,7196,
Column,genre,not_nullable,,,7195,
Column,genre,not_nullable,,,7190,
Column,genre,not_nullable,,,7188,
Column,genre,not_nullable,,,7186,
Column,genre,not_nullable,,,7183,
Column,genre,not_nullable,,,7182,
Column,genre,not_nullable,,,7178,
Column,genre,not_nullable,,,7174,
Column,genre,not_nullable,,,7168,
Column,genre,not_nullable,,,7166,
Column,genre,not_nullable,,,7164,
Column,genre,not_nullable,,,6955,
Column,genre,not_nullable,,,7163,
Column,genre,not_nullable,,,7161,
Column,genre,not_nullable,,,7157,
Column,genre,not_nullable,,,7154,
Column,genre,not_nullable,,,7151,
Column,genre,not_nullable,,,7147,
Column,genre,not_nullable,,,7141,
Column,genre,not_nullable,,,7140,
Column,genre,not_nullable,,,7135,
Column,genre,not_nullable,,,7128,
Column,genre,not_nullable,,,7125,
Column,genre,not_nullable,,,7198,
Column,genre,not_nullable,,,7202,
Column,genre,not_nullable,,,7203,
Column,genre,not_nullable,,,7206,
Column,genre,not_nullable,,,7275,
Column,genre,not_nullable,,,7274,
Column,genre,not_nullable,,,7272,
Column,genre,not_nullable,,,7270,
Column,genre,not_nullable,,,7269,
Column,genre,not_nullable,,,7267,
Column,genre,not_nullable,,,7262,
Column,genre,not_nullable,,,7261,
Column,genre,not_nullable,,,7260,
Column,genre,not_nullable,,,7254,
Column,genre,not_nullable,,,7251,
Column,genre,not_nullable,,,7247,
Column,genre,not_nullable,,,7245,
Column,genre,not_nullable,,,7241,
Column,genre,not_nullable,,,7240,
Column,genre,not_nullable,,,7239,
Column,genre,not_nullable,,,7234,
Column,genre,not_nullable,,,7231,
Column,genre,not_nullable,,,7222,
Column,genre,not_nullable,,,7221,
Column,genre,not_nullable,,,7220,
Column,genre,not_nullable,,,7218,
Column,genre,not_nullable,,,7208,
Column,genre,not_nullable,,,7124,
Column,genre,not_nullable,,,7123,
Column,genre,not_nullable,,,7122,
Column,genre,not_nullable,,,7016,
Column,genre,not_nullable,,,7003,
Column,genre,not_nullable,,,7002,
Column,genre,not_nullable,,,7001,
Column,genre,not_nullable,,,7000,
Column,genre,not_nullable,,,6999,
Column,genre,not_nullable,,,6996,
Column,genre,not_nullable,,,6995,
Column,genre,not_nullable,,,6994,
Column,genre,not_nullable,,,6993,
Column,genre,not_nullable,,,6991,
Column,genre,not_nullable,,,6989,
Column,genre,not_nullable,,,6988,
Column,genre,not_nullable,,,6987,
Column,genre,not_nullable,,,6985,
Column,genre,not_nullable,,,6983,
Column,genre,not_nullable,,,6981,
Column,genre,not_nullable,,,6977,
Column,genre,not_nullable,,,6974,
Column,genre,not_nullable,,,6973,
Column,genre,not_nullable,,,6969,
Column,genre,not_nullable,,,6960,
Column,genre,not_nullable,,,6959,
Column,genre,not_nullable,,,6958,
Column,genre,not_nullable,,,7007,
Column,genre,not_nullable,,,7019,
Column,genre,not_nullable,,,7120,
Column,genre,not_nullable,,,7020,
Column,genre,not_nullable,,,7118,
Column,genre,not_nullable,,,7117,
Column,genre,not_nullable,,,7115,
Column,genre,not_nullable,,,7114,
Column,genre,not_nullable,,,7113,
Column,genre,not_nullable,,,7109,
Column,genre,not_nullable,,,7105,
Column,genre,not_nullable,,,7102,
Column,genre,not_nullable,,,7096,
Column,genre,not_nullable,,,7093,
Column,genre,not_nullable,,,7085,
Column,genre,not_nullable,,,7080,
Column,genre,not_nullable,,,7077,
Column,genre,not_nullable,,,7060,
Column,genre,not_nullable,,,7054,
Column,genre,not_nullable,,,7046,
Column,genre,not_nullable,,,7043,
Column,genre,not_nullable,,,7041,
Column,genre,not_nullable,,,7040,
Column,genre,not_nullable,,,7038,
Column,genre,not_nullable,,,7029,
Column,genre,not_nullable,,,7024,
Column,genre,not_nullable,,,7021,
Column,genre,not_nullable,,,6623,
Column,genre,not_nullable,,,6620,
Column,genre,not_nullable,,,6006,
Column,genre,not_nullable,,,6227,
Column,genre,not_nullable,,,6254,
Column,genre,not_nullable,,,6250,
Column,genre,not_nullable,,,6248,
Column,genre,not_nullable,,,6247,
Column,genre,not_nullable,,,6245,
Column,genre,not_nullable,,,6244,
Column,genre,not_nullable,,,6240,
Column,genre,not_nullable,,,6237,
Column,genre,not_nullable,,,6235,
Column,genre,not_nullable,,,6233,
Column,genre,not_nullable,,,6231,
Column,genre,not_nullable,,,6222,
Column,genre,not_nullable,,,6327,
Column,genre,not_nullable,,,6221,
Column,genre,not_nullable,,,6220,
Column,genre,not_nullable,,,6213,
Column,genre,not_nullable,,,6211,
Column,genre,not_nullable,,,6206,
Column,genre,not_nullable,,,6205,
Column,genre,not_nullable,,,6202,
Column,genre,not_nullable,,,6201,
Column,genre,not_nullable,,,6198,
Column,genre,not_nullable,,,6194,
Column,genre,not_nullable,,,6191,
Column,genre,not_nullable,,,6255,
Column,genre,not_nullable,,,6256,
Column,genre,not_nullable,,,6264,
Column,genre,not_nullable,,,6267,
Column,genre,not_nullable,,,6319,
Column,genre,not_nullable,,,6317,
Column,genre,not_nullable,,,6315,
Column,genre,not_nullable,,,6313,
Column,genre,not_nullable,,,6310,
Column,genre,not_nullable,,,6307,
Column,genre,not_nullable,,,6305,
Column,genre,not_nullable,,,6302,
Column,genre,not_nullable,,,6299,
Column,genre,not_nullable,,,6297,
Column,genre,not_nullable,,,6296,
Column,genre,not_nullable,,,6294,
Column,genre,not_nullable,,,6293,
Column,genre,not_nullable,,,6292,
Column,genre,not_nullable,,,6288,
Column,genre,not_nullable,,,6287,
Column,genre,not_nullable,,,6285,
Column,genre,not_nullable,,,6283,
Column,genre,not_nullable,,,6281,
Column,genre,not_nullable,,,6276,
Column,genre,not_nullable,,,6275,
Column,genre,not_nullable,,,6269,
Column,genre,not_nullable,,,6268,
Column,genre,not_nullable,,,6189,
Column,genre,not_nullable,,,6187,
Column,genre,not_nullable,,,6185,
Column,genre,not_nullable,,,6110,
Column,genre,not_nullable,,,6097,
Column,genre,not_nullable,,,6094,
Column,genre,not_nullable,,,6088,
Column,genre,not_nullable,,,6087,
Column,genre,not_nullable,,,6084,
Column,genre,not_nullable,,,6078,
Column,genre,not_nullable,,,6069,
Column,genre,not_nullable,,,6068,
Column,genre,not_nullable,,,6061,
Column,genre,not_nullable,,,6060,
Column,genre,not_nullable,,,6053,
Column,genre,not_nullable,,,6050,
Column,genre,not_nullable,,,6045,
Column,genre,not_nullable,,,6041,
Column,genre,not_nullable,,,6039,
Column,genre,not_nullable,,,6037,
Column,genre,not_nullable,,,6032,
Column,genre,not_nullable,,,6030,
Column,genre,not_nullable,,,6027,
Column,genre,not_nullable,,,6025,
Column,genre,not_nullable,,,6017,
Column,genre,not_nullable,,,6013,
Column,genre,not_nullable,,,6012,
Column,genre,not_nullable,,,6105,
Column,genre,not_nullable,,,6114,
Column,genre,not_nullable,,,6184,
Column,genre,not_nullable,,,6115,
Column,genre,not_nullable,,,6180,
Column,genre,not_nullable,,,6175,
Column,genre,not_nullable,,,6168,
Column,genre,not_nullable,,,6167,
Column,genre,not_nullable,,,6166,
Column,genre,not_nullable,,,6165,
Column,genre,not_nullable,,,6162,
Column,genre,not_nullable,,,6159,
Column,genre,not_nullable,,,6153,
Column,genre,not_nullable,,,6152,
Column,genre,not_nullable,,,6149,
Column,genre,not_nullable,,,6148,
Column,genre,not_nullable,,,6147,
Column,genre,not_nullable,,,6146,
Column,genre,not_nullable,,,6145,
Column,genre,not_nullable,,,6142,
Column,genre,not_nullable,,,6135,
Column,genre,not_nullable,,,6133,
Column,genre,not_nullable,,,6126,
Column,genre,not_nullable,,,6122,
Column,genre,not_nullable,,,6121,
Column,genre,not_nullable,,,6120,
Column,genre,not_nullable,,,6119,
Column,genre,not_nullable,,,6322,
Column,genre,not_nullable,,,6331,
Column,genre,not_nullable,,,6618,
Column,genre,not_nullable,,,6527,
Column,genre,not_nullable,,,6557,
Column,genre,not_nullable,,,6555,
Column,genre,not_nullable,,,6554,
Column,genre,not_nullable,,,6552,
Column,genre,not_nullable,,,6549,
Column,genre,not_nullable,,,6546,
Column,genre,not_nullable,,,6544,
Column,genre,not_nullable,,,6540,
Column,genre,not_nullable,,,6538,
Column,genre,not_nullable,,,6537,
Column,genre,not_nullable,,,6528,
Column,genre,not_nullable,,,6524,
Column,genre,not_nullable,,,6332,
Column,genre,not_nullable,,,6522,
Column,genre,not_nullable,,,6521,
Column,genre,not_nullable,,,6515,
Column,genre,not_nullable,,,6507,
Column,genre,not_nullable,,,6506,
Column,genre,not_nullable,,,6504,
Column,genre,not_nullable,,,6499,
Column,genre,not_nullable,,,6497,
Column,genre,not_nullable,,,6496,
Column,genre,not_nullable,,,6494,
Column,genre,not_nullable,,,6493,
Column,genre,not_nullable,,,6558,
Column,genre,not_nullable,,,6559,
Column,genre,not_nullable,,,6564,
Column,genre,not_nullable,,,6566,
Column,genre,not_nullable,,,6615,
Column,genre,not_nullable,,,6614,
Column,genre,not_nullable,,,6612,
Column,genre,not_nullable,,,6609,
Column,genre,not_nullable,,,6608,
Column,genre,not_nullable,,,6606,
Column,genre,not_nullable,,,6604,
Column,genre,not_nullable,,,6603,
Column,genre,not_nullable,,,6597,
Column,genre,not_nullable,,,6596,
Column,genre,not_nullable,,,6595,
Column,genre,not_nullable,,,6593,
Column,genre,not_nullable,,,6592,
Column,genre,not_nullable,,,6588,
Column,genre,not_nullable,,,6580,
Column,genre,not_nullable,,,6578,
Column,genre,not_nullable,,,6577,
Column,genre,not_nullable,,,6575,
Column,genre,not_nullable,,,6574,
Column,genre,not_nullable,,,6571,
Column,genre,not_nullable,,,6569,
Column,genre,not_nullable,,,6568,
Column,genre,not_nullable,,,6567,
Column,genre,not_nullable,,,6492,
Column,genre,not_nullable,,,6479,
Column,genre,not_nullable,,,6477,
Column,genre,not_nullable,,,6397,
Column,genre,not_nullable,,,6394,
Column,genre,not_nullable,,,6392,
Column,genre,not_nullable,,,6390,
Column,genre,not_nullable,,,6388,
Column,genre,not_nullable,,,6383,
Column,genre,not_nullable,,,6382,
Column,genre,not_nullable,,,6380,
Column,genre,not_nullable,,,6369,
Column,genre,not_nullable,,,6366,
Column,genre,not_nullable,,,6365,
Column,genre,not_nullable,,,6362,
Column,genre,not_nullable,,,6359,
Column,genre,not_nullable,,,6352,
Column,genre,not_nullable,,,6350,
Column,genre,not_nullable,,,6348,
Column,genre,not_nullable,,,6346,
Column,genre,not_nullable,,,6345,
Column,genre,not_nullable,,,6344,
Column,genre,not_nullable,,,6343,
Column,genre,not_nullable,,,6342,
Column,genre,not_nullable,,,6340,
Column,genre,not_nullable,,,6337,
Column,genre,not_nullable,,,6334,
Column,genre,not_nullable,,,6395,
Column,genre,not_nullable,,,6400,
Column,genre,not_nullable,,,6475,
Column,genre,not_nullable,,,6402,
Column,genre,not_nullable,,,6474,
Column,genre,not_nullable,,,6472,
Column,genre,not_nullable,,,6471,
Column,genre,not_nullable,,,6466,
Column,genre,not_nullable,,,6463,
Column,genre,not_nullable,,,6455,
Column,genre,not_nullable,,,6454,
Column,genre,not_nullable,,,6453,
Column,genre,not_nullable,,,6450,
Column,genre,not_nullable,,,6444,
Column,genre,not_nullable,,,6439,
Column,genre,not_nullable,,,6431,
Column,genre,not_nullable,,,6430,
Column,genre,not_nullable,,,6429,
Column,genre,not_nullable,,,6425,
Column,genre,not_nullable,,,6421,
Column,genre,not_nullable,,,6420,
Column,genre,not_nullable,,,6419,
Column,genre,not_nullable,,,6417,
Column,genre,not_nullable,,,6416,
Column,genre,not_nullable,,,6414,
Column,genre,not_nullable,,,6413,
Column,genre,not_nullable,,,6410,
Column,title,Check for *possibly* invalid symbols.,0,Â¼Â¼Â¹ÃŒÃ‡Ã‘ Â¼Ã’Â¸Â®,76,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beinah (GefÃ¼hlsecht und Lebensfroh),85,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ­ ÃžÃ¬Ã¯ÃµÃ­Ã¡ Ã°Ã¡Ã«Ã©Ã¼Ã°Ã¡Ã©Ã¤Ã¯,9391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿DÃ³nde jugaran las niÃ±as?,9462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KBS TVÂ¸Â¸ÃˆÂ­Â¿ÂµÃˆÂ­ Â³Ã«Â·Â¡Â¸Ã°Ã€Â½,9460,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,la era de la boludez,9453,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Na PressÃ£o,9452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La realtÃ  la lealtÃ  e lo scont,9444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¯yczenia dla przyjaciÃ³Â³,9440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÃ³Ã°Ã§Ã¨Ã«ÃªÃ¨ +,9438,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazzmasters 4,9434,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blazing Away,9419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"La RealtÃ , la LealtÃ  e lo Scontro",9404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¦k din kat i halen,9396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los paraÃ­sos desiertos,9383,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart: Greatest Hits,9320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazzmasters4,9364,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schizophonic,9361,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŽÃ§Ã’Â¹Â³Â¡,9350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¸mmÃ¸l'n,9346,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÃ³Ã°Ã§Ã¨Ã«ÃªÃ¨ +,9345,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŽÃ§Ã’Â¹Â³Â¡,9343,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ­ Â¹Ã¬Ã¯ÃµÃ­Ã¡ ÃÃ¡Ã«Ã©Ã¼Ã°Ã¡Ã©Ã¤Ã¯,9339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Up a Lazy River,9338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Modern Worship Shema (Â½Â¦Â¸Â¶),9337,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÂ¤ÃƒÃŽ,9336,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KBS TVÂ¸Â¸ÃˆÂ­Â¿ÂµÃˆÂ­ Â³Ã«Â·Â¡Â¸Ã°Ã€Â½,9328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsicas para louvar ao Senhor,9464,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¦k Din Kat I Halen,9534,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schizophonic!,9550,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Era De La Boludez,9572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,year,Check that year is between 1950 and 2030.,0,199,3856,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1946,3138,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,"\nClassical Algerian Andalusian Music""",2667,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1920,2171,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,YEAR: 1952,1618,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1949,1298,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1937,1254,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,98,1226,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1949,1134,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,piano,1112,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1902,1054,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1945,938,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,98,492,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Audio CD Program,50,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,dtype('Int32'),,object,,
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÂ¤ÃƒÃŽ,9742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Leon Redbone/Up a Lazy River,9737,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blazing Away,9685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Viva Los Tioz,9670,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿Donde JugarÃ¡n Las NiÃ±as?,9660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UltrasÃ³nica,9646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Revolution... revoluciÃ³n,9630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Viva Los Tioz,9598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart greatest hits,9325,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÃ°Ã±Ã¡Ã¦Ã©Ã«ÃÃ±Ã¯ OST,9301,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,id,Check that the length of 'id' is 6 characters.,0,11388,9326,lambda x: len(x)==6
Column,title,Check for *possibly* invalid symbols.,0,Ã¦â‚¬â€™Ã©Â¦â€“Ã©Â ËœÃ¨Å“â€š Ã¥Â¤Â§Ã¥Â¾â‚¬Ã§â€Å¸Ã£Æ’Â»Ã£â€šÂ±Ã£Æ’â€žÃ£â€šÂ¤Ã£â‚¬Å“Ã§Âµâ€ Ã¥Å“Â°Ã§?â€žÃ£?Å¸Ã£?Â¡Ã£â‚¬Å“ OST,9106,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã©Â¢Â¨Ã£?Â®Ã¨Â°Â·Ã£?Â®Ã£Æ’Å Ã£â€šÂ¦Ã£â€šÂ·Ã£â€šÂ«Ã£Æ’Â»Ã£â€šÂµÃ£â€šÂ¦Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Ë†Ã£Æ’Â©Ã£Æ’Æ’Ã£â€šÂ¯Ã£â‚¬Å’Ã£?Â¯Ã£â€šâ€¹Ã£?â€¹Ã£?ÂªÃ¥Å“Â°Ã£?Â¸Ã¢â‚¬Â¦Ã£â‚¬?,9146,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die schÃ¶nsten Lieder der Disney-Club-Serien,9145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tubes TÃ©lÃ© AnnÃ©es 80 (Vol 1),9144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trudno nie wierzyc w nic,9141,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HistÃ³ria Antiga,9120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃ¥ eventyr med Plet,9119,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Revista Jovem PAN www.tanynel.ezdir.net,9117,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,4Â¿Ã¹ Ã€ÃŒÂ¾ÃŸÂ±Ã¢ O.S.T,9115,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cirque Eloize,9114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Original Cast - Tanz Der Vampire (CD 2),9108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Solarize,9107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ°Ã£Æ’ÂªÃ£Æ’Â¼Ã£Æ’Â³Ã£â€šÂ°Ã£Æ’ÂªÃ£Æ’Â¼Ã£Æ’Â³ Vocal Album Ã©?ËœÃ£Æ’Å½Ã©Å¸Â³Ã£Æ’Â©Ã£Æ’?Ã£Æ’Â¼,9097,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fablernas VÃ¤rld - Simma Lungt Del 1,9299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â¿ËœÃ£Æ’Â¬Ã£Æ’Å Ã¨?â€° Forget-me-Not Ã£â€šÂªÃ£Æ’ÂªÃ£â€šÂ¸Ã£Æ’Å Ã£Æ’Â«Ã£â€šÂµÃ£â€šÂ¦Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Ë†Ã£Æ’Â©Ã£Æ’Æ’Ã£â€šÂ¯&Ã£â€šÂ¢Ã£Æ’Â¬Ã£Æ’Â³Ã£â€šÂ¸DISC2,9093,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Forro de comeÃ§o ao fim,9092,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CDÃ£Æ’â€°Ã£Æ’Â©Ã£Æ’Å¾ Ã£?Â¨Ã£??Ã£â€š?Ã£??Ã£Æ’Â¡Ã£Æ’Â¢Ã£Æ’ÂªÃ£â€šÂ¢Ã£Æ’Â« Ã£Æ’â€˜Ã£Æ’Â¼Ã£Æ’Ë†3 featuringÃ§â€°â€¡Ã¦Â¡?Ã¥Â½Â©Ã¥Â­?,9091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Shirat HaZinzana,9072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Per-Colle Ã£Æ’â€°Ã£Æ’Â©Ã£â€šÂ´Ã£Æ’Â³Ã£â€šÂ¹Ã£Æ’Â¬Ã£â€šÂ¤Ã£Æ’Â¤Ã£Æ’Â¼Ã¨â€¹Â±Ã©â€ºâ€žÃ¤Â¼?Ã¨ÂªÂ¬II Disc2,9070,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£?Â¨Ã£â€šâ€°Ã£?â€žÃ£?â€šÃ£â€šâ€œÃ£??Ã£â€šâ€¹Ã£Æ’?Ã£Æ’Â¼Ã£Æ’Ë†'S Ã£â€šÂµÃ£â€šÂ¦Ã£Æ’Â³Ã£Æ’â€°Ã£â€šÂ¹Ã£Æ’â€ Ã£Æ’Â¼Ã£â€šÂ¸,9065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor Do Bang Bang Ã€ Italiana,9057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Grosse Emission (ComÃ©die),9055,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â½Ã–Â¨Ã“Â·RÂ§Ãš,9038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃˆÂ¥Ã€ÃšÂµÃ»Â¶Ã³Ã‡ÃÂ´Ã‚ Â¾Ã®Â¸Â°Ã€ÃŒÂµÂ¿Â¿Ã¤ 02,9030,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â»Â³Ã‹ÃœÃ€ÂµÃ‡Â·/Â¶Ã¤Â²ÃÃ€Ã»Ã‰Ã·Â¥Ã–Â¥Ã©Â¥Â¤Â¥Â¬Â¡Â¼ BGM,9029,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lorenzo's Oil,9160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‡Ã  Ã¤Ã¢Ã³Ã¬Ã¿ Ã§Ã Ã©Ã¶Ã Ã¬Ã¨,9165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€˜Ã£Æ’â€ Ã£â€šÂ£Ã£â€šÂ·Ã£â€šÂ¨Ã£?ÂªÃ£?Â«Ã£â€šÆ’Ã£â€šâ€œÃ£?â€œ Original Sound Tracks DISC2,9167,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,National Lampoon's \Animal House\,9169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹ÃŒÂ¼ÃºÂ°Ã¼Â¿Â· ÂµÂ¿Â¹Â°Â¿Ã¸,9296,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Original Film Soundtracks: The Best of Godzilla 1984-1995,9295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹ÃŒÂ¼ÃºÂ°Ã¼ Â¿Â· ÂµÂ¿Â¹Â°Â¿Ã¸,9287,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le mÃ©pris,9280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HelmiÃ¤ Ja Sikoja,9274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã§Ã³Ã¬Ã­Ã»Ã© Ã„Ã¥Ã­Ã¼ Ã¨Ã«Ã¨ Ã†Ã¥Ã­Ã¨Ã²Ã¼Ã¡Ã  Ã”Ã¨Ã£Ã Ã°Ã®,9269,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,3Ãƒâ€”3 EYES Ã§Â¬Â¬Ã¥Â¼?Ã§Â«Â ,9252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ Ã­Ã¤Ã¨Ã²Ã±ÃªÃ¨Ã© ÃÃ¥Ã²Ã¥Ã°Ã¡Ã³Ã°Ã£ (Ã¬Ã³Ã§Ã»ÃªÃ  Ãª ÃªÃ¨Ã­Ã®Ã´Ã¨Ã«Ã¼Ã¬Ã³),9242,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1999 Â¤ÃÂ­Ã“Â¤HÂ¡EÂºtÂ°Ã›Â·|- [Disc Two],9235,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra PasiÃ³n - Vol. 2,9230,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â»ÂªÃˆÃ‹ÂµÃ§Ã“Â°Ã’Ã´Ã€Ã–ÂµÃ¤Â²Ã˜,9215,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃ©lange de couleurs,9211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€žÃ£â€šÂ¤Ã£Æ’Â³Ã£Æ’â€œÃ£Æ’Â¼ PARADISE 5th. Anniversary,9210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’?Ã£Æ’Â³Ã£â€šÂ­Ã£Æ’Æ’Ã£â€šÂ­Ã£Æ’Â¼Ã£â€šÂºÃ£Æ’Â»Ã£Æ’Â¡Ã£Æ’Â­Ã£Æ’â€¡Ã£â€šÂ£ 2,9209,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¡Ã±ÃœÃ®Ã¥Ã­Ã¥Ã² Ã¥Ã©ÃªÃ¼Ã­Ã¥Ã²,9207,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ist das alles ? (13 HÃ¶hepunkte mit den Ã„rzten),9202,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Knight's Tale (CorazÃ³n de Caballero),9195,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’Â¡Ã£â€šÂ¬Ã£â€šÂ¾Ã£Æ’Â¼Ã£Æ’Â³23 Ã£â€šÂªÃ£Æ’ÂªÃ£â€šÂ¸Ã£Æ’Å Ã£Æ’Â«Ã£Æ’Â»Ã£â€šÂµÃ£â€šÂ¦Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Ë†Ã£Æ’Â©Ã£Æ’Æ’Ã£â€šÂ¯,9190,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃƒÂ¹Â¹Ã¸Ã‚Â° Â¿Â¹Â¼Ã¶ Ã€ÃŒÂ¾ÃŸÂ±Ã¢ - Â°Ã¸Â»Ã½Â¾Ã–,9183,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Eisenherz,9179,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AxÃ© Bahia 2001,9174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Star Trek Voyager - \Caretaker\,9173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,OST Elia Kazan's America America,9170,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,year,Check that year is between 1950 and 2030.,0,ASIN: B00005RCCR,4461,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,The Bionic Milk Plant MILK2B252\nwww.bionicmilk.com\n,4586,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1902,5436,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,id,Check that the length of 'id' is 6 characters.,0,10000,0,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10253,2456,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10240,2332,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10231,2249,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10230,2239,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10133,1293,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10119,1158,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10107,1041,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10102,990,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10085,826,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10064,620,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10061,592,lambda x: len(x)==6
Column,year,Check if year is numeric.,1,Boston Symphony Orchestra / Seiji Ozawa,8980,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check that year is between 1950 and 2030.,0,ASIN: B00000610F,5565,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check if year is numeric.,1,Philharmonia Orch/Chorus (Giulini),8851,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,cd s2k 48225,8772,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,\tOslo Sinfonietta (6-8),8758,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Classical,8645,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,YEAR: 2002,8575,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Paul RhodClassic Sketches (Disc 1 of 2),8557,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Hungariton White Label HRC 140\nHaydn Symphony No. 55 in E flat Majo,8543,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,all lyrics by\nIra Gershwin,8481,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Mome,8447,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,"Roland PÃ¶ntinen, piano\nRecorded May 2",8375,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Herbert von Karajan,8348,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,id,Check that the length of 'id' is 6 characters.,0,10293,2836,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10301,2913,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10312,3017,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10314,3038,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11174,9324,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11166,9323,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11150,9322,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11125,9321,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11088,9320,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11008,9319,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11006,9318,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10986,9317,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10983,9316,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10938,8938,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10833,7919,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10785,7464,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10715,6802,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10714,6791,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10652,6224,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10628,6002,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10578,5539,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10449,4343,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10414,4001,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10383,3705,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10368,3558,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10361,3492,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,10320,3096,lambda x: len(x)==6
Column,year,Check if year is numeric.,1,Lahti SO/ Ulf Soderblom,8312,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Classical,8299,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Firoenza Cossotto,8287,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check that year is between 1950 and 2030.,0,Hungariton White Label HRC 140\nHaydn Symphony No. 55 in E flat Majo,8543,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,all lyrics by\nIra Gershwin,8481,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Mome,8447,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,2077,8426,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,"Roland PÃ¶ntinen, piano\nRecorded May 2",8375,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Herbert von Karajan,8348,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1950,8341,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Lahti SO/ Ulf Soderblom,8312,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Classical,8299,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Firoenza Cossotto,8287,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,199,8171,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,99,7983,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Frank Vignola g,7509,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,999,7380,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1111,7197,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1197,7052,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,60,6782,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Produced by Ron & Howard Albert,6648,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,"Paris, Palais Omnisports Bercy",6597,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,-),6160,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,ASIN: B00005RCCT,6102,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,ASIN: B000051ZMF,6099,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,9999,5899,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,197,5755,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1949,8507,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Paul RhodClassic Sketches (Disc 1 of 2),8557,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check if year is numeric.,1,Frank Vignola g,7509,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check that year is between 1950 and 2030.,0,YEAR: 2002,8575,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check if year is numeric.,1,Produced by Ron & Howard Albert,6648,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,"Paris, Palais Omnisports Bercy",6597,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,-),6160,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,ASIN: B00005RCCT,6102,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,ASIN: B000051ZMF,6099,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,ASIN: B00000610F,5565,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,The Bionic Milk Plant MILK2B252\nwww.bionicmilk.com\n,4586,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,ASIN: B00005RCCR,4461,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,"\nClassical Algerian Andalusian Music""",2667,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,YEAR: 1952,1618,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,piano,1112,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check if year is numeric.,1,Audio CD Program,50,"def check_year_is_numeric(x: Any) -> bool:
    """"""Check if year is numeric.""""""

    try:
        if not str(int(x)).isnumeric():
            return False
    except Exception:
        return False
    return True
"
Column,year,Check that year is between 1950 and 2030.,0,1943,9050,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1947,9036,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1814,9017,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1691,8991,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Boston Symphony Orchestra / Seiji Ozawa,8980,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Philharmonia Orch/Chorus (Giulini),8851,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1947,8835,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,cd s2k 48225,8772,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,\tOslo Sinfonietta (6-8),8758,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,1749,8698,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,year,Check that year is between 1950 and 2030.,0,Classical,8645,"def check_year_range_is_valid(x: Any) -> bool:
    """"""Check that year is between 1950 and 2030.""""""

    try:
        int(x)
    except Exception:
        return False

    if int(x) > 1950 and int(x) < 2030:
        return True
    else:
        return False
"
Column,title,Check for *possibly* invalid symbols.,0,Ã€Ã®Ã„Ãˆ-Ã“Â°ÃŠÃ“Â¸Ã¨Ã‡ÃºÂ¾Â«Ã‘Â¡,9027,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³l og MÃ¡ni,9026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,School Daze,9022,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chris Sheppard's \Have A Nice Trip\,8088,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Art de Maurice AndrÃ© CD4,8307,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les GÃ©nies Du Classique: Lully & Charpentier,8293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,JamaÃ¯que,8239,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EssiÃ©dubÃ£o,8223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FranÃ§afrique,8200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Time Has Come...\ the best of Ziggy Marley and the Melody Makers,8179,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ozomatli,8151,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ³Ã¡Ã¥Ã¦,8137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Limelite, Luv & Niteclubz",8129,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ozone-Project 7 (CD2),8127,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’Â¦Ã£Æ’Â¼Ã£Æ’Å¸Ã£Æ’Â³Ã£Æ’Â»Ã£â€šÂ³Ã£Æ’Â¬Ã£â€šÂ¯Ã£â€šÂ·Ã£Æ’Â§Ã£Æ’Â³ Disc 2,8099,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chillout in Ibiza 5 CD 2,8086,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Aren lezen cd3,8486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Abduction - Gee Moore (Ibiza),8085,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Kleiner HÃ¤lfte der Welt,8083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fresh Jazz Vibes,8073,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Budu zhdat'...,8068,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Love D12\co Diamonds Vol. 3,8062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nuova Era & Meditazione Vol. 28,8058,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Piosenki Nieprzyzwoite,8052,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Inca - Aux Sources Du MystÃ¨re,8044,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Å“Â±Ã¥Â¤?Ã£â€šâ€™Ã©?Å½Ã£?Å½Ã£?Â¦Ã§â„¢Â½Ã§Â§â€¹Ã£?Â¸,8031,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’?Ã£Æ’Â¥Ã£Æ’Â¼Ã£Æ’ÂªÃ£Æ’Æ’Ã£Æ’â€”Ã£Æ’Â»Ã£â€šÂ¬Ã£Æ’Â¼Ã£Æ’â€¡Ã£Æ’Â³ Disc 2,8022,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 20,8020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃŸ-Edition Vol. 23,8321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vladimir Horowitz II,8327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weihnachten mit den Wiener SÃ¤ngerknaben,8328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassiska mÃ¤sterverk CD1,8335,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Novecento 02 - Incontro con il Jazz,8477,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,OrphÃ©e ed Euridice,8468,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃ¶nsten Lieder der Flippers,8463,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Konzerte fuer Cembalo Solo Vol. 2,8462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹ÃŒÂ¼Ã’ (CD 09-Â¿Â¹Â¼ÃºÂ°Â¡Ã€Ã‡ ÃƒÃŠÂ»Ã³),8452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,W.A. Mozart: Klavierkonzert Nr.24 c-moll KV491 + weiteres,8451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ Ã« ÃŠÃ®Ã°Ã®Ã«Ã¿ Ã¢Ã Ã«Ã¼Ã±Ã  (CD2),8448,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Concierto  PresentaciÃ³n,8439,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã…Â¬Â·Â¡Â½Ã„Ã€Â» ÃÃÂ¾Ã†Ã‡ÃÂ¼Â¼Â¿Ã¤,8435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥|Â¤Ã¢ÃpÂ¼uÂ¤Â§Â¥Â´Ã‚Â½Â­ÂµÂ¼Ã–Â²Â°,8432,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ® Ã¿ Ã‚Ã Ã± Ã¢Ã±Â¸-Ã²Ã ÃªÃ¨ Ã«Ã¾Ã¡Ã«Ã¾...,8424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¼hlingsstimmen,8404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,K 476 \Elvira Madigan\ / K 358 \Haffner\ / K136 \Salzburg,8403,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"GÃ¶tterdÃ¤mmerung, CD1",8400,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Bach Piano Concertos - Eschenbach, Frantz, Oppitz, Schmidt",8398,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart / Hoorn concerten,8393,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Waltzes Complete,8388,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassik fÃ¼r Babys,8381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der fliegende HollÃ¤nder,8374,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,English suite No. 1 Â· Tocattas,8370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GÃ¶tterdÃ¤mmerung CD 2,8369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Strauss: Most Famous Waltzes, Polkas and Marches Vol. 2",8366,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart (Karajan) - KV 287 & KV 525,8348,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‡Ã¢Â¸Ã§Ã¤Ã­Ã®Ã¥ Ã­Ã¥Ã¡Ã®,8018,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥â€¡?Ã£?Â¦Ã£?Â¤Ã£?â€žÃ£?Å¸Ã§â€“Â¾Ã¨ÂµÂ°Ã¨â‚¬â€¦,8007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bar Itaca Ibiza-BPM_HOUSE,7985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Parlez vous franÃ§ais,7707,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy 'Bout a Saxophone,7694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dixie-LÃ¤ndler,7691,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Neo Standard (living jazz),7684,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Night Jazz Fantasy Vol. 1,7674,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Till Och FrÃ¥n En BlÃ¥ Man (Cd 2),7666,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Contigo AprendÃ­ CD2,7634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â¤Â§Ã©Å â‚¬Ã¥Â¹â€¢,7624,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Great Soul Hits\,7612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Seu Ãšltimo Show Gravado Ao Vivo,7607,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Â¿Â¼ Ã£â‚¬Å“ Ã¦Â­Â¦Ã¦Âºâ‚¬Ã¥Â¾Â¹Ã£Æ’?Ã£Æ’Æ’Ã£Æ’â€”Ã£â€šÂ½Ã£Æ’Â³Ã£â€šÂ°Ã£â€šÂ¹,7588,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â³ÃŒÂ¨ÃŽÂ¤ÃÂ±Â¡Â¤H,7581,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£?â€žÃ£â€šâ€œÃ£?Å¸Ã£â‚¬Å“Ã£?Â¿Ã£?Â£Ã£?â€”Ã£â€šâ€¡Ã£â€šâ€œ,7562,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¸Ã°Â¸Â§,7559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bluella: Ella Fitzgerald Sings the Blues,7546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King Clarentz,7528,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Summertime Jazz (Jazz & TÃ¦Ã¡Ã¦ - 64),7521,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Wanna Have More Fun -12Ã£â€šâ€º Version Collection,7518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Sexy,7515,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,w-inds.Ã£â‚¬Å“THE SYSTEM OF ALIVE,7481,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¦nÂ·QÂ¦nÂ¦nÂ·RÂ§A,7480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Com AÃ§ucar Com Afeto,7455,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TheresÂ´s Nothing Like This,7445,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã…]Â°Â­ÂªÂºÂ±Â¡Â¸Ã–,7419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,7705,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Harvest Jazz And Blues Festival (Fredericton, NB, Canada)",7716,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 15,7981,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Angel Sings Janis \Live\,7717,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zakryv glaza,7979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,itÂ´s all about the stragglers,7970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los NÃºmeros 1 de FLAIX FM / CD 3,7954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz n. 45,7951,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿... o fue un sueÃ±o? (VersiÃ³n Remasterizada),7932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,zeig mir dein gesicht,7930,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kdyz muz se zenou snida,7928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DÃ­zimo Ã© Partilha,7904,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã©Å¸Â³Ã¦Â¥Â½Ã©Å â‚¬Ã¥ÂºÂ§,7899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Enigma CLUB - ÃÃ®Ã·Ã¼ Ã‚Ã Ã²Ã¨ÃªÃ Ã­Ã ,7874,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ministry Presents... Ibiza Chillout,7869,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Âµâ€šÃ£â€š?Ã£â€šâ€°Ã£?ÂªÃ£?â€žÃ¦Â­Å’,7864,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Oz Factor,7855,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦ÂµÂªÃ¦Â¼Â«,7850,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÂºÃ±ÂµÃ‘Â±Ã¢Â´Ã‚ Ã‡ÃÂ´ÃƒÃ€Ã‡ ÃÃ£,7844,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â²Â»ÃƒÃ·ÃÃ‹,7811,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rendez-Vous (Disque 2/2),7803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â³Â³Ã»F,7798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¤um mit mir,7794,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A FÃ¡brica Do Poema,7788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Di Doido Ã© Pouco,7780,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â°ÃªÂ»yÂ±Ã†Â¦Ã¦Âº]Â¤T,7772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ella Fitzgerald CD2,7726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gershwin on Screen I: \Girl Crazy\ & \Rhapsody In Blue\,8481,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart - Late Symphonies (2-3) - Nr.29,38,39",8497,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O'Zone:  Noize of A Subculture,9019,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn, La CreaciÃ³n (02)",8860,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Musique barroque Ã  la Royale Audience de Charcas (BolÃ­via),8906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tres Piezas EspaÃ±olas - Sonata Giocosa,8895,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mass in C kajor, K. 317 \Coronation\ - Missa solemnis op. 123 CD1",8893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart, Vivaldi, Luciani, Biber",8891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlockflÃ¶tenkonzerte,8890,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â­ÂµÂ¼Ã–ÂºÃÂ³ÃµÂ¬yÂ¦Ã¦ÂªÃ·Â¦Â±(Â¥|),8889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Orgelkonzerte der Klassik,8887,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Jungfrau, dein schÃ¶n Gestalt (Das deutsche Chorlied um 1600)",8885,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Od Samice Do Jazza,8881,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Suzuki Violin School,8880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart Symphonies #29, 35, & 40 - Marriner & Academy of St. Martin-in-the-Fields",8861,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Vol. 68-Bach,Franck,Liszt,Debussy,Villa-Lobos",8859,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,De Beste OperettemelodieÃ«n CD 1,8520,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart: The Late Symphonies 21-41 Disc 2,8858,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Wolfgang Amadeus Mozart/Don Giovanni (Highlights),8854,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Gran misa en do menor (LÃ¡ki, Denes, Equiluz, Holl-Harnoncourt)",8840,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azzuri,8832,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ClassSet Millenium 07 - 1865 - 1880 - Romantischer Klassizismus und Nationalmusik,8824,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ¢Ã£Æ’Â«Ã£Æ’?Ã£Æ’Â Ã¦Æ’â€¦Ã¥Â Â±Ã£?ÂªÃ£?â€” (2004/02/15 22:33:24),8809,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KantemiroÃ°lu EdvarÃ½ndan 2,8806,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Slovenska pravoslavna duhovna muzika,8802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Donizetti - Lucia di Lammermoor [3of3],8798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Thomanerchor und Gewandhausorchester Leipzig / Messe h-moll BWV 232 / Live-Aufnahme v. 28.7.2000 Thomaskirche Leipzig,8793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€Ã£â€šÂ¢Ã£Æ’Å½Ã£Æ’Â»Ã£Æ’Â¡Ã£Æ’Æ’Ã£â€šÂ»Ã£Æ’Â¼Ã£â€šÂ¸Ã£â‚¬Å“Ã£?â€šÃ£â€šÅ Ã£?Å’Ã£?Â¨Ã£?â€ Ã£â€šâ€™Ã¨Â¨â‚¬Ã£?â€žÃ£?Å¸Ã£??Ã£?Â¦Ã£â‚¬Å“,8791,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Vladimir Horowitz - Brahms, Beethoven",8908,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart - Klaviersonaten 15-18,8913,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Donizetti - La favorita CD2,8915,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"HÃ¤ndel, George Frideric, Israel in Egypt, Kings Collelge Choir CambridgeHÃ¤ndel CD 1",8924,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pulcinella - La consagraciÃ³n de la primavera,9009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Aulos-BlÃ¤serquintett spielt Danzi,Klughardt,Ravel,Heckel",9007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haydn: Sch pfungsmess - Mozart: Spaur-Mess,8998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets Op 74 Nos. 1 - 3    KodÃ¡ly Quartet,8996,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Clavier bien TempÃ©rÃ© (1) (Gustav Leonhardt),8990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BlÃ¤ser spielen Bach,8985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã•Ã -ÃÃ -Ã˜Ã®!,8984,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Chansons FranÃ§aises, Vol. I",8979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Festliche PanflÃ¶te zu Weihnachten,8975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amadeus - The Essentail Mozart Collection,8972,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Lerchenquartett- (Hagen Quartett), Dissonanzenquartett (Emerson String Quartet), Harfen (Melos Quar",8971,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Piano Works CD 09. Mazurkas (1),8959,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chopin: Mazurkas (Disc 1),8958,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Saebeltanz - Sarbe Dance,8954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mi BeBÃ©,8952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart Requiem,8948,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Suite \Cator et Pollux\ - 3 Fantasias,8939,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tributa Ã  MÃºsica Popular Brasileira,8937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ©nitienne,8936,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'incoronazione di Poppea,8931,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Wiener Residenzorchester,8929,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Il Gregoriano \Mille anni di musica\ - CD 1 - Culto e culture,8928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart Effect 5,8925,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Astor Piazzolla  -  El Tango,8789,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazil bossa e samba (CD2),8785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trio Henry - intÃ©grale,8781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Lelkem hangjÃ¡t titkon vidd haza\,8658,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brandenburgische Konzerte Nr 4-6,8649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Waltz and Polkas,8648,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 Jahre Ã–sterreich,8646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vier letzte lieder,8641,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Famous Waltzes,8630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsica en Daroca,8625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La BohÃ¨me - CD2,8620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Constanzo Festa - La Spagna,8613,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤Ã‘Â³Â»ÂªÂºÂ¤Ã«Â®QÂ°Ãš,8612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â³Ã«Â·Â¡Ã€Ã‡ Â³Â¯Â°Â³ Ã€Â§Â¿Â¡ Â¶ÃŸÂ´Ã‚ ÂºÂ°,8608,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klassische HÃ¶hepunkte,8596,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart - Symphonies,8588,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ±Ã–ÃÃ‡Ã™Ã”Ã CD2-1,8586,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart,8577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Johann StrauÃŸ-Edition Vol. 46,8572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Haydn: The \London\ Symphonies, Vol. 2, CD2",8552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kamermuziek vol.2,8547,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart: Streichquartette KV 465, 490, 80",8546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrÃ¤umerei,8545,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hungarian Chamber Orchestra5 in E flat major \Schoolmaster\,8543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les Grands Classiques au CinÃ©ma,8541,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die vier Jahreszeiten des kleinen BÃ¤ren,8531,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Nocturnes , Polonaises, Mazurkas",8526,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'intÃ©grale des sonates pour flÃ»te (CD2-2),8657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Journey Home Â¤sÂ¸yÂ¤WÂªÂºÂ®a,8659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Scala HÃ¶rtip-CD,8778,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Star of the Magi (Suzie LeBlanc, Daniel Tylor, Voix Humaines)",8661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,100 jaar Nederlandse zangkunst CD6 (Oratorium 2 en liederen met orkest),8775,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CD 13 - frÃ©dÃ©ric chopin,8774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"W.A. Mozart, Klavierwerk III",8770,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mozart Symphonien,8764,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jozsef RÃ©ti,8763,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Heroes (Arias by Handel, Hasse, Gluck, Mozart)",8757,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥Ã¬Â«Â½Â¡EÂºÂ¿Â¾Â·  Eva Marton  Â¤kÂ°ÂªÂ­ÂµÂ¡EÂ½ÃÂµ^Â¡EÂ¬Ã›Â¬MÂ¥ÃÂ½Ã·  New York Harp Ensemble,8751,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Festival Strings Lucerne / Vivadi - W.A. Mozart,8747,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Young Wolfgang Amadeus Mozart,8746,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TroisiÃ©me livre de piÃ¨ces de clavecin,8744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,13 PrÃ©ludes,8743,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sacre Du Printemps & Firebird (Pierre Boulez),8742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Valsas e DanÃ§as ClÃ¡ssicas,8734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mazzini canta Battisti,8727,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Mozart, Symphonies Nos. 13, 14 & 20",8726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Homenaje a la Ã“pera - Norma,8722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C. Stamitz: Clarinet Concertos - Vol. II,8696,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Klavierwerke Babette hierholzer,8693,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haydn: The \Paris\ Symphonies - CD1,8682,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IntÃ©grale des Quatuors CD1,8679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Sinfonische TÃ¤nze, Elegische Melodien, Peer Gynt Suiten",8667,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"MatthÃ¤us-Passion (Akademie fÃ¼r alte Musik Berlin, CD 2)",8666,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Georg Friedrich HÃ¤ndel - Der Messias (AuszÃ¼ge in engl. Sprache),8665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,id,Check that the length of 'id' is 6 characters.,0,11190,9325,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11423,9327,lambda x: len(x)==6
Column,title,Check for *possibly* invalid symbols.,0,Verhaal zonder woorden,86,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,id,Check that the length of 'id' is 6 characters.,0,7794,9614,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7975,9625,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7934,9624,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7923,9623,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7920,9622,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7918,9621,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7898,9620,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7869,9619,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7859,9618,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7852,9617,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7847,9616,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7802,9615,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7778,9613,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7622,9600,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7769,9612,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7750,9611,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7731,9610,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7722,9609,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7719,9608,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7708,9607,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7707,9606,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7671,9605,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7664,9604,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7653,9603,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7644,9602,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7977,9626,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7980,9627,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8029,9628,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8043,9629,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8349,9652,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8344,9651,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8312,9650,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8311,9649,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8306,9648,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8301,9647,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8297,9646,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8291,9645,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8274,9644,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8265,9643,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8260,9642,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8234,9641,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8224,9640,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8151,9639,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8140,9638,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8135,9637,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8131,9636,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8120,9635,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8118,9634,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8114,9633,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8097,9632,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8063,9631,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8060,9630,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7633,9601,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7614,9599,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11455,9328,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7170,9559,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7344,9570,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7341,9569,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7311,9568,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7291,9567,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7288,9566,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7237,9565,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7223,9564,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7211,9563,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7201,9562,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7199,9561,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7192,9560,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7161,9558,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7606,9598,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7134,9557,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7123,9556,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7121,9555,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7094,9554,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7087,9553,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7075,9552,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7072,9551,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7064,9550,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7061,9549,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7037,9548,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7008,9547,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7346,9571,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7347,9572,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7350,9573,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7361,9574,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7605,9597,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7604,9596,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7599,9595,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7581,9594,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7563,9593,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7562,9592,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7549,9591,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7542,9590,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7540,9589,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7525,9588,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7517,9587,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7515,9586,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7514,9585,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7483,9584,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7469,9583,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7460,9582,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7429,9581,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7428,9580,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7405,9579,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7404,9578,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7367,9577,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7365,9576,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,7363,9575,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8364,9653,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8368,9654,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8370,9655,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9193,9723,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9485,9734,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9450,9733,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9421,9732,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9412,9731,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9348,9730,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9333,9729,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9327,9728,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9278,9727,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9257,9726,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9229,9725,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9209,9724,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9189,9722,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8410,9656,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9172,9721,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9161,9720,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9149,9719,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9130,9718,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9115,9717,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9114,9716,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9083,9715,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9076,9714,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9068,9713,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9063,9712,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9060,9711,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9486,9735,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9489,9736,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9542,9737,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9557,9738,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9876,9761,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9868,9760,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9863,9759,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9838,9758,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9811,9757,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9807,9756,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9798,9755,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9793,9754,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9790,9753,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9777,9752,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9762,9751,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9738,9750,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9713,9749,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9695,9748,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9694,9747,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9678,9746,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9669,9745,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9662,9744,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9640,9743,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9637,9742,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9614,9741,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9601,9740,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9588,9739,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9038,9710,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9019,9709,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,9008,9708,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8668,9681,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8663,9679,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8659,9678,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8640,9677,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8636,9676,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8630,9675,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8609,9674,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8592,9673,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8578,9672,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8559,9671,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8538,9670,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8537,9669,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8536,9668,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8526,9667,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8507,9666,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8494,9665,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8473,9664,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8464,9663,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8453,9662,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8445,9661,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8430,9660,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8424,9659,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8423,9658,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8422,9657,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8664,9680,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8683,9682,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8995,9707,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8717,9683,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8990,9706,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8949,9705,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8919,9704,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8917,9703,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8908,9702,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8901,9701,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8891,9700,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8890,9699,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8888,9698,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8870,9697,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8859,9696,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8843,9695,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8831,9694,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8823,9693,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8805,9692,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8795,9691,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8794,9690,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8779,9689,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8778,9688,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8759,9687,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8754,9686,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8725,9685,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,8718,9684,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6992,9546,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6969,9545,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6955,9544,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3793,9395,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4179,9406,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4178,9405,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4145,9404,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4140,9403,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4124,9402,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4114,9401,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4108,9400,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3990,9399,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3976,9398,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3931,9397,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3851,9396,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3792,9394,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4709,9435,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3757,9393,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3722,9392,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3710,9391,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3678,9390,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3670,9389,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3539,9388,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3529,9387,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3517,9386,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3475,9385,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3395,9384,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3383,9383,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4184,9407,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4190,9408,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4266,9409,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4271,9410,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4676,9433,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4631,9432,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4613,9431,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4601,9430,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4588,9429,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4586,9428,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4563,9427,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4520,9426,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4508,9425,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4490,9424,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4481,9423,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4451,9422,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4441,9421,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4419,9420,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4395,9419,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4384,9418,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4358,9417,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4348,9416,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4306,9415,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4297,9414,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4292,9413,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4291,9412,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4282,9411,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3356,9382,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3296,9381,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3222,9380,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2530,9353,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2427,9351,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2418,9350,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2406,9349,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2367,9348,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2366,9347,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2317,9346,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2252,9345,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2188,9344,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2187,9343,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2139,9342,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2110,9341,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2026,9340,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2004,9339,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1884,9338,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1866,9337,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1858,9336,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1838,9335,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1828,9334,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1823,9333,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,1818,9332,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11538,9331,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11531,9330,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,11530,9329,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2440,9352,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2571,9354,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3215,9379,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2577,9355,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3192,9378,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3185,9377,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3159,9376,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3155,9375,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3134,9374,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3125,9373,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3123,9372,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3106,9371,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3096,9370,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,3086,9369,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2957,9368,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2950,9367,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2891,9366,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2890,9365,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2823,9364,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2819,9363,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2813,9362,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2807,9361,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2781,9360,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2771,9359,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2707,9358,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2619,9357,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,2581,9356,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4684,9434,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4710,9436,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6952,9543,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6374,9504,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6663,9515,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6620,9514,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6568,9513,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6562,9512,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6547,9511,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6506,9510,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6423,9509,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6413,9508,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6398,9507,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6382,9506,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6377,9505,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6358,9503,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4732,9437,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6354,9502,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6339,9501,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6316,9500,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6314,9499,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6272,9498,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6246,9497,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6210,9496,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6174,9495,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6162,9494,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6116,9493,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6102,9492,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6665,9516,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6690,9517,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6695,9518,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6716,9519,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6950,9542,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6948,9541,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6944,9540,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6926,9539,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6925,9538,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6922,9537,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6919,9536,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6858,9535,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6855,9534,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6811,9533,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6802,9532,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6798,9531,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6788,9530,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6776,9529,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6771,9528,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6762,9527,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6761,9526,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6756,9525,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6741,9524,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6740,9523,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6737,9522,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6722,9521,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,6719,9520,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5988,9491,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5959,9490,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5921,9489,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5360,9462,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5289,9460,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5238,9459,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5205,9458,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5204,9457,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5185,9456,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5122,9455,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5099,9454,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5052,9453,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5025,9452,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5010,9451,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4988,9450,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4975,9449,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4959,9448,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4911,9447,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4905,9446,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4895,9445,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4886,9444,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4876,9443,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4851,9442,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4843,9441,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4804,9440,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4774,9439,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,4733,9438,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5324,9461,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5371,9463,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5912,9488,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5392,9464,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5889,9487,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5867,9486,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5835,9485,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5830,9484,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5782,9483,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5780,9482,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5776,9481,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5754,9480,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5746,9479,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5731,9478,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5681,9477,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5664,9476,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5657,9475,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5577,9474,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5574,9473,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5549,9472,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5542,9471,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5477,9470,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5458,9469,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5443,9468,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5426,9467,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5418,9466,lambda x: len(x)==6
Column,id,Check that the length of 'id' is 6 characters.,0,5394,9465,lambda x: len(x)==6
Column,title,Check for *possibly* invalid symbols.,0,Â©pÂ¬OÂ§ÃšÂ¥ÃƒÂ»Â·ÂªÂºÂ¬KÂ¤Ã‘,7403,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rymovani o zivote,7402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â·RÂ±Â¡Â³Â´Â¨Ã€,7398,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jos Vain TietÃ¤isit,1805,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹Ã™Â¶Ã·Ã€Ã‡ Â¼Ã’Â¸Â® (Windsongs),1893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lillebror och Karlsson pÃ¥ taket,1880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die Playback-CD zum Songbook,1872,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SkÃ¦rmtrolden Hugo,1862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SoirÃ©e Cocktail,1861,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã€Ã¥Ã‡ÃµÃ€Ã§.ÃÃ¶Â¸Ã­Ã‡Ã¶-Â¼Ã’Â¸Â®Â¿Â¤,1853,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ãfrica Gerais,1849,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les nouveaux HÃ©ros,1842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Naveky zustane cas,1838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy,1826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ritter Rost und Prinz Protz,1822,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Walzer der Liebe,1801,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LÃ¶cher (Die Geheimnisse von Green Lake),1729,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Mudlark\,1798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Patricia Gonzalez,1797,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TÃº CambiarÃ¡s,1796,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Poker De Corazones 2,1789,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Morot, Raka vÃ¤gen till dig",1787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,the ibizarre ambient collection CD 1,1769,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KindertrÃ¤umeland - Ich bin der kleine Zappelmann,1768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Freezone 2: Variations On A Chill - CD 1,1767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,12\ 80's Dance Groove Classics (CD 2),1762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CD audio personnalisÃ©,1759,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzica la Tarantula,1744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy For You,1894,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der Schatz im Silbensee,1901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ­,1905,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Paiez Eshghe,1908,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lorenzo Perosi: Missa Pontificalis - Missa Secunda Pontificalis,2105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Melhor de LembranÃ§as,2100,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã–demarkens Son,2084,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weerzien In Panama - Disc 2,2080,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¼Ã’Ã‡Ã¢ Special,2072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Ã®Ã¯ Ã±Ã¥Ã«Ã¸,2062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schlager Ã  la carte,2054,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Greatest,2050,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La mÃ©moire des boÃ®tes Ã  chansons (Disque 2),2049,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lei Ã¨....,2042,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HipHop fÃ¼r Angestellte,2037,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les Plus Belles Chansons d'Amour Ã  la FlÃ»te de Pan,2033,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£?Å Ã£â€šÂ¸Ã£Æ’Â£Ã©Â­â€Ã¥Â¥Â³BAN2 CDÃ£??Ã£â€šâ€°Ã£?Â¶ Ã£??Ã£?Â®3 Ã£?Å Ã£â€šÂ¸Ã£Æ’Â£Ã©Â­â€Ã¥Â¥Â³Ã£Æ’Å¸Ã£Æ’Â¥Ã£Æ’Â¼Ã£â€šÂ¸Ã£â€šÂ«Ã£Æ’Â«Ã£Æ’Â»Ã£Æ’Â´Ã£â€šÂ©Ã£Æ’Â¼Ã£â€šÂ«Ã£Æ’Â«Ã£â€šÂ³Ã£Æ’Â¬Ã£â€šÂ¯Ã£â€šÂ·Ã£Æ’Â§Ã£Æ’Â³!!,2021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los Petersellers contra la amenaza del Dr. Thedio,2017,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Emilio JosÃ© Lorenzo SantamarÃ­a y otros inimitables de los 70s,2013,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,20Â¥@Â¬Ã¶Â¥xÂ»yÂ¸gÂ¨Ã¥Â¹ÃªÂ¿Ã½5-1,2009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£?Â¾Ã£?Â»Ã£â€š?Ã£?Â¾Ã£?Â¦Ã£?Æ’Ã£?Â£Ã£?? for Ã¥Â·?Ã¦Â¾â€žÃ§Â¶Â¾Ã¥Â­?,2004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Occupational Hazard,2001,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KevÃ¤t herÃ¤si tÃ¤Ã¤llÃ¤,1994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KinderchÃ¶re singen die schÃ¶nsten Weihnachtlieder,1982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Balades i canÃ§ons,1977,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Papa te raconte vol.16 - PoÃ¨mes De Grands Auteurs,1975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"FLOATING ON... - vibes from chilled jazz, soulful tone keep you warm",1937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blechreiz,1742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥bÂ¹ÃšÂ¥bÂ¿Ã´Â¤Â§Â¶Â¡,1712,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã°Ã¥ÃªÃ°Ã¥Ã±Ã²Ã®Ãª,7370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‡ ÃƒÃ«ÃµÃªÃ¥Ã±ÃŸÃ¡ Ã´Ã±Ã¡Ã£Ã¯ÃµÃ¤ÃœÃ¥Ã© Ã´'Ã¡Ã®ÃÃ·Ã¡Ã³Ã´Ã¡,1400,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Â©ÂºÃ¨â‚¬Â³Ã£?Â®Ã¤Â¸Ëœ,1474,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Von Spitzbuben und anderen Halunken,1465,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥ÃƒÂ»Â·Â¬OÂ§AÂªÂºÂªBÂ¤Ã,1462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§ÃºÃ¥Ãª ÃºÃ¥Ã«Ã¯,1459,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mein Schutzengel,1452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jo Stafford The Great Jazz Artist Series,1440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ…Ã ÃƒÃ‡,1438,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Douce France RÃ©tro - Fernandel,1426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã¡ Ã«Ã¡ÃºÃªÃœ Ã´Ã±Ã¡Ã£Ã¯Ã½Ã¤Ã©Ã¡ Ã¬Ã¡Ã²,1420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Et dusin med drÃ¦sinen,1411,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gympa PÃ¥,1402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Make Jazz Not War,1396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mit ganzem Herzen Vol. 2,1709,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Basse Ã©lectrique - Warner Jazz Collection,1389,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Inspiration Records Compilation,1385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1925-26,1373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmÃ¥t SmÃ¥t,1372,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Last Session (Live at Perugia Jazz Festival july, 11th 1987)",1369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pisnicky Jaroslava Jezka a V+W,1368,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Night Moves In Jazz,1365,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz Nov 2000,1362,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Project NoÂ°1,1351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lazuli,1349,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La LÃ©gende (Disc 2),1344,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‹Â¸Ã¤9,1480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Unauthorized Live Vol 1,1483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La CompaÃ±ia,1486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Unsigned\ Collection,1490,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â·RÂ§ÃšÂ§AÂ©ÃˆÂ¤FÂ¶Ãœ,1697,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El SultÃ¡n De La Bachata,1690,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â·RÂªÂºÂ¥Ãº,1688,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TrajetÃ³ria,1683,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CrÃ¨vecoeur,1680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RaÃ§as Brasil,1679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ven acÃ¡,1661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AdiÃ³s Nonino,1649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EVER AFTER -MUSIC FROM \TSUKIHIME\-,1637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"A bisserl GlÃ¼ck, a bisserl Freud",1634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Des isch bÃ¤rig,1629,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuba Es MÃºsica - Vol. 1,1625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mitt Ã¶ga - samlade krÃ¶nikor och andra bekÃ¤nnelser,1621,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,This Is... Ibiza Summer 2000 (Disc 1),1604,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jak Hurvinek potkal Mozarta,1599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Los aÃ±os Rico-Vox 62-66,1598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Capacitorz,1592,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Â­Å’Ã£?Â§Ã£?â€”Ã£?â€¹Ã¨Â¨â‚¬Ã£?Ë†Ã£?ÂªÃ£?â€ž,1572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Real Ibiza V CD 2,1559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Berlioz: The Berlioz Experience 8-10,1538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ChÃ¶re,1513,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‘Ã¯Ã¿Ã¹Ã Ã¿ ÃªÃ°Ã Ã±Ã Ã¢Ã¨Ã¶Ã  CD2,1511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â„¢Ã£â€šÂ¹Ã£Æ’Ë†Ã¯Â¼â€ Ã£Æ’â„¢Ã£â€šÂ¹Ã£Æ’Ë†,1506,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,After Five Jazz - Expressions,2113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ca va Ã§a va,2123,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Paul Oakenfold - Ibiza CD1,2144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Thats Music on CD (Classic Pop Jazz&Fusion),2644,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Waltzes,2736,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,99.9FÂ°,2725,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die SchÃ¶nsten Lieder Zur Weihnacht-CD1,2723,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Livre GrÃ©gorien de Silos CD1,2718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Spiewaj z Kinga,2713,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nouba Houssine Oua Hawzi,2667,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,2662,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lutz GÃ¶rner spricht Joachim Ringelnatz,2659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ– Ã€Ã“Ã€Ã§ Â¾ÃˆÂ¿Â¡Â¼Â­ - Worship Camp Live CD Ver 1.0,2657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AlgÃ©rie,2655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tango RevoluciÃ³n,2653,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GÃ¶tter auf Abruf,2620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Summerbreeze,2149,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bag de blÃ¥ persienner,2618,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CoolinÂ´ in Cali,2617,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szklanka wody,2609,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,21Ã¤Â¸â€“Ã§Â´â‚¬Ã£?Â«Ã©?ÂºÃ£?â€”Ã£?Å¸Ã£?â€žÃ£â€šÂ¢Ã£Æ’â€¹Ã£Æ’Â¡Ã£â€šÂ½Ã£Æ’Â³Ã£â€šÂ°Ã¥Â¤Â§Ã¥â€¦Â¨Ã£Æ’Å¸Ã£Æ’Â¬Ã£Æ’â€¹Ã£â€šÂ¢Ã£Æ’Â Ã£Æ’Å“Ã£Æ’Æ’Ã£â€šÂ¯Ã£â€šÂ¹ Disc.1,2606,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â§Ã‘Â°OÂ§AÂ§ÃšÂ°ÂµÂ¤Â£Â¨Ã¬,2601,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Gira Nacional Del Amor Venezolano,2599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"ÃÃ³Ã¬Z,ÃÃ³Ã¬Z",2592,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ¡Ã© Ã³Ã´Ã¯ Ã¥Ã®ÃžÃ²,2590,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sommer Schlager TrÃ¤ume,2584,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amigo Ã‰ Pra Essas Coisas,2580,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Grenzenlos II,2577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã©Â¢Â¨Ã©â€ºÂ²Ã£â€šÂ¹Ã£Æ’Â¼Ã£Æ’â€˜Ã£Æ’Â¼Ã£â€šÂ¿Ã£Æ’Æ’Ã£â€šÂ°Ã£Æ’?Ã£Æ’Ë†Ã£Æ’Â« Ã£â€šÂªÃ£Æ’ÂªÃ£â€šÂ¸Ã£Æ’Å Ã£Æ’Â«Ã£â€šÂµÃ£â€šÂ¦Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Ë†Ã£Æ’Â©Ã£Æ’Æ’Ã£â€šÂ¯,2739,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÃ¥Ã£ÃœÃ«Ã¥Ã² Ã¥Ã°Ã©Ã´ÃµÃ·ÃŸÃ¥Ã²,2741,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Musica do SÃ©culo  4,2748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'OdyssÃ©e,2756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich halt' zu dir,2909,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃµÃªÃ«Ã¯Ã¶Ã¯Ã±Ã¾ ÃªÃ© Ã¯Ã°Ã«Ã¯Ã¶Ã¯Ã±Ã¾,2906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ©lÃ¨ne 1997,2903,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,2901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CafÃ© Latino,2899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Prez - The Mambo King - Vol. 1,2892,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ®Ã±Ã²Ã°Ã®Ã¬Ã ,2891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Un Canto Al Corazon,2885,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Al CompÃ¡s De Un Tango,2882,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â´Ã«Ã‡Ã‘Â¹ÃŽÂ±Â¹ Â¶Ã´ Â¹ÃŸÂ¶Ã³ÂµÃ¥,2871,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Das groÃŸe Bibel-HÃ¶rbuch,2868,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Provincija Uzvraca Udarac,2852,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,freezone 4 - Dangerous Lullabies cd2,2842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tanz auf dem Drahtseil,2826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Beat of the 80Â´s - CD 2,2818,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LibertÃ  obbligatoria (Cd 2),2814,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Antifaz,2803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥?Â¶Ã§â€žÂ¶Ã£?Â®Ã£â€šÂ¢Ã£Æ’Â«Ã£Æ’?Ã£Æ’Â ,2788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DikÃ¨s/ A Vif,2785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Som pÃ¥ film,2781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â±MÂ¿Ã¨,2772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Frozen,2769,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TraumtÃ¤nze,2767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fjja El A Szl,2576,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Risainen elÃ¤mÃ¤ - Juice leskisen lauluja a cappella,2570,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Trini Lopez,2548,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sinverguenza y Mujeriego,2374,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The a-z of Alma Cogan disc 3,2339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die ZimtlÃ¤den,2338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â°ÃŸÂ¤@,2319,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,S-Man Classics The Essential Sanchez Mixes (CD 2 - The Underground Classics),2315,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"1992-01-30 - Oakland Coliseum, Oakland, CA - \Mirrors\ - Disc 1",2309,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King of Waitz,2305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã ÃŠÃÃ‹Ã•Ã”Ã…Ã‘ÃÃ“,2288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÂªFÂ¤Ã¨Â¤Â§Â¯]Â¢Â¼,2285,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ConexÃµes,2274,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DJ Hype & True Playaz Presents Real Vibes,2271,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,zu neuen ufern,2266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã ÃŠÃ©Â¹Â¢ÃÂºÂ¿Ã©Ã’,2263,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VocÃª nÃ£o pode desistir,2255,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃ­a Musical,2245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZÃ© Ramalho - Parcerias,2238,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YeloÂ­molo,2234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NiÃ±a piensa en ti,2231,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SitÃ¤ Saa MitÃ¤ Tilaa,2210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Como Ã© que a gente faz,2205,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Melitzer Oneg Shabbos,2200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"\Hugger hÃ¶gt, hugger snabbt\",2183,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ®Ã«Â¸Ã² ÃÃ®Ã°Ã¬Ã Ã«Ã¼Ã­Ã»Ã©,2162,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mega FÃªte - cd 4,2160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Desensitized,2353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Apresentamos TÃ¢nia Maria,2375,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ¶rt Ihr Alle Glocken LÃ¤uten,2546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰xitos Vol. 2,2376,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Auf Den Mond SchieÃŸen (Hinterherfliegen),2543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â®â€¡Ã¥Â®â„¢Ã£?Â®Ã©Â¨Å½Ã¥Â£Â«Ã£Æ’â€ Ã£Æ’Æ’Ã£â€šÂ«Ã£Æ’Å¾Ã£Æ’Â³Ã£Æ’â€“Ã£Æ’Â¬Ã£Æ’Â¼Ã£Æ’â€° Ã£â€šÂµÃ£Æ’Â³Ã£Æ’Ë†Ã£Æ’Â©,2540,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BÃ¸nder i solnedgang,2538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Andy Statman Klezmer Orchestra,2537,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bonzai Trance Progressive (Disc 2),2526,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blitzkrieg on Wembley - LIVE Vol2,2512,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzamania,2511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzanine Del Alcazar - Dinner Time Vol.3,2494,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ©lection Talents,2483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦ËœÂ¥Ã¥Â¤?Ã§Â§â€¹Ã¥â€ Â¬,2466,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â¤?Ã£?Â®Ã£?Â¬Ã£?â€˜Ã£?Å’Ã£â€šâ€°,2464,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¼Â¨ÂµÂµÂ¿Ã¬ Â¿Ã€ÂºÃª Ã€Â¯Â¾Ã® Â½ÂºÂ¸Â¶Ã€Ã,2461,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â½Â¼Ã¦â€“Â¹Ã£?â€¹Ã£â€šâ€°Ã£?Â®Ã©Â¢Â¨,2449,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿Â­Â¸Ã… [Fruit],2442,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃµhja vahemÃ¤ng,2441,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã˜ÃªÃ³Ã°Ã  Ã­Ã¥Ã³Ã¡Ã¨Ã²Ã®Ã£Ã®,2440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Ã·Â§OÂ¤Â§Â«e,2426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GrÃ¼nes Licht,2423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Haykirsam DÃ¼nyaya,2420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C'era un ragazzo,2412,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã•Ã°Ã³Ã±Ã²Ã Ã«Ã¼Ã­Ã Ã¿ Ã¢Ã Ã§Ã ,2408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantos y Encantos OaxaqueÃ±os,2395,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ohne ZÃ¤rtlichkeit geht gar nix,2387,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters,1342,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1925-26,1339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IndÃ©tendances Jazz,1328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BrÃ¨va E TivÃ n,432,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Ã¤Ã Ã¸Ã©Ã¤, Ã¤Ã©Ã¥Ã°Ã¤ Ã¥ÃºÃ¸Ã°Ã¢Ã¥Ã¬Ãº Ã«Ã§Ã¥Ã¬Ã¤",486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AixÃ² Ã©s pecat,485,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰xitos de MarÃ­a Dolores Pradera,484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vem esta Ã© a hora,482,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpielrÃ¤ume - JubilÃ¤ums CD der Wirkstatt e.V.,480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sorge-Ecke-MÃ¼hsam,469,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"God Morgen, SÃ¸ster",451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Art of Alghoza from Sind,444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,BolvÃ¦rksmatroser,442,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â®Ã¼Â¬v,435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃˆÃ¢Ã®Ã­Ã­Ã ,433,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Y Tenerte Otra Vez,430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹ÃŒÂ»Ã§Â¸Â®Ã¦Ã‡ÃŠÂ°1,660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Saol Buzz,424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,lieder zum fÃ¼rchten,420,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chez Madeleine,410,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Ã«Ã Ã¤Ã¨Ã¬Ã¨Ã° Ã‚Ã»Ã±Ã®Ã¶ÃªÃ¨Ã© Ã¢ Ã§Ã Ã¯Ã¨Ã±Ã¿Ãµ ÃŒÃ¨ÃµÃ Ã¨Ã«Ã  Ã˜Ã¥Ã¬Ã¿ÃªÃ¨Ã­Ã  (6),409,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ­ctor Herdia,402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich mÃ¶chtÂ´ so gern dein TeddybÃ¤r sein,401,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LejsmelÃ¥tar,391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MegasarlÃ¶g,380,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"En el CafÃ© de los Artesanos, Aguascalientes. Vol. 1",379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã§Â´ÂºÂµÃ„Ã’Ã´Â·Ã»,372,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ´l i vÃ¤gga,362,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die weiÃŸblaue Hitparade CD 2/2,493,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Schuine CafÃ© Hits,496,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃ¤sta Dansband 8,499,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El flamenco a travÃ©s Vol.V,500,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AntologÃ­a De La Navidad Canaria,646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ochsenfurter Musikantenherz,637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le MystÃ¨re Des Voix Bulgares Vol. 1,632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤nner fÃ¶r livet,597,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,589,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cuando el amor se daÃ±a,587,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Das Zigeunerlager zieht in den Himmel - Original Soundtrack,582,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Eens zal alles overgaan,578,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,New World Flamenco Jazz,570,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"ÃŽÃ©, Ã¬Ã Ã¬Ã , Ã¸Ã¨ÃªÃ  Ã¤Ã Ã¬",560,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fis Fis Tziganes,559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã  l'Olympia 1992 CD2,558,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SzÃ©p szerelmem MagyarorszÃ¡g #1 - NapfÃ©nyfia,546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã¯Ã°Ã¨Ã«Ã¨Ã·Ã­Ã®Ã¥,543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SchwyzerÃ¶rgeli,539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Er rouÃ© Stevan,529,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¨Â«Â¶iÂ·sÃƒÂ¦,527,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,AddÃ²,524,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O Segredo Ã© Louvar,511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Å“Ë†Ã£?Â®Ã¨?â€¢,510,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ³Ã±Ã±ÃªÃ Ã¿ Ã¯Ã¥Ã±Ã­Ã¿ 3/3,506,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sveriges BÃ¤sta Dansband 15,505,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§ui-lÃ ,360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cantar Ã© preciso,358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sevillanas HistÃ³ricas - Volumen I,357,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azul celeste,216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Euro Darkness 1 Ã£â‚¬Å“The Early Days OF SebÃ£â‚¬Å“,210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‡Ã¢Â±Ã¢,208,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Raza India,201,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¼hstÃ¼ck in Budapest,199,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Breeze,194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Over De Grenzen,192,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‘ ÃªÃ°Ã Ã±Ã Ã¢Ã¨Ã¶Ã¥Ã© Ã¢ Ã®Ã¡Ã­Ã¨Ã¬ÃªÃ³,180,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤SÂ¨Â£Â¤Ã«Â©Ãº,177,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Erich Kunz singt Wiener Lieder,176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tzlil Mechuvan,174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Om hundrede Ã¥r er alting glemt,169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Glasba zdruzila nas je,168,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best of Hezekiah Walker,162,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¤Â¸Â­Ã¥Â³Â¶Ã£?Â¿Ã£â€šâ€ Ã£?? SONG LIBRARY 1,146,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uma Nova UnÃ§Ã£o,145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GuzmÃ¡n y CÃ­a,138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MinnesmÃ¤rken,134,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Leguizamon-Castilla por...,133,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PopulÃ¤re Musik aus Griechenland,128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Canzoni brindisine,120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zlote Przeboje Polskiego Socjalizmu,117,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¤Â¸â‚¬Ã¤ÂºÂºÃ§â„¢Â¾Ã¦Â­Å’ Ã¥Â·Â»Ã¤ÂºÅ’,113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ¶dselfest,88,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I muaÃŸ dir no sag'n das i  di gern hab,213,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¥r kÃ¤rlek Ã¤r stark,223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die singende Winzerin,356,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jari SillanpÃ¤Ã¤,235,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tata Mirando en zijn zigeunerorkest,354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,2 - SevdadÃ½r,353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰ Festa!,341,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Aimez-vous les uns les autres ou bien disparaissez,333,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SommarkvÃ¤ll Vid GrÃ¶cken,329,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â½Â²Âµ^ÂªÃ·Â¤Ã¹Â¤lÂ¡]Â³Ã¼Â¡^Â¤Ã‘Â²PÂºqÂ¤k,327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PasiÃ³n latina,320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,C'est NoÃ«l! C'est NoÃ«l! C'est NoÃ«l!,317,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uma noite sÃ³ (Disc 2),304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Enzo Iannacci,297,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Louvor ProfÃ©tico,292,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tisic zpusobu jak zabit lasku,290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Az ifjÃºsÃ¡g sÃ³lyommadÃ¡r,288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crystal Gazer,284,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzogiorno sulle alpi,281,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trekkspilltreff i SÃ¸ristua,273,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GuitjaZzathon,272,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Um Barquinho e Um ViolÃ£o - Vol.1 Disco 2,270,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã¡ Ã¤ÃžÃ¨Ã¥Ã­,269,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PÃ¦nt goddag,266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzica & Rinascita,254,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SmaragdvÃ¡ros,251,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,^MADE IN GREECE,244,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Stolpern dÃ¤rfst ....,650,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ¡ & Guarabyra,669,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Caribbean Jazz Project,1323,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Jazz,1104,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dizionario Enciclopedico del Jazz,1192,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€¢Ã£Æ’Â«Ã£Æ’Â Ã£Æ’Â¼Ã£Æ’Â³Ã£Æ’Â»Ã£â€šÂ¢Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Â»Ã£â€šÂ¶Ã£Æ’Â»Ã£â€šÂ·Ã£Æ’Â¥Ã£Æ’Â©Ã£â€šÂ¤Ã£Æ’Â³,1191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PozvÃ¡nka Na Jazz,1171,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Most Relaxing Jazz Album in the Universe,1160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Compact Jazz (compilation),1156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Smooth Jazz Piano - CD3,1153,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Jazz Fusion, Volume 1",1132,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Colors of Latin Jazz - A Latin Vibe!,1115,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Cool School of Jazz,1114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Elizabeth Carthew EC001,1112,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Onztet De Violon Jazz,1105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Verve Jazz Masters 10,1091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Di grine Kuzine / Soundtrack \Halbe Feribot,678,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Sampler,1087,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazzpolice,1082,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters 21,1081,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best of the 1997 CT Jazz Festival,1077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Euro Jazz 2002,1076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Å’â€¡Ã§â€™Â°Ã£â‚¬Å“YUBIWAÃ£â‚¬Å“,1071,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Antonio Vivaldi - The Four Seasons - New Jazz Arrangements,1069,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Very Best Of The Jazz Giants - Disc 3,1062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Leza Viva,1037,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Greats,1035,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Light Lines - Horizons,1010,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,plays Rolf von NordenskjÃ¶ld - Passages,1194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Moods cd 2,1198,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Masters 4,1202,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz  & Tzaz (compilation),1206,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Welcome to the Jazz Cafe,1321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,International Jazz-Festival Berlin,1308,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Modern Day Jazz Stories,1305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fantasy Presents - Big Band Jazz,1299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jimmy Scott (Warner jazz),1294,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz for lovers,1290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Exothermic Jazz,1284,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Louisiana CafÃ©,1268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz - Dec 2003,1261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Essentials Of Jazz,1258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,1255,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz After Hours,1252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz-Blues-Soul 1943-44,1251,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Atlantic Jazz,1248,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,wjjz 106.1,1237,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Smooth Jazz (Disc 2 - The Night),1234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Dance,1228,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Portrait in Jazz,1227,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sucessos InesquecÃ­veis de Elis Regina - Vol. 5,1223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz Piano Christmas,1216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz U.S.A.,1214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ManhÃ£ de Liberdade,1211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz & Bossa,1210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Concord Jazz Heritage Series: Ray Brown,1005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Soultry,Jazzy & Sexy",1003,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Tribute to the Original Crane River Jazz Band,1002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CafÃ© Copacabana vol.2  cd2,889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Best Of Acid Jazz,870,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazzmatazz,855,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zimy zal - piosenki z Kabaretu Starszych Panow 1,838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‡Ã®Ã«Ã®Ã²Ã® Ã«Ã¾Ã¡Ã¢Ã¨,833,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dance Classics - Waltz,815,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HeimatklÃ¤nge 2001 (Live),807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Improvisations pour FlÃ»te de pan et Orgue (1/2),802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Razorblade Romance,787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã†Ã¹Ãž Ã°Ã¡Ã±Ã¡Ã¬ÃµÃ¨ÃÃ­Ã©Ã¡,785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sayas y huayÃ±os,757,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ©javarÃ¡zs,756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La dÃ©sabusion,754,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1000 kossa nÃ³tt,744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Prohibido dÃ¡ el cante,734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Som do mazinho 01,733,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Weihnachtskonzert der Fischer ChÃ¶re,731,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Corazon de Arpa,728,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,NÃºmeros Antiguos,726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MarÃ­a Dolores Pradera acompaÃ±ada por Los Gemelos,722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦?Â±Ã¤ÂºÂ¬Ã£Æ’â€¢Ã£Æ’Â«Ã£Æ’Â¼Ã£Æ’â€ž,706,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¼Ã¿Ã­Ã Ã¿ Ã‚Ã¨Ã¸Ã­Ã¿,698,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃˆÃÃ«Ã¥Ã©Ã² ÃŒÃ°Ã¯ÃµÃ¦Ã¯Ã½ÃªÃ©Ã¡ ÃÃœÃ¬Ã¥,689,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,och 14 andra sÃ¥nger om bÃ¥tar och vatten,680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazz Beatles Colection,874,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Late Night Jazz,892,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazziz:  December 1997,1000,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Maze - Live,894,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zanzibar,995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Piano: Jazz 'Round Midnight,994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã…Ã°Ã©Ã³Ã´Ã±Ã¯Ã¶Ãž,992,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Liz Ilku, Harp and Vocals (with Warren Chiasson, Joe Vick, and Swing Easy",985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Great Jazz Legends CD 3,984,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,jeden Â¶wiat (cd2),982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,le jazz et la java,979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazilian Byrd,975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz In The House 3 (CD1),970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blue Gardenia: The Latin-American Music of Hal Isbitz,968,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Waltz For Debby,965,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Baduizm Live,964,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Compact Jazz,950,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â°sÂ¬ÃµÂ¦Ã¢ÂªÂºÂ¤ÃŸ,949,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazzanova,945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Savoy Jazz Sampler,943,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Jazz Collector Edition - Jimmy McGriff,941,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KWJZ Smooth Jazz Volume 5,940,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jazz At The Hi-Hat,921,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Gitanes Jazz, Contrebasse",914,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A Funny Thing Happened On The Way To The Forum...InJazz,913,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ella Fitzgerald - Disc 1,901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Timeless - Buenos Aires 8 y la Obra de Astor Piazzolla,898,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Herz in Sicht,2916,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vadaszat I.,2920,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Albero Pazzo,2925,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿Donde esta Judas?,5598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\FÃ¼r Elise\ and other piano favourites,5735,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Live Bizzare Festival 2000,5715,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Paris-ZÃ©nith CD1,5713,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ²Ã® Ã¨Ã£Ã°Ã ,5698,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cristian Azul,5697,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chillout Ibiza CD One,5687,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CambierÃ  il tempo,5675,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Netvor z ciernej hvezdy Q 7A,5672,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃ³n De Pop Internacional De La Historia - CD 15,5655,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¹qÂ­ÂµÂ»RÂ§a4   disc1,5652,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Janez Detd.,5604,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MillÃ©sime - Live 00/01,5577,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Globalization,6135,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,All Eyez On Me Book 1,5573,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Last Waltz Disc 1,5566,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,veter nadezhdi,5549,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets \The Lark\ Op. 64 - Tatrai Quartet - cd 1,5539,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Malice de beautÃ©,5523,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥xÂ»yÂ¦Ã‘ÂºqÂªÃ·Â¦Â± 14,5522,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Ã´Ã¹ Ã¡Ã©,5521,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ich hÃ¤ng an Dir,5518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,1999Ã¥?â€¹Ã¥â‚¬â€¹Ã¤ÂºÂºÃ¦Â¼â€Ã¥â€Â±Ã¦Å“Æ’ [Disc One],5512,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Negl mÃ¶t KÃ¶pf,5486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,2Âº VersÃ£o,5480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Club Cutz,5738,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Secrets Of Your Dreams - Live @The DÃ¼sseldorf Easter Festival, Germany, April 07, 1996",5745,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ¶ndermarken,5762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RakkauskirjeitÃ¤,5763,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,6093,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‘Ã®Ã«Ã­Ã¶Ã¥Ã¬ Ã®Ã±Ã¢Ã¥Ã¹Â¸Ã­Ã­Ã Ã¿ Ã¤Ã®Ã°Ã®Ã£Ã ,6060,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ¤Ã£Æ’â€¡Ã£â€šÂ¢Ã£?Â®Ã¦Â°Â´Ã¦Â§Â½,6051,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,4in1Â¬ÃƒÃ‚ÃƒÂ¶Â°,6038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy World,6026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ¤Ã£Æ’Å¾Ã£â€šÂ³Ã£â€šÂ³Ã£Æ’â€¹Ã£â€šÂ¢Ã£Æ’Â«Ã£Æ’Â¢Ã£Æ’Å½,6018,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Conspiritualized,6009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,String Quartets - \Apponyi\ Op. 71 - Tatrai Quartet - cd 1,6002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã©Â®Â«Ã£?Â¨Ã£Æ’?Ã£â€šÂ¤Ã£Æ’â€œÃ£â€šÂ¹Ã£â€šÂ«Ã£â€šÂ¹,6000,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ®Ã¬Ã ,5997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pizzazz,5996,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Raza Sin Raza,5995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brave and Crazy (Remix),5994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sho' Gone Crazy!,5951,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Las Mejores 100 Baladas en EspaÃ±ol - CD3,5938,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Sweet Live - \Ballroom Blitz\,5907,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â´MÂ½Ã¥Â±Ã’Â¨Ã† Disc1,5875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Laura HÃ¤kkisen SilmÃ¤t,5873,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HÃ»sÃ©g,5863,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,6 - Â³ÃŠÃ€Ã‡ Â°Ã¡ÃˆÂ¥Â½Ã„ (Wedding),5857,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,,5821,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Funk Â´d, RaptÂ´ n TrashÂ´d",5792,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'involuzione della specie,5788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Various/Hits Ãœber 30 CD3,5462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€¢Ã£â€šÂ¡Ã£Æ’Â³Ã£â€šÂ­Ã£Æ’Â¼Ã£Æ’Â»Ã£Æ’Â¢Ã£Æ’Â³Ã£â€šÂ­Ã£Æ’Â¼Ã£Æ’Â»Ã£Æ’â„¢Ã£â€šÂ¤Ã£Æ’â€œÃ£Æ’Â¼,5429,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’Â³Ã£Æ’Â»Ã£Æ’â€˜Ã£â€šÂ« Ã£â€šÂªÃ£Æ’Â¼Ã£Æ’Â´Ã£â€šÂ¡Ã£Æ’Â¼Ã£Æ’â€°Ã£Æ’Â©Ã£â€šÂ¤Ã£Æ’Â´,5408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kast Dine HÃ¦nder Op,5096,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hot Hazy and Human,5086,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â´XÂ¤Ã€Ã„ÃÂªÂºÂ¬Ã¹Â·|,5077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Venganza del Hijo del Guacarock,5074,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Psychokiller QuÃ©st Que CÃ©st Part Two,5073,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jul med SmÃ¸lferne,5069,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¡Simpatico!,5057,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tribal Mix Sessions VoÃ¬. 1,5038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Azuli Presents Miami 2003 Cd.1,5035,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Crystal Horizon - Shadows of Winter vol. 2,5029,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tabaluga und das verschenkte GlÃ¼ck,5020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Drifting into Amazing,4997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã¬Ã¨ÃªÃ±Ã»,4965,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kai Pilnaties Akis UÃ¾merks Mirtis,4962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã°Ã¥Ã§Ã®Ã¢Ã»Ã© Ã±Ã®Ãª,4960,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzzbusters,4953,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŽÃ¤Ã¨Ã­Ã®ÃªÃ¨Ã© Ã‚ ÃÃ®Ã·Ã¨,4944,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Too much fun in a no fun zone,4916,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ®Ã·Ã¥Ã¬Ã³ Ã«Ã¾Ã¡Ã®Ã¢Ã¼...,4915,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Razorblade Romance (Limited Edition),4911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃƒÃ³Ã«Ã¿Ã© Ã¬Ã³Ã¦Ã¨Ãª!,4893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã†Ã¥Ã­Ã¹Ã¨Ã­Ã  Ã± \Ã²Ã°Ã³Ã¡Ã®Ã©\,4883,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Durstige MÃ¤nner,4881,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EhjÃ¤,4870,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â±Â©Â·Ã§Ã…Â®Ã‰Ã±Lorelei,5091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Vic nez Gottzila,5101,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Trail Blazer,5396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¦AÃ„Ã²Â±Â¡Â½tÂºÃ«Â¿Ã¯,5116,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã’Ã Ã¬ Ã¤Ã¥ Ã²Ã¨ Âº,5360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bat Head Soup - Tribute To Ozzy,5354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ®Ã²Ã®Ã°Ã»Ã© Ã¯Ã®Ã¢Ã²Ã®Ã°Ã¿Ã¥Ã²Ã±Ã¿,5302,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RockÂ´nÂ´roll meltdown,5295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Takamehtien mekatÃ¤htiÃ¤,5292,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsica Serve Pra Isso,5291,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jag Ã¤r du,5288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥?â€Ã¥Â¥?Ã¦â€ºÂ²Ã£â‚¬Å“The 2nd LPÃ£â‚¬Å“,5281,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MotÃ­! Avalot...,5275,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,UstmamÃ²,5261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Je M'en Viens SoÃ»l,5245,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzz Parade,5242,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,80Â´s,5233,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alles FÃ¼r Den Herrn cd 2,5204,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â‚¬Å’Ã¦Â©Å¸Ã¥â€¹â€¢Ã¦Ë†Â¦Ã¥Â£Â«Ã£â€šÂ¬Ã£Æ’Â³Ã£Æ’â‚¬Ã£Æ’Â SEEDÃ£â‚¬?COMPLETE BEST,5188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Live At The GrenzÂ´,5187,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Blut FÃ¼r Blut,5185,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃ±ana Cruzamos el Missouri,5167,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"06-14-00 Praha, Czech Republic (Side B)",5166,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã„Ã®Ã«Ã£Ã¨Ã¥ Ã„Ã­Ã¨,5144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synkronized,5138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã„Ã‡Ã’Â»Ã„Ãª(CD2),5130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Greats,5127,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Best Of ManÃ¡ - Live!,6105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Brazil Jazz Pulsation,6136,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Astronomia Razonable,4756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ©mzene,6880,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VidasongstaÃ§Ãµes,6994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â´Â«Â¹Â°Â²Ã‰,6986,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FÃ¼r immer frei,6982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MaÃ±ana Cruzamos El Missouri (CD2),6975,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PequeÃ±os Exitos,6963,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Â¤â€¹Ã©Â³Â¥Ã£Æ’Â­Ã£Æ’â€œÃ£Æ’Â³,6962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃ³savÃ­n og RaftÃ³nlist,6946,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rock En EspaÃ±ol Vol2 Cd 2,6941,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bring 'Em Out \Live\,6911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Synthesizer Dance Vol. 2,6904,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le DÃ´me,6901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HangulavÃ¡ltozÃ¡sok,6875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Devo Tudo a VocÃª,6137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La BarberÃ­a del Sur,6856,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Just Say NoÃ«l,6847,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,celeste azzuro e blu,6845,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§â€žÂ¡Ã¨â€°Â²,6842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Controdanza,6838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃ¶ÃŸten Hits der 80er und 90er aus Ã–sterreich - Papermoon,6830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ¢Ã£â€šÂ­Ã£Æ’Â©4Ã£â‚¬Å“Ã£Æ’Â¦Ã£Æ’Â¼Ã£Æ’Â¢Ã£â€šÂ¢Ã£Æ’Â»Ã£â€šÂ½Ã£Æ’Â³Ã£â€šÂ°Ã©â€ºâ€ Ã£â‚¬Å“,6829,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â¥Â³Ã§Â¥Å¾Ã¨Â»Â¢Ã§â€Å¸ 1&2 Ã¥?Â¬Ã¥â€“Å¡Ã§â€ºÂ¤ & Ã¥?Ë†Ã¤Â½â€œÃ§â€ºÂ¤ [VICL-40029&30] (Disk2 - Ã¥?Ë†Ã¤Â½â€œÃ§â€ºÂ¤),6827,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Raza Odiada,6803,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Egy kicsit bulizgatunk,6799,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The Secret Life Of Harpers Bizarre,6794,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ask YÃ¼zÃ¼nden,6997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³ Alegria,7005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Allt sem Ã©g sÃ©,7042,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Endless Love - Die schÃ¶nsten Pop-Duos (CD 2),7046,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Tausend TrÃ¤ume von Zuhaus,7360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‘Ã¥ÃªÃ²Ã®Ã° ÃƒÃ Ã§Ã ,7355,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã—Ã¥ Ã²Ã¥ Ã­Ã Ã¤Ã®,7351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jen blazen zarli,7347,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Atrayendo Corazones,7320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Country Breeze,7318,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ViolÃ£o apaixonado,7313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,CanÂ´t Get The Hell Out Of Texas,7304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GarrÃ£o do Pampa,7272,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â²Ã„Â¤Â­Â¿Ã¨ - Â·RÂ±Â¡Ã…RÃ†EÂ¤Ãµ,7262,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Onder dezelfde zon,7260,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤Â£Â¤@Â¼Ã‹ÂªÂºÂ§Ãš,7258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Otevrete! Jsou tady lidÃ©..,7247,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã’Ã ÃªÃ®Ã¢Ã  Ã±Ã¥Ã«Ã¿Ã¢Ã¨ Ã¨Ã«Ã¨ SEX Ã¯Ã® Ã°Ã³Ã±Ã±ÃªÃ¨,7246,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Virgis StakÃ«nas,7214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mexe Mexe que Ã© Bom,7191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Salty Dogz2000,7188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jen kdyz to musi bejt,7160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÂºÃºÃÃ’Ã‚Ã›Ã“Ãª,7151,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Roger's Waltz,7130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Como AlcanÃ§ar uma Estrela,7128,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃ£o sem PoluiÃ§Ã£o,7114,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ Ã«Ã«Ã»,7077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El Loco Mundo De Los JÃ³venes,6793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LÂ´Oeuvre DÂ´Orgue (Tome 3),6791,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Con Mucho CariÃ±o,6787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Caly Swiat Nalezy do Nas,6423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dziecko,6383,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GeraÃ§Ã£o Pop,6381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SchÃ¶n ist es auf der Welt zu sein (CD3),6379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,On est lÃ ,6376,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ Ã¸Ã¨,6375,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy,6367,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Crazy In The Night,6350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A la fontaine des romÃ©os,6325,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Danzer,6316,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥xÂ»yÂªÃ·Â¦Â±2,6308,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã§Å“Å¸Ã§Â©ÂºÃ£Æ’â€˜Ã£Æ’Æ’Ã£â€šÂ¯,6300,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mezzanine,6264,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¥Â¾Â©Ã¦Â´Â»!! The Timers,6236,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fuzz And Nonsense,6232,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‹Ã¾Ã¡Ã¢Ã¨ Ã¦Ã¥Ã«Ã Ã­Ã­Ã Ã¿ Ã¯Ã®Ã°Ã ,6217,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,(Non Ã¨ Per Sempre),6216,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â«DÂ¤@Â¯Ã«Â¥bÂ½Ã•Â¤l,6200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"BÃ¡lnÃ¡k, ki a partra",6175,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szvit,6169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,DonÂ´t Call Me MÃ¼ller!,6165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Ã‘Ã’ÃŽÃ, Ã‹ÃžÃÃŽÃÃ›Ã’Ã‘Ã’Ã‚ÃŽ",6156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\Rock On\ Sessions,6154,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sociedad Mecanizada,6152,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Mixing Desk Recording Stadion Basel Switzerland - Disc 1,6417,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,California Guitar Trio with Tony Levin and Pat \nMastellotto,6424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ab 80 - Alles Ã¼ber Sex,6774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zillo Club Hitz,6426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂªÃ£Æ’Â¼Ã£â€šÂªÃ£â€šÂ¦Ã£Æ’Â»Ã£â€šÂ¢Ã£â€šÂ¤Ã£Æ’Â»Ã£â€šÂªÃ£â€šÂªÃ£â€šÂªÃ£â€šÂª Ã£Æ’ÂªÃ£Æ’Å¸Ã£Æ’Æ’Ã£â€šÂ¯Ã£â€šÂ¹,6772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Harmonizer,6771,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Ã¨Ã§Ã¨Ã² Ã¢ ÃŒÃ®Ã±ÃªÃ¢Ã³,6716,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'Ã©clat du ciel Ã©tait insoutenable,6708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RecopilaciÃ³n,6694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bazooka!!!,6685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â·Ã•Â¢ÃÂ§Ã ÃŠÃ—Ã,6683,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,L'arÃ¨ne des rumeurs,6677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Off To See The Lizard,6660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uncle BenÂ´s Christmas Mix,6646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â­Â¸Â¤Ã‘Â»RÂ·|,6634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’â€¡Ã£â€šÂ£Ã£Æ’Â³Ã£â€šÂ´,6633,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,y'Ã© quelle heure?,6632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"WHITE TRASH, TWO HEEBS AND Ã¯Â¼Â¡ BEAN",6613,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The WorryinÂ´ Kind,6584,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TriplezÃ©ro,6550,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,No Parlez,6538,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Venter PÃ¥ Verden,6536,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jon Butcher Axis/A Stiff Little Breeze,6497,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Playaz N The Game,6496,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"dollÃ¡r, hatalom, pornÃ³",6480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZurÃ¼ck zur Front,6458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,El hambre de su poder es la sed de nuestra venganza,6456,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃºsica contra osopetos,4782,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,IllÃ©s '96 #1,4748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,YÃ¶n tuuli vain,2926,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Plzenske povesti, pisne a jine plisne",3444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les PlusBeaux Chants de NoÃ«l,3617,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ghislaine Cantini Interpreta Pe Zezinho,3612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Petra en Alabanza,3611,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¶liche Weihnachten CD 2,3599,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The a-z of Alma Cogan disc 1,3575,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nossas CanÃ§Ãµes 2,3517,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Et es 20 Johr jenau jetz her (CD 2/2),3476,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Æ’?Ã£â€šÂ±Ã£Æ’Æ’Ã£Æ’Ë†Ã£Æ’Â¢Ã£Æ’Â³Ã£â€šÂ¹Ã£â€šÂ¿Ã£Æ’Â¼ Ã£Æ’â€˜Ã£Æ’Â¼Ã£Æ’â€¢Ã£â€šÂ§Ã£â€šÂ¯Ã£Æ’Ë†Ã£Æ’â„¢Ã£â€šÂ¹Ã£Æ’Ë†,3475,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GRW Freestyle Frenzy Vol. 4,3473,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElfonÃ­a,3458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã€Ã¼Ã‡ÃÂ¼Â¼Â¿Â¹Â¼Ã¶1,3450,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sur les dÃ©combres,3430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zlodzieje Zapalniczek,3826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,LaÃŸt uns froh und munter sein - CD2,3423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le MÃ©crÃ©ant,3406,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¨â„¢Â«,3401,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pura PiÃ±ita Colombiana,3399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃˆÃ§Ã¡Ã°Ã Ã­Ã­Ã®Ã¥ (CD 1),3394,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Xtravaganza Mix,3388,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Africanize,3385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Diether Krebs und ungebetene GÃ¤ste,3378,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Uzbekistan,3377,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃ¤nner!,3373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Es gibt einen Ort zum Beten,3358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Naturaleza Muerta,3623,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Volver A Empezar,3626,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ©rgio Reis,3628,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FamÃ­lia Lima,3637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Par curiositÃ©,3800,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Buffet des anciens Ã©lÃ¨ves,3798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤@Â®aÂ¤H,3793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Que Viva ChangÃ³!,3787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,EmoÃ§Ãµes Vol. 3,3781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KarÃ¡csony ZÃ¡mbÃ³ Jimmyvel,3773,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤gen till Jerusalem,3742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Freezone 1: the phenomenology of ambient - cd1,3740,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤Ã©Â¼@Â¸UÂ·Â³,3733,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Von Bismarck zu Hitler CD 1,3728,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Subliminal Live at Pacha Ibiza CD1,3724,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La FÃªte Ã  Boris,3718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Piazzolla-Ferrer,3711,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŠÃ®Ã«Ã¼Ã¶Ã  Ã‚Ã°Ã¥Ã¬Ã¥Ã­Ã¨. Ã—Ã Ã±Ã²Ã¼ 2,3709,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¶Â«Â·Â½Ã–Â®Ã–Ã©III,3708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‘Ã®Ã«Ã­Ã»Ã¸ÃªÃ®,3706,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Star Gazing,3700,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃŒÃ©ÃªÃ±Ãœ ÃŒÃµÃ³Ã´Ã©ÃªÃœ,3690,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pazzo Compilation,3685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Luz das NaÃ§Ãµes,3677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ElÃ¤mÃ¤ Vie,3665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,A MÃºsica do SÃ©culo - vol. 1 - Revista Caras,3649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¦Â²Â¢Ã§â€Â°Ã§Â â€Ã¤ÂºÅ’ SUPER BEST Disc 1,3639,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Abtanz Fete,3350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"ÃŠÃ®Ã­Ã¶Ã¥Ã°Ã² - Ã¡Ã¥Ã­Ã¥Ã´Ã¨Ã± '1994 Ã’Ã®Ã­Ã¨ÃªÃ , Ã’Ã®Ã­Ã¨ÃªÃ  Ã‘Ã‚, Ã„Ã®Ã¬Ã¨Ã­Ã®",3336,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sana-mode II Ã£â‚¬Å“pop'n music & beatmania momentsÃ£â‚¬Å“,3332,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SÃ³ No Sapatinho,3108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Krute kruty vs. Nezkroceni krocani,3102,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Turbo compressor noz injection,3091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ColecciÃ³n Aniversario,3083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les annÃ©es YÃ©yÃ© - Vol1 - CD2,3078,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,30 phonÃ©mes en 30 chansons (GS-CP),3076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,RÃªves Multicolores,3072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Les AnnÃ©es YÃ©yÃ© -Vol1 - CD1,3068,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ernst Mosch in Leipzig,3067,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Balthazar [CD 3 -- AudioBook],3056,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Chill Out from Ibiza Playa Salinas CD 2,3043,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Soundz of the Asian Underground,3033,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dansez,3013,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Yes-IÂ´m Limited Vol. III (disk 2),3004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã–Ã±Ã‘Ã§,2999,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Fabrizio De Andre',2991,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Still Life-Ã©?â„¢Ã£?â€¹Ã£?ÂªÃ§â€Å¸Ã¦Â´Â»-,2985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Ã‘Ã¯Ã Ã±Ã¨Ã¡Ã® Ã²Ã¥Ã¡Ã¥, Ã¬Ã®Â¸ Ã±Ã¥Ã°Ã¤Ã¶Ã¥",2971,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ugyanaz vagyok,2970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â³ÃŒÂ·RÂªÂºÂ¥DÃƒDÂ¦Â±(DISK TWO),2962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã•Ã˜Ã…Ã‰Ã“,2958,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Le Voyage IntÃ©rieur,2952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,28 hammergo'e bÃ¸rnesange (cd2),2942,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jarocho de Corazon,2933,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SpektColÃ¶r,3107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,5 - Hotzenplotz ist wieder da,3122,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã†Ã¤Ã¥Ã² Ã²Ã¥Ã¡Ã¿ Ã£Ã°Ã³Ã§Ã¨Ã­,3313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Liebe die alles trÃ¤gt,3136,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pop EspaÃ±ol 88 Vol.1,3305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Lederzwang,3304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pockam si na zazrak,3297,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã¡Ã® Ã­Ã  Ã§Ã¥Ã¬Ã«Ã¥,3295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ¥Ã°Ã¢Ã»Ã© Ã Ã«Ã¼Ã¡Ã®Ã¬,3289,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,KrÃ­dla,3283,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zelta Izlase,3280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ahora Comienzo A Vivir,3267,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Power Collection - The Crazy Fifties - The Roaring Sixties,3254,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,European Future Soundz (Excursions In Trance),3244,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ambi-Ant Beatz - Beatz Disc,3237,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Muzyka Rozna i Rozniasta,3234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,HANGAR 21 by \Winterthur\,3228,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,StjÃ¤rnfall CD2,3224,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Kazaa,3219,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,PrÃªmio Visa MPB Instrumental,3214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amazing Love,3200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Igreja batista Nova JerusalÃ©m-Bom Ã© Louvar a Deus,3194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â°Â¨Â¤Â£Â°Â±Â¿Ã¡ÂªÂºÂ¼~Â¶Ã‹,3188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ett gott skratt pÃ¥ BjÃ¶rkgÃ¥rden,3176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÂµÃ˜Â¯Ã‡Â®Ã¶ÂºÂ©Â¤ÃŸÂ¦Â±ÂºÃ«Â¿Ã¯,3173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,MÃ¡s Noches De Blanco SatÃ©n,3165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Der Kleine Prinz (CD 1),3138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Probier's mal mit GemÃ¼tlichkeit,3807,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¨Â¶â€¦Ã©Å¸Â³Ã¦Ë†Â¦Ã¥Â£Â«Ã£Æ’Å“Ã£Æ’Â¼Ã£â€šÂ°Ã£Æ’Å¾Ã£Æ’Â³ A Midsummer Night's Dream,3830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dantzig Twist,4744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,bandemÃ³nio / silÃªncio,4290,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ© Ã°Ã¥Ã±Ã©Ã°ÃÃ´Ã¥Ã©Ã¥Ã² Ã¥Ã­Ã¼Ã² Ã°Ã±Ã¯Ã³ÃªÃµÃ­Ã§Ã´Ãž,4385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥VÂ¤Ã‘ÂªÂºÂ¬GÂ¨Ã†,4360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Ã±Â¸ Ã½Ã²Ã® Ã¤Ã«Ã¿ Ã²Ã¥Ã¡Ã¿,4354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Zadnji Krizarski Pohod,4337,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Shades of Jazz,4327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,King Size Rock 'n' Roll Thrills,4323,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bozai Trance 10e Anniversary (DISK Two),4317,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Deck Wizards,4314,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ambien Ibiza vol 2,4313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Romanza,4311,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Jose Fernadndez & Wadih El-Safi,4293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sizhu - Silk Bamboo - Chamber Music of South China,4283,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sucessos de Barzinho - Volume I,3833,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â´Â£Âµ^Â±Â¡Â¸Ã–,4273,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Acid Jazz Vol. 80,4268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Ã±Ã¯Ã®Ã¬Ã­Ã¨ Ã¬Ã¥Ã­Ã¿,4266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÂºÃ‚Â©g '88 ÂºtÂ°Ã›Â·|,4258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ContrÃ´le du Parlement sur le Gouvernement,4253,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã˜Ã¥ÃªÃ®Ã£Ã Ã«Ã¨,4252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nasz ziemski Eden,4247,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤kÂ¤lÂ¤QÂ¤GÂ¼Ã–Â§{-Â¼BÂ¤TÂ©j-CD1,4230,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amo VocÃª - Vol. 7,4222,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,So schmilzt der Winter,4204,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,2000-ÃŠÃÃ‰ Ã“Ã”Ã Ã…ÃŽÃ‡Ã“,4201,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Licht am Horizont,4391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,I Love You Kara Hajimeyou (Anzen Chitai Best),4396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¶'Ã¸Ã¶'Ã©Ã¬Ã©Ã­,4399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Bog ne zabyl,4408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¤Â£Â¦AÂ¬yÂ²\\,4724,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ZdravÃ­,4720,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Flickor Och KÃ¤rlek,4715,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã„Ã¥Ã¢Ã®Ã·ÃªÃ  Ãˆ ÃÃ»Ã±Ã¼,4708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Segismundo ToxicÃ³mano,4692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ…Ã‘ÃÃˆ ÃŽ Ã‘Ã’Ã€Ã‹ÃˆÃÃ…,4680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Anokha: Soundz of the Asian Underground,4661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¤ÃºÃ§Ã¬Ã¤ Ã§Ã£Ã¹Ã¤,4657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Au RÃªve,4654,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SzajhÃ¡k & PartizÃ¡nok,4649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã¨Å“Å“,4594,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,The \Complete\ Rehearsals 1987 disc 4,4582,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Mejor ColecciÃ³n De Pop Internacional De La Historia - Cd 12,4575,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sezen Aksu SÃ¶ylÃ¼yor,4552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‚Â²Ã‚Â²Â³Ã¦Â³Ã¦,4551,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Sedona Arizona,4548,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã”Ã Ã°Ã´Ã®Ã°Ã®Ã¢Ã Ã¿ Ã‘Ã¢Ã Ã¤Ã¼Ã¡Ã ,4547,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¿La calle es tuya?,4542,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La luz del cuerpo,4528,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Merack za FaK,4518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Âµ\Âµ]Â¦Ã¦,4476,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ki nevet a vÃ©gÃ©n,4435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Herzlich Willkommen Im Irrenhaus,4419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,25 Ã¥r med \The Real dansktop\ CD2,4200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã©Â¢Â¨Ã£?Â®Ã£?â€œÃ£?Â¨Ã£?Â¥Ã£?Â¦,4171,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã—Ã™Ã‘Ã‰Ã“ ÃÃÃ‘Ã…Ã,4169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Csak egy vallomÃ¡s,3982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‹Ã¡Ã¢Ã½Ã±Ã©Ã­Ã¨Ã¯Ã²,3962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Donzella,3959,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã‰ Esse AÃ­ Que Ã‰ O Homem,3957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Dans Une Heure - 5Ã¨me LP,3945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£?Â¯Ã£?Â¡Ã£â€šÆ’Ã£â€š?Ã£?Â¡Ã£â€šÆ’Ã§â€¹â€š,3943,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nazer / Lewis,3935,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,TournÃ©e 2002 CD 1,3917,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ghazals to remember,3912,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Cool Breeze  - Jazz Ballads,3896,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hit News 90 \Volume 2\,3893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die grÃ¶ÃŸten Hits von Queen,3889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂªÃ£Æ’Å¡Ã£Æ’Â©Ã¥ÂºÂ§Ã£?Â®Ã¦â‚¬ÂªÃ¤ÂºÂº Ã£Æ’Â­Ã£Æ’Â³Ã£â€šÂ°Ã£Æ’Â©Ã£Æ’Â³Ã£â€šÂ­Ã£Æ’Â£Ã£â€šÂ¹Ã£Æ’Ë†,3887,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Nenhuma LÃ¡grima,3883,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hoirr Ã–ngÃ¶,3877,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¥xÃ†WÂ²Ã„Â¤QÂ¤GÂ©Â¡Â­ÂµÃ…TÂ®i,3876,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Citizen of Sun,3868,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Depois De VocÃª...,3867,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃÃ€Ã„ Ã‘ÃˆÃÃˆÃÃ‘ÃŠÃŽÃ‰ Ã’Ã€Ã‰ÃƒÃŽÃ‰,3864,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,\hon\,3863,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£Â«Ã’Ã¢,3851,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã£â€šÂ¤Ã£â€šÂ¨Ã£â€šÂ¹Ã£Æ’Â»Ã£â€šÂ¤Ã£â€šÂ¨Ã£â€šÂ¹Ã£Æ’Â»Ã£â€šÂ¤Ã£â€šÂ¨Ã£â€šÂ¹*Ã£â€šÂªÃ£Æ’â€¢Ã£â€šÂ³Ã£Æ’Â¼Ã£â€šÂ¹AÃ©?Â¢Ã£â€šÂ³Ã£Æ’Â¬Ã£â€šÂ¯Ã£â€šÂ·Ã£Æ’Â§Ã£Æ’Â³,3843,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pacha Ibiza 30 Aniversario - cd3,3838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Guitarra MediterrÃ¡nea Vol 1,3835,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Ã…Ã°Ã©Ã´ÃµÃ·ÃŸÃ¥Ã²,3979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,O cem mluvi muzi,3983,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hits van de geheime zenders 3/3,4168,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Grandes Ã‰xitos,3988,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"The 60`s for the 90`s - Witzige, spritzige Schlager",4155,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,ÃƒÃ‰ÃÃÃÃ‡Ã“ ÃÃÃ•Ã‹ÃÃÃÃ•Ã‹ÃÃ“ 1,4149,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,FrÃ¼hwerke,4130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Pacha Ibiza 2001 - CD1,4124,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Th eSummerdance Axtravaganza,4120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,La Bonne Chanson - Gerard Souzay,4113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,VÃ¤rldens bÃ¤sta by,4105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,SertÃ£o Urbano,4091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Floating Waves - the glasnost compilation Â´94,4080,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Die HÃ¶hle des Grauens,4077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Privilege Ibiza - CD1 - Island Cafe,4076,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Hol a nadrÃ¡gom?,4065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,"Viva Moniuszko, Viva Verdi",4050,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Alma CaribeÃ±a (Caribbean Soul),4039,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Rock Rendez Vouz CD1,4031,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â¶Â¢Â±Â¡Â¶Â®Â¼Ã–,4028,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Szevasztook,4021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Undir FjÃ¶gur Augu,4020,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Amazing Love,4012,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Przeboje Andrzeja Zauchy,4009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Â½Â£ÃÃ€Ã‡Ã©Ã”Âµ,4007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,GrÃ­nlÃ¶gin Illu,3998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,title,Check for *possibly* invalid symbols.,0,Turboschlager 4 - Die tollsten Hits der letzten Jahrzehnte,3990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,genre,not_nullable,,,4709,
Column,genre,not_nullable,,,4708,
Column,genre,not_nullable,,,4704,
Column,artist,Check for *possibly* invalid symbols.,1,Doris & GÃ¶sta,3764,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Â¯Â½Ã‚ÃÃ˜,3854,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Ã‚Â¹ÃºÃ†Â½,3851,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂªÃ£Æ’â€¢Ã£â€šÂ³Ã£Æ’Â¼Ã£â€šÂ¹,3843,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?Â¾Ã¦Å“Â¬Ã¤Â¿?Ã¥â€¦Â¸Ã£Æ’Â»Ã¤Â»â€“,3830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â·?Ã¤Âºâ€¢Ã¦â€ Â²Ã¦Â¬Â¡,3827,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pidzama Porno,3826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZÃ© Ramalho,3805,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Palast Orchester mit seinem SÃ¤nger Max Raabe,3796,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Celina GonzÃ¡lez,3787,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Klingonz,3774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZÃ¡mbÃ³ Jimmy,3773,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂªÃ£Æ’ÂªÃ£â€šÂ¸Ã£Æ’Å Ã£Æ’Â«Ã£Æ’Â©Ã£Æ’â€“,3756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â²Â¢Ã§â€Â°Ã§Â â€Ã¤ÂºÅ’,3639,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JerÃ³nimo de CarriÃ³n,3737,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¤Ã©Â¼@Â¸UÂ·Â³,3733,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Piazzolla-Ferrer,3711,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã„Ã¥Ã¬Ã®,3706,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,XirÃº Missioneiro,3697,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JÃ¶back Peter,3696,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾HÂ°Â·Â©Ãº,3693,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ­Ã¥Ã©Ã±Ã¯Ã°Ã¡Ã£ÃŸÃ¤Ã¡,3690,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Aziz Kujateh and Oliver Jaeger,3668,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Yukmouth & Gamblaz,3657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â§ÃµÂ°ÃªÂ²Â»,3647,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã…Ã¢Ã£Ã¥Ã­Ã¨Ã© ÃŠÃ¥Ã¬Ã¥Ã°Ã®Ã¢Ã±ÃªÃ¨Ã©,3864,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,C Lanzbom & Noah Solomon,3886,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Å â€¡Ã¥â€ºÂ£Ã¥â€ºâ€ºÃ¥Â­Â£,3887,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ju Ju Space Jazz,3895,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ¯ÃµÃ«Ã¼Ã°Ã¯ÃµÃ«Ã¯Ã² ÃƒÃ©ÃœÃ­Ã­Ã§Ã²,4149,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Canta El Trio VegabajÃ±o,4145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Azuli,4096,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Padilla,4095,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Astor Piazzolla,4078,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die drei Fragezeichen,4077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,KalÃ¡ka,4065,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³\Â¼Ã–-Â³Â¯Â¼Ã¤Ã„R,4028,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JÃ³nÃ¡s Rita,4021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Andrzej Kruszewski spiewa Przeboje Andrzeja Zauchy,4009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TÃºpÃ­lakar,3998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ãsmael Ledesma,3993,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZÃ¡mbÃ³ Jimmy,3982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ‰ÃÃÃÃ‡Ã“ ÃÃÃ•Ã‹ÃÃÃÃ•Ã‹ÃÃ“,3979,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Porca VÃ©ia,3968,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Detlev JÃ¶cker,3966,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÃÃ‹ÃÃŒÃÃ“_Ã‹ÃÃ‚Ã•Ã‘Ã‰ÃÃˆÃÃ“,3962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Emmanuel Donzella,3959,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bezerra Da Silva,3957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mike KrÃ¼ger,3954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?â€¹Ã£?Â¾Ã£?â€žÃ£?Å¸Ã£?Â¡,3943,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Alexandria Harmonizers,3940,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ¶rspiel,3932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZÃ© ramalho,3644,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FamÃ­lia Lima,3637,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Â±Â³Ã§Â±Â³Ã¯Â¼Â£Ã¯Â¼Â¬Ã¯Â¼ÂµÃ¯Â¼Â¢,5514,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,3137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Allan MikuÂ¹ek,3283,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,David Lagercrantz,3224,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AndrÃ© Malraux,3220,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Hamilton de Holanda, Nelson Veraz, Rodrigo Y Castro e FÃ¡bio Torres",3214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Limp Bizkit,3209,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zazie,3201,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Igreja batista Nova JerusalÃ©m-Bom Ã© Louvar a Deussta Nova JerusalÃ©m-Bom Ã© Louvar a Deus,3194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¶Ã€ÂµÃŽÃ‚@,3188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,3180,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¸sÂ¬P,3173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Antoine De Saint-ExupÃ©ry,3138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã•Â¿ÂµÃÃ¸,3132,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ©rgio Reis,3628,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÂ¶Â±Ã”Ã‚Ã¹,3129,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Erich KÃ¤stner,3123,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Otfried PreuÃŸler,3122,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ³ No Sapatinho,3108,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ColÃ¶r,3107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Les Ogres de Barback & Les Hurlements de LÃ©o,3106,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,An PierlÃ©,3104,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pozar mlyna,3102,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ruzne,3093,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Howard Hanger Jazz Fantasyits for Kids,3088,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Basso,3083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ³Ã²Ã»Ã°ÃªÃ ,3289,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã¥Ã²Ã¨,3295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Various Artists. ColecciÃ³n Pop EspaÃ±ol,3305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã®Ã±Ã® ÃÃ Ã¢Ã«Ã¨Ã Ã¸Ã¢Ã¨Ã«Ã¨,3313,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die Prinzen,3614,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SoloRazafGuitar,3608,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TÃªtes Raides,3601,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Decepticonz,3579,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lenny Kravitz,3544,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,J.R.R. Tolkien - Sagan om de tvÃ¥ tornen,3532,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DJ Jazzy Jeff And The Fresh Prince (Feat. Ready Rock C),3506,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©Âºâ€”Ã§Â¾Å½,3501,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BlÃ¤ck FÃ¶Ã¶ss,3476,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’Â¡Ã£Æ’â€¡Ã£â€šÂ£Ã£â€šÂ¢Ã£Æ’â€¢Ã£â€šÂ¡Ã£â€šÂ¯Ã£Æ’Ë†Ã£Æ’ÂªÃ£Æ’Â¼,3475,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,RawfrÃ¼cht,3474,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ElfonÃ­a,3458,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã…Â¬Â·Ã,3455,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â°Ã¦Â¹Ã¨Â¿ÃÃ‚Ã¹Â¾Ã§,3450,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Insyderz,3449,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã’Ã Ã²Ã¼Ã¿Ã­Ã  Ã¨ Ã‘Ã¥Ã°Ã£Ã¥Ã© ÃÃ¨ÃªÃ¨Ã²Ã¨Ã­Ã»,3394,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Munadjat Yulchieva & Ensemble Shavkat Mirzaev,3377,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Wittenbrink,3373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ejigayehu \Gigi\ Shibabaw,3361,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AcouphÃ¨ne,3359,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Abtanz Fete,3350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã’Ã®Ã­Ã¨ÃªÃ ,3336,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦â€“â€°Ã¨â€”Â¤Ã¥â€™Å’Ã§Â¾Â©,3328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frank SchÃ¶bel,4156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŽÃ•Ã„Ã‰ÃÃ“ ÃˆÃÃ„Ã™Ã‘Ã‡Ã“,4169,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ·Ã£Æ’Â¢Ã£Æ’Â³Ã£â€šÂº,4171,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ³a,4940,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SmÃ¸lferne,5069,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Neuza,5058,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gorillaz,5030,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,An PierlÃ©,4989,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Nikolo Kotzev's,4987,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Saez,4970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Muertos Una Vez,4969,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ®Ã«Ã¨Ã¡Ã°Ã¨,4965,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ¥Ã±Ã­Ã¿Ã°Ã»,4960,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Merczrioucromos,4947,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‡Ã¨Ã­Ã·Ã³Ãª,4944,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sautanz,4929,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gerhard SchÃ¶ne,4173,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ted GÃ¤rdestad,4917,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ¯Ã¨Ã²Ã Ã´Ã¨Ã¿,4915,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã¥ÃªÃ²Ã®Ã° ÃƒÃ Ã§Ã ,4893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,StjÃ³rnin,4891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Matthias Meyer-GÃ¶llner,4890,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã«Ã¥ÃªÃ±Ã Ã­Ã¤Ã° Ã‹Ã Ã½Ã°Ã²Ã±ÃªÃ¨Ã©,4883,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Buzz Spectors,4875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Manzanera & MacKay,4806,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TomÃ¡s San Miguel con Jorge Pardo,4802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸â€°Ã©â€¡?Ã©â€¡Å½Ã§Å¾Â³,4775,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Judie Tzuke,4771,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Botellita de Jerez,5074,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¦ÃŠÂ±j,5077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Biohazard,5089,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÂ·Ã“Â½Ã·Ã«,5091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sister Hazel,5511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Krezip,5466,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Various/Hits Ãœber 30 CD3,5462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â±Â±Ã¤Â¸â€¹Ã©?â€Ã©Æ’Å½,5448,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Javier SolÃ­s,5440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂµÃ£â€šÂ¤Ã£â€šÂ±Ã£â€šÂ¢Ã£â€šÂ¦Ã£Æ’â€ž,5408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lenny Kravitz,5385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã­Â³ Ã‹Ã®Ã°Ã Ãª,5360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Liza,5358,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Daniel KÃ¼blbÃ¶ck,5314,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚Ã¨Ã±Ã®ÃªÃ®Ã±Ã­Ã»Ã© Ã£Ã®Ã¤,5302,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Prozzak,5268,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,UstmamÃ²,5261,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Piero PelÃ¹,5224,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SinÃ©ad O'Connor,5191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kreuzfeuer,5185,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã†Ã Ã±Ã¬Ã¨Ã­,5144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ­ÃŽÂº,5130,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â§Ã¹Â¼wÂ°Â¶,5116,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Organization S.F.,5104,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tezkej Pokondr,5101,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Razz,5096,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,88nÃ£o!,5094,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AlizÃ©e,4768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Phil Keaggy, Wes King, Scott DentÃ©",4753,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Better Than Ezra,4750,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AbwÃ¤rts,4419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ColetÃ¢nea,4398,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Anzen Chitai,4396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‰Ã¹Ã¡Ã­Ã­ÃŸÃ¤Ã§Ã² ÃÃ«ÃªÃŸÃ­Ã¯Ã¯Ã²,4385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lamont Dozier,4369,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pidzama Porno,4368,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ½Ã°Ã°Ã¨Ã¬Ã®Ã°,4354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FranÃ§oise Hardy,4322,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DJ Tsuyoshi Suzuki,4314,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jaymz Nylon,4299,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jose Fernadndez & Wadih El-Safi,4293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tony! Toni! TonÃ©!,4285,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frankie \Bones\ + Tommy Musto,4284,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¶Ã€Â°Â¶Â©Ãº,4273,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ Ã© ÃŒÃ¥Ã²Ã®Ã¢,4266,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÂºÃ‚Â©g,4258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Michel Verpeaux et FranÃ§ois Chevalierouvernement,4253,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã—Ã Ã©Ã´,4252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¤kÂ¤lÂ¤QÂ¤GÂ¼Ã–Â§{,4230,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,4222,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Catburglaz,4210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ‰ÃÃƒÃŠÃÃ•Ã“Ã‡ Ã‹Ã‰Ã”Ã“Ã,4201,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Andre Hazes,4194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frenzal Rhomb,4180,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¶'Ã¸Ã¶'Ã©Ã¬Ã©Ã­,4399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Koncz Zsuzsa,4435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,IllÃ©s,4748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Amon DÃ¼Ã¼l II,4465,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sissel KyrkjebÃ¸,4738,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Breeze,4733,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¦ÃŠÂ±j,4724,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Herbert GrÃ¶nemeyer,4711,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã—Ã¥Ã°Ã­Ã»Ã© Ã‹Ã³ÃªÃ¨Ã·,4708,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Segismundo ToxicÃ³mano,4692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ Ã§Ã­Ã»Ã¥ Ã¨Ã±Ã¯Ã®Ã«Ã­Ã¨Ã²Ã¥Ã«Ã¨,4680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Razormaid,4676,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã±Ã¥Ã³ Ã²Ã¥Ã°Ãº Ã¤ÃºÃ´Ã¥Ã¦Ã©Ã­ - Ã¡Ã²Ã¸Ã©Ã«Ãº Ã·Ã¥Ã¨Ã°Ã¸,4657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,PÃ¡l Utcai FiÃºk,4649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Dave Bainbridge, David Fitzgerald & David Adam",4639,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Â±ÂµÂµÃ‡Ã¶Â¹ÃªÂµÃ¥,4625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â®â€°Ã¨Â¥Â¿Ã£?Â²Ã£â€š?Ã£?â€œ,4592,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Los DorÃ©,4573,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sezen Aksu,4552,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾GÂ¶iÂ¤@,4551,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‹Ã¥Ã®Ã­Ã¨Ã¤ Ã‘Ã¥Ã°Ã£Ã¥Ã¥Ã¢,4547,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zen CafÃ©,4527,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Masizzo,4526,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZorÃ¡n,4522,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Teddy Randazzo,4510,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LÃºcia Moniz,4479,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¤Ã¨Ã€AÃ€s,4476,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Stefan Lazarevic,3070,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rokia TraorÃ©,3010,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LeÃ¦ther Strip,3004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JÃ¶rg Hilbert & Felix Janosa,1822,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Behzad,1908,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Perpetuum Jazzile,1897,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±Ã¨Â¿ÂµÂµÂ¿,1893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Faux Paz,1873,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SkÃ¦rmtrolden Hugo,1862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã’Â¸Â®Â¿Â¤,1853,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Diomedes Diaz,1851,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MaurÃ­cio Tizumba,1849,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Luc de LarochelliÃ¨re,1842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Udo JÃ¼rgens,1830,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã•Ã…Â¹ÃºÃˆÃ™,1827,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TÃªtes Raides,1818,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Godzina Zero,2181,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Carmen Nebel prÃ¤s. Judith & Mel,1801,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Patricia Gonzalez,1797,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Udo JÃ¼rgens,1793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ¶rspiel,1785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Detlev JÃ¶cker,1768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Eglise sans frontiÃ¨re & friends,1755,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rozalla,1743,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¥Â³Â¶Ã§Â¾Å½Ã¥Ëœâ€°,1740,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ“ÂµÃºÃ…Ã¯,1712,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Cecilia GarcÃ­a Amaro,1703,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â«Â¸Â¨|Â«Ã­,1697,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZezÃ© di Camargo & Luciano,1911,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Loren Mazzacane Connors,1926,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AntonÃ­n DvorÃ¡kka Brankovic,1932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,1952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Miguel BosÃ©,2140,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ¦Ã£Æ’Â«Ã£Æ’â€¢Ã£Æ’Â«Ã£â€šÂº,2135,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LÃ©o FerrÃ©,2133,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rodrigo LeÃ£o,2117,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥?Â¤Ã¥â€ â€¦Ã¦?Â±Ã¥Â­?,2110,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,2100,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Celso PiÃ±a,2082,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mazzy Star,2079,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã’Ã‡Ã¢,2072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã Ã©Ã´Ã¤ Ã¤Ã©Ã¬Ã£,2062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AzÃºcar Moreno,2052,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Artistes variÃ©s,2049,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Paolo Meneguzzi,2042,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kelly PatrÃ­cia,2036,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,RomÃ©o Vaduva,2033,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Chris Lizotte,2027,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MAHOÃ¥Â â€šÃ£Æ’Â»Ã¤Â»â€“,2021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Proyecto Alabanza y AdoraciÃ³n,2011,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÂ¹Â®Ã‰Ã‚Ã—,2009,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tito Rodriguez And His Orchestra,2005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â·?Ã¦Â¾â€žÃ§Â¶Â¾Ã¥Â­?,2004,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"StyÂ³a, Adams, Dickens",1963,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Martti \Huuhaa\ Innanen,1957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Manuel,1690,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â©PÂµÃ˜Â°Â·,1688,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Elza Soares,1683,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frilly Lizard,1433,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DrÃ¦sinebanden,1411,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tuta&KÃ¶r,1402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ‹Ã•ÃŠÃ…Ã‘Ã‰Ã,1400,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lillian BouttÃ©,1386,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazz Inspiration Records,1385,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jim Pepper Â· Claudine Francois Trio,1367,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³ÂªÃ€Â±Â¼Â±,1357,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Papa Bue's Viking Jazzband,1354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Gillespie, Dizzy",1341,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,jazz fm,1322,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Revolution magazine,1318,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazz at Midnight,1304,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dizzy Gillespie,1298,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Caltech Jazz Bands,1284,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerlad,1283,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Spiel Acid Jazz Band,1255,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,smooth jazz sampler,1237,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,InquisiciÃ³n,1236,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Various (Ã€ÃŒÃÂ¤Â½Ã„Ã€Ã‡ '0'Â½ÃƒÃ€Ã‡ Ã€Ã§ÃÃ®),1234,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazzfestival vol. 11,1233,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Amazing Grace,1221,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Nara LeÃ£o,1211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jacob Fred Jazz Odyssey,1203,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AgustÃ­n Magaldi,1414,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ…ÃÃ Ã‚Ã…ÃÃ…Ã”Ã“ÃÃÃÃ•,1438,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Luiz Carlos da Vila,1679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gaberlunzie,1447,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯ÂºÃ¶Â­s,1677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Eugenia LeÃ³n,1661,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Obie Bermudez,1650,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Astor Piazzolla,1649,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¹ÃšÃÂ¤Ã‡Ã¶,1632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Owe ThÃ¶rnqvist,1607,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Compilation VariÃ©,1596,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rezistance,1592,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¥Â³Â¶Ã£?Â¿Ã£â€šâ€ Ã£??,1572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â¸â€¦Ã¨Â²Â´,1549,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Schubert,1513,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ°Ã Ã±Ã­Ã Ã¿ Ã¯Ã«Ã¥Ã±Ã¥Ã­Ã¼,1511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?â€¢Ã£?Â Ã£?Â¾Ã£?â€¢Ã£?â€”,1506,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,RenÃ© Froger,1494,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ivan Villazon,1486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã¬Ã»Ã±Ã«Ã®Ã¢Ã»Ã¥ Ã£Ã Ã«Ã«Ã¾Ã¶Ã¨Ã­Ã Ã¶Ã¨Ã¨,1480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Uwe HÃ¼bner,1478,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©?Å Ã¤Â½?Ã¦Å“ÂªÃ¦Â£Â®,1474,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Uwe HÃ¼bner,1472,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¼zÂ¼_,1462,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¨Ã Ã¨Ã¥,1459,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hans-JÃ¼rgen Hufeisen,1452,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LobÃ£o,1451,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TiÃ«sto,2149,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Augusto,2182,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŽÂ´Ã–ÂªÃ’Ã•ÃŠÃµÂ¼Ã’,2999,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã”Ã¡ Ã°Ã¡Ã©Ã¤Ã©Ãœ Ã¡Ã°' Ã´Ã§Ã­ ÃÃœÃ´Ã±Ã¡,2741,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,IvÃ¡n Villason & Franco ArgÃ¼ell,2805,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vroege vogelzang 3,2796,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ¹Ã£Æ’?Ã£Æ’Â£Ã£Æ’â‚¬Ã£Æ’Â©Ã£Æ’â€˜Ã£Æ’Â¼,2788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,2786,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DikÃ¨s/ A Vif,2785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Traste LindÃ©ns kvintett,2781,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â­ÂµÂ¼Ã–Â®a,2772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wil Veloz,2758,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HomÃ¨re,2756,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ¡lin hans JÃ³ns mÃ­ns,2751,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jozef Benedik,2747,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦â€“Â°Ã¤Â¸â€“Ã§â€¢Å’Ã¦Â¥Â½Ã¦â€ºÂ²Ã©â€ºâ€˜Ã¤Â¼Å½Ã¥â€ºÂ£,2739,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Total Egon,Dennis och dom blÃ¥ apelsinerna t\",2183,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Matz Bladhs,2731,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Grzegorz Turnau,2726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Suzanne Vega,2725,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Choeur des Moines BÃ©nÃ©dictins de Santo Domingo de Silosvre GrÃ©gorien de Silos CD1,2718,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BANDA PEQUEÃ‘OS MUSICAL,2673,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mohammed Khaznadji,2667,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Jazz Cannon,2665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lutz GÃ¶rner,2659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‡Ã‘Â±Â¹Â¿Â¹Â¹Ã¨Ã€ÃŽÂµÂµÃ€ÃšÂ¸Ã°Ã€Ã“,2657,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Astor Piazzolla,2653,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Letzte Instanz,2620,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â¸Â¡Ã¨Â¾ÂºÃ£â‚¬â‚¬Ã§Â¾Å½Ã©â€¡Å’,2850,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã„Ã„Ã‡ÃŠÂ·Â¹Ã€ÃŒÂ¼Ã‡,2871,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JÃ¶rg Hilbert & Felix Janosa,2888,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Felipe RodrÃ­guez,2890,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Fabrizio De Andre',2991,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©?Å Ã¤Â½?Ã£â‚¬â‚¬Ã¦Å“ÂªÃ¦Â£Â®,2985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã­Ã­Ã  ÃƒÃ¥Ã°Ã¬Ã Ã­,2971,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zanzibar,2970,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¼zÂµY,2962,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ‰ÃÃÃÃ‡Ã“ ÃÃÃ‘Ã‰ÃÃ“,2958,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â°Â¾Ã¥Â´Å½Ã¤ÂºÅ“Ã§Â¾Å½,2957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,2945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ˜Â¹Ã”ÂµÃ’ Ã…Ã•ÂµÃ”Â¡Ã˜Ã…,2944,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Paul Schutze,2943,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,[Â¹Ã©Â´ÃœÃ‡Ã¢] Ã€ÃŒÂ±Ã¢Ã‚Ã¹ 5ÃÃ½,2936,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bernd KlÃ¼ser,2935,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Brian Setzer,2930,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Detlev JÃ¶cker,2929,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Moreira, Bezerra e Dicro",2912,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozone,2907,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¢Ã«ÃªÃ§Ã³Ã´Ã©Ã² ÃÃ±Ã¹Ã´Ã¯Ã¸ÃœÃ«Ã´Ã§,2906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ©lÃ¨ne,2903,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"FlÃ¶ckchen, Die",2902,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,CafÃ© Latino,2899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TrÃ­o Matamoros,2897,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Perez Prado,2892,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃˆÃ¢Ã Ã­ ÃŠÃ³Ã¯Ã Ã«Ã ,2891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DBG'z,2614,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±iÂ¾Ã‡Â¤Ã,2601,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ³Ã±Ã±ÃªÃ¨Ã© ÃÃ Ã§Ã¬Ã¥Ã°,2592,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TÃ¢nia Maria,2375,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jean C. RochÃ©,2351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bruno Schulz,2338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¤Ã½Â¤OÂ§Â»,2319,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Roger Sancheze Underground Classics),2315,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Badesalz,2295,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚ÃÃ“Ã‰Ã‹Ã‡Ã“ Ã”Ã…Ã‘Ã‹Ã…ÃƒÃŠÃÃ“,2288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Raulin Rodriguez,2281,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,DB Bass Killaz,2264,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¡Ã‘Â¹ÂµÃ Â¡Ã‘Ã…Ã‚Ã¬Â¨Ã’Ã„Â¡,2263,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,OperaciÃ³n Triunfo,2262,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,42 x Bulat Okudzawa,2249,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ZÃ© Ramalho,2238,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ¼rger Lars Dietrich,2233,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Los CaÃ±os,2231,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LAS NIÃ‘AS,2229,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ¶Â²QÂ©Ã‰,2221,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,YÃ¶lintu,2210,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,RenÃ© Shuman,2209,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Antonio Barros e CecÃ©u,2205,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Banda La CosteÃ±a,2199,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Norrmalms UngdomskÃ¶r,2197,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Stephan Remmler und die Schatzsucher,2193,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kristiina MÃ¤ki,2191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pancho barraza,2374,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃˆÃ¢Ã Ã­ ÃŠÃ³Ã·Ã¨Ã­,2408,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‹Ã©Ã´Ã³Ã¡ ÃƒÃ©Ã¡Ã£ÃªÃ¯Ã½Ã³Ã§,2590,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rionegro & SolimÃµes,2422,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ¸s Fenger,2567,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Trini Lopez,2548,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Detlev JÃ¶ker,2546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥â€™Å’Ã§â€Â°Ã¨â€“Â«,2540,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Andy Statman Klezmer Orchestrara,2537,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bazooka Band,2529,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pizzaman,2511,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dan Von Schultz,2504,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Al Saher, Kazim",2484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§â€¢Â Ã¥Â±Â±Ã£â‚¬â‚¬Ã§Â¾Å½Ã§â€Â±Ã§Â´â‚¬,2481,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Jaztronauts,2474,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pizzicato Five,2467,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’?Ã£â€šÂ«Ã£Æ’Â»Ã£Æ’â€“Ã£Æ’Â¼Ã£Æ’Â³,2466,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å“Å¸Ã¥Â³Â¶Ã¦ËœÅ’Ã¥Ë†Â©,2464,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±Ã¨Ã€Â±Â¾Ã†,2461,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?â€°Ã¥Â±Â±Ã¦Â¸â€¦Ã¨Â²Â´,2449,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¿Ã‹Â±Ã¢Ã€Ã¥Ã€ÃŒ [Potter]: ÃÂ¤Ã…Ã‚Â¼Âº-Â±Ã¨Â´Ã«ÃˆÂ¯,2442,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‡Ã¢Ã³ÃªÃ¨ ÃŒÃ“,2440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Raulin Rodriguez,2438,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©Â«ËœÃ¦Â©â€¹Ã¥Â¹Â¸Ã¥Â®?,2436,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Barrio Boyzz,2429,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â·Â¨Â¨Â¼Â©g,2426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wenzel,2423,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â¼ÂµÃ¥Â­Â¸Ã¥?â€¹,5512,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Schulze,5518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,genre,not_nullable,,,4700,
Column,artist,Check for *possibly* invalid symbols.,1,Die Meistersinger von NÃ¼rnberg,8736,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,frÃ©dÃ©ric chopin,8774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Georges Bizet,8768,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,W. A. Mozart,8767,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart by Otto Klemperer,8764,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bent SÃ¸rensen,8758,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang A. Mozart,8748,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Rudolf Baumgertner, conductor- W.A. Mozart",8747,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Leopold Mozart,8745,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FranÃ§ois Couperin,8744,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Prazak Quartet,8741,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Donizetti,8737,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vincenzo Bellini,8722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BACH - Dresdner Kreuzchor & Rudolf Mauersberger32 [CD 1],8670,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8714,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Salzburg Baroque Chamber Orchestra,8710,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frutos do EspÃ­rito,8703,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Carreras,8700,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,validmir ashkenazy (mozart),8694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,W.A. Mozart,8693,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Berlin Radio Symphony Orchestra - Heinz Rogneron,8692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Frederic Chopin (Alain PlanÃ©s),8681,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jiri VÃ¡lek (flute) - Josef HÃ¡la (piano)IEV - MARTINU - Flute Sonatas,8680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart - Le Quatuor Talich,8679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Arvo PÃ¤rt,8675,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,100 jaar Nederlandse zangkunst CD6 (Oratorium 2 en liederen met orkest),8775,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,A. Campra - L'Europe Galante & Les FÃªtes VÃ©nitiennes,8780,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ¢Ã£Æ’Â³Ã£Æ’â€°Ã£Æ’Â¬Ã£Æ’Â»Ã£â€šÂ®Ã£Æ’Â£Ã£Æ’â€¹Ã£â€šÂªÃ£Æ’Â³,8791,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hor \Svetoslav Obretenov\,8802,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vladimir Horowitz,8908,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gabriel Garrido (dir)e Charcas (BolÃ­via),8906,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zuzana Ruzickova Cembalo,8896,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JoaguÃ­n Rodrigo,8895,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,W.A. Mozart - L.v.Beethovenssa solemnis op. 123 CD1,8893,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â®]Â«Ã˜Â¥Â­&SWEET STYLE,8889,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Haselboeck,8887,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Freiburger Vokalensemble (Wolfgang SchÃ¤fer)alt (Das deutsche Chorlied um 1600),8885,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Heinrich Ignaz Franz Biber,8884,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus MozartAcademy of St. Martin-in-the-Fields,8861,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃºsica sacra,8860,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8858,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart/Don Giovanni (Highlights),8854,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"J. M. Haydn, W. A. Mozarter verum corpus, Regina coeli",8852,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Mozart, W. A.Don Giovanni (disc 1 of 3)",8851,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kazufumi Matsunaga,8845,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart (1756-1791),8840,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Bizet Hammerstein,8835,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"LehÃ¡r, Franz",8826,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Georges Bizet,8821,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ¢Ã£Æ’Â¼Ã£Æ’â€ Ã£â€šÂ£Ã£â€šÂ¹Ã£Æ’Ë†Ã¦Æ’â€¦Ã¥Â Â±Ã£?ÂªÃ£?â€”,8809,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8808,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kantemir TopluluÃ°u,8806,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart  P.Galli,8673,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,London Symphony Orchestra - SIR COLIN DAVISer Messias (AuszÃ¼ge in engl. Sprache),8665,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¸Ã©Ã·Ã© Ã¢Ã¬,5521,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Cengiz Kurtoglu,8391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Arthur Grumiaux, Heinz Holliger, Herman Krebberss/Double Concertos",8436,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã®Ã†Ã˜,8435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¶Ã€ÃƒÃ½Â¬Ã‚+Â¶Ã€Â¹Ã…Â¤d,8432,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jascha Heifetz,8430,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã„Ã Ã°Ã¨Ã£Ã  ÃÃ Ã§Ã Ã°Ã¡Ã Ã¥Ã¢Ã ,8424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Franz Schubert, Felix Mendelssohn and Johannes Brahms",8418,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vincenzo Bellini,8415,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AndrÃ© Rieu,8404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart36 \Salzburg,8403,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8399,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Johann Sebastian Bachz, Schmidt",8398,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Juanjo Dominguez,8379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ»egyetemi Zenekar Ã©s a MÃ»egyetemi KÃ³rusd haza\,8658,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AndrÃ© Verchuren,8378,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dresdner Kreuzchor,8373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"CSR Symphony Orchestra (Bratislava)zes, Polkas and Marches Vol. 2",8366,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Razumovsky Sinfonia - Alfred Walter,8357,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AndrÃ© Keijzer,8355,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Johan Sebastian Bach BWV 232 \ Herbert von Karajan /Berliner Philarmoniiker,8353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8348,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Schubert,8345,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozartn Dances - H. Von Karajan,8338,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,PÃ¡ll RÃ³sinkranz,8337,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Miklos Roza,8444,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃˆÃ®Ã£Ã Ã­Ã­ Ã˜Ã²Ã°Ã Ã³Ã±,8448,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8449,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Christophe GlÃ¼ck,8468,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ©la BartÃ³k,8651,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Georges Bizet,8633,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃºsica en Daroca,8625,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8621,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Szakcsi,8618,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³\\Â´ÂºÂ²E,8612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8602,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã“Ã¡Â²Â®ÃÂ¥,8586,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â»Ã§Â¶Ã»Ã€Ã‡ Â³Â¯Â°Â³,8581,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JoÃ£o Carlos Martins,8580,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Johann StrauÃŸ,8572,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Berlioz,8565,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sverrir GuÃ°jÃ³nsson,8562,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Geoge Szell - London Symphony Orchestranaben Wunderhorn,8561,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾HÃ„RÂ§g,8560,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ©lÃ¨ne Segara,8527,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Johannes R. KÃ¶hler,8524,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Orquestra FilarmÃ´nica Nazarena de Campinas e Coral,8518,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Jozef Sluys (Martinuskerk, Cuijk)",8499,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8492,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"LÃ©on BoÃ«llmann (Cello - Oliver Glendhill, Piano - Jeremy Filsell)nch Romantacism I",8488,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,George Gershwin In Blue\,8481,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Georges Bizet,8480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart(1756-1791)harmoniker Vol. 2,8910,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Stravinsky\Columbia Symphony OrchestraStravinsky--Symphonies, I",8921,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"HÃ¤ndel, George Frideric, Israel in Egypt, Kings Collelge Choir Cambridge, Brandenburg Consort Stephen Cleobury",8924,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã’Â¸Â®Â¿Â¤,9353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AnnÃ©es 80 #1,9482,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BuÂ³at OkudÂ¿awa,9440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÃ³Ã°Ã§Ã¨Ã«ÃªÃ¨ International,9438,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Jazzmasters,9434,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â°?Ã©â€¡Å½Ã£Æ’ÂªÃ£â€šÂµ,9422,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Los CaÃ±os,9401,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LOTTE OG SÃ˜REN,9396,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ©Ã¾Ã±Ã£Ã¯Ã² Ã”Ã³Ã¡Ã«ÃŸÃªÃ§Ã²,9391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Los CaÃ±os,9387,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Eros Ramazzotti,9367,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Jazzmasters,9364,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â²ÃŒÃ‡Ã™,9350,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8925,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¸mmÃ¸l Spellmannslag,9346,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÃ³Ã°Ã§Ã¨Ã«ÃªÃ¨ International,9345,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â²ÃŒÃ‡Ã™,9343,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ©Ã¾Ã±Ã£Ã¯Ã² Ã”Ã³Ã¡Ã«ÃŸÃªÃ§Ã²,9339,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Ã’Â¸Â®Â¿Â¤,9337,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÂ¤ÃƒÃŽ,9336,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,9320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Studio Cutz,9314,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Explode CoraÃ§Ã£o,9307,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ãœmit Besen,9305,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃŸÃªÃ¯Ã² ÃÃ¯Ã±Ã´Ã¯ÃªÃœÃ«Ã¯Ã£Ã«Ã¯Ãµ,9301,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AnnÃ©es 80,9483,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Citizen Fish,9488,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lenny Kravitz,9499,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozzy Osbourne,9533,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,category,Check for invalid categories.,0,data,7,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,6,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,5,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,4,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,3,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,2,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,1,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÂ¤ÃƒÃŽ,9742,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Leon Redbone/Up a Lazy River,9737,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Yazoo,9719,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ¼sker DÃ¼,9717,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Citizen Fish,9705,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Krezip,9686,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ¶hse Onkelz,9670,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lenny Kravitz,9663,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Yazoo,9643,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Krezip,9640,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ill niÃ±o,9630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ¶hse Onkelz,9598,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦??Ã©â€¡Å’,9597,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozzy Osbourne,9581,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ill NiÃ±o,9536,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lotte & SÃ¸ren,9534,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±Ã¨ Â´Ã«ÃˆÂ«,9296,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Erich Kunzel & Cincinnati Pops Orchestra,9293,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸?Ã¦ËœÅ½,9276,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,,9030,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã®Ã„Ãˆ,9027,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ¡lin hans JÃ³ns mÃ­ns,9026,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FrÃ©dÃ©ric Chopin,9016,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TamÃ¡s VÃ¡sÃ¡ry - Lazar Berman - London Symphony Orchestrao No. 2 - Paganini Rhapsody,9015,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Aulos-BlÃ¤serquintett,9007,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,9002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Daniel Chorzempa,8995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8994,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jean-SÃ©bastien Bach,8990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚Ã¥Ã°ÃªÃ  Ã‘Ã¥Ã°Ã¤Ã¾Ã·ÃªÃ ,8984,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Musica Antiqua KÃ¶ln, R. Goebeler Music (Disk 8)",8983,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8972,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Haydn, Mozart, Beethoven - Das Streichquartett",8971,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vladimir Ashkenazy,8958,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Saebeltanz - Sarbe Dance,8954,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8952,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wolfgang Amadeus Mozart,8948,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vladimir Ashkenazy,8944,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Camerata FlorianÃ³polis,8937,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rondo' Veneziano,8936,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Rolf W. Kunz, Piano",8934,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Cziffra - Kersenbaum - Donohoe - Kogan - Fournier Les Concertos (Disk 2),8930,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Klassieke muziek,8929,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â»Â³Ã‹ÃœÃ€ÂµÃ‡Â·/Â¶Ã¤Â²ÃÃ€Ã»Ã‰Ã·Â¥Ã–Â¥Ã©Â¥Â¤Â¥Â¬Â¡Â¼ BGM,9029,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â®eÂ¯ÂªÂ¨Ã ,9038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥â€™Å’Ã§â€Â° Ã¨â€“Â«,9252,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,A LocomotÃ­v GT Ã–sszes Kislemeze (1972),9039,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ®Ã°Ã­Ã¥Ã«Ã¾Ãª ÃˆÃ£Ã®Ã°Ã¼,9242,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±iÂ¾Ã‡Â¤Ã,9235,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,PokÃ©mon,9233,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gilbert MontagnÃ©,9211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¢Ã­Ã­Ã¡ Ã‚ÃŸÃ³Ã³Ã§,9207,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die Ã„rzte,9202,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,KatinguelÃª,9187,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â°Ã»Â»Ã³Â¿Â±,9183,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AxÃ© Bahia 2001,9174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jack Nitzsche,9166,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¹â€¦Ã§Å¸Â³Ã¨Â­Â²,9146,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Raz Dwa Trzy,9141,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Regine Velasquez,9121,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Renato Braz,9120,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,9117,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,CAVE Ã¤Â¸Â¦Ã¦Å“Â¨Ã¥Â­Â¦,9106,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’Â¦Ã£Æ’â€¹Ã£â€šÂ¾Ã£Æ’Â³Ã£â€šÂ·Ã£Æ’â€¢Ã£Æ’Ë†,9093,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Luiz Gonzaga,9092,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’â€°Ã£Æ’Â©Ã£Æ’Å¾CD,9091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Roland HÃ¤ring,9088,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Regine Velasquez,9084,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Joseph Haydn,9071,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dean Koontz,9052,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wiener SÃ¤ngerknaben,8328,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vladimir Horowitz/Franz Liszt,8327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Johann StrauÃŸ,8321,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¼zÂµY,6634,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die Ã„rzte,6774,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ·Ã£Æ’Â§Ã£Æ’Æ’Ã£â€šÂ¯Ã£â€šÂ·Ã£Æ’â€ Ã£â€šÂ£Ã£Æ’Â¼Ã£â€šÂ·Ã£Æ’Â§Ã£Æ’Æ’Ã£â€šÂ«Ã£Æ’Â¼Ã£â€šÂºÃ£Æ’Â»Ã¯Â¼â€™,6772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Apoptygma Berzerk,6771,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â°?Ã¦Â¯â€Ã©Â¡Å¾Ã¥Â·Â»Ã£?â€¹Ã£?Â»Ã£â€šâ€¹,6747,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ¶hse Onkelz,6746,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚Ã«Ã Ã¤Ã¨Ã¬Ã¨Ã° ÃŠÃ³Ã§Ã¼Ã¬Ã¨Ã­,6745,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jennifer Lopez,6728,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€ÃªÃ¢Ã Ã°Ã¨Ã³Ã¬,6716,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Megaherz,6692,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¸Â¹Â¾Ã… ÃÃ”Â¹Â·Ã„Â·Â¸Ã”Ã¬,6683,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ib GrÃ¸nbech,6638,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¦?â€˜Ã£?â€šÃ£â€šâ€ Ã£?Â¿,6533,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃˆ-2,7051,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã¬Ã»Ã±Ã«Ã®Ã¢Ã»Ã¥ ÃƒÃ Ã«Ã«Ã¾Ã¶Ã¨Ã­Ã Ã¶Ã¨Ã¨,6524,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Squeeze,6503,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kelly Stoltz,6498,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jon Butcher Axis/A Stiff Little Breeze,6497,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Fugazi,6484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,HÃ©tkÃ¶znaPI CS@lÃ³dÃ¡sok,6480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,California Guitar Trioat \nMastellotto,6424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Edyta Bartosiewicz,6383,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MolodoÃ¯,6376,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ®Ãª ÃŽÃ±Ã²Ã°Ã®Ã¢Ã ,6375,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dezerter,6371,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die Prinzen,6786,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Bach, Johann Sebastian (played by Michel Chapuis)uvre DÂ´Orgue (Tome 3)",6791,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dr. ExplosiÃ³n,6793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Harpers Bizarre,6794,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃrafÃ¡r,7042,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Oddzial Zamkniety,7034,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?Â¾Ã§â€Â°Ã¨?â€“Ã¥Â­?,7015,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rio Negro & SolimÃµes,7005,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Olle LjungstrÃ¶m,6998,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ezginin GÃ¼nlÃ¼gÃ¼,6997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§â€°Â¹Ã¦â€™Â®,6990,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÂ¤Ã€Ã§Ã€Ã,6986,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SinÃ©ad Lohan,6960,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Atli & LeÃ³,6946,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Neil Young And Crazy Horse,6899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kudzu Kings,6891,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gavin Friday and the Man Seezer,6882,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,CsÃ¡szÃ¡r ElÃµd,6875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BjÃ¶rk,6862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Daz Dillinger,6858,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Å Ã¥Å½Å¸Ã£?â€šÃ£?Å¡Ã£?Â¿,6842,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mazapegul,6838,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The RockinÂ´Highliners,6831,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â°?Ã¦Å¾â€”Ã¦â€”Â­,6829,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Horizontal Ladies Club,6824,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pa-DÃ¶-DÃµ,6799,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Thin Lizard Dawn,6797,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Georg Danzer,6316,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â¬Ã•Â¼Ã¤,6308,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Citizen Fish,6306,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dezo Ursiny - Ivan Strpka,5921,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ãkos,5863,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MotÃ¶rhead,5859,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â½Ã…ÃˆÂ­ [SHINHWA],5857,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kozlo Swicky,5820,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã“Â¼ÂºÃ€Âº,5819,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Citizens' Utilities,5818,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ATARASSIAGRÃ¶P,5788,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lars WinnerbÃ¤ck,5762,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Straight Up Buzz,5749,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hubert-FÃ©lix ThiÃ©faine,5713,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ³Ã«Ã Ã­Ã®Ã¢Ã  Ã’.,5698,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Goca Trzan,5694,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â¸Â¡Ã¨Â¾ÂºÃ£â‚¬â‚¬Ã§Â¾Å½Ã©â€¡Å’,5689,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"TomÃ¡s, Nikolai",5682,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LegiÃ£o Urbanaecords,5677,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â²Â³Ã§â€Â°Ã§Â´â€Ã¥Â­?,5656,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¦hÂ¦Ã¬ÂºtÂ¥XÂªÃŒ,5652,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rosenstolz,5646,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Blechreiz,5630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ripcordz,5612,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Janez Detd.,5604,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,NoÃ¯,5523,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯ÂªÃ¢Ã„Ãµ,5522,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â§Ã…Â±Ã’Â½Ã¥,5875,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Toy Dollz,5947,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BabasÃ³nicos,6257,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ArpÃ¨ges,5957,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã«Ã¥ÃªÃ±Ã Ã­Ã¤Ã° ÃŒÃ Ã«Ã¨Ã­Ã¨Ã­,6217,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozone Quartet,6211,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¦Â¿Â²QÂ®R,6200,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Un pais de mÃºsica I,6182,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â²Â¢Ã§â€Â°Ã§Â â€Ã¤ÂºÅ’,6177,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,KispÃ¡l Ã©s a Borz,6175,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ¼llerbeat,6165,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€ÃÃ†Ã…Ã‹ÃˆÃŠÃ€ Ã‚Ã€ÃÃ“ÃŒ,6156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ManÃ¡,6105,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozzy Osbourne,6089,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â¤Â§Ã§â‚¬Â§Ã¨Â©Â Ã¤Â¸â‚¬,6085,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lenny Kravitz,6074,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã«Ã¥ÃªÃ±Ã¥Ã© ÃÃ®Ã¬Ã Ã­Ã®Ã¢,6060,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦ÂµÅ“Ã¥Â´Å½Ã£?â€šÃ£â€šâ€ Ã£?Â¿,6059,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jason Mraz,6058,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,El HorizontÃ©,6052,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Keziah Jones,6043,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾Â¤Â©Ãº,6038,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’â€”Ã£Æ’Â¬Ã£â€šÂ¤Ã£â€šÂ°Ã£â€šÂ¹,6000,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ°Ã¥Ã¬Ã Ã²Ã®Ã°Ã¨Ã©,5997,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pizza Crushers,5996,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hazel O'Connor,5984,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rapunzel M.A.P,5981,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SchwoiÃŸfuaÃŸ,7045,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¨Â¦Â³Ã¦Å“Ë†Ã£?â€šÃ£â€šÅ Ã£?â€¢,7070,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vincenzo Bellini,8316,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,7793,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂ¢Ã£Æ’Â«Ã£Æ’â€¢Ã£â€šÂ£Ã£Æ’Â¼,7897,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazzanova,7879,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¨Â¥Â¿Ã¥Å“Â­Ã¤Â¸â€°,7866,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥?â€šÃ¦Å“Â¬Ã£â€šÂµÃ£Æ’Ë†Ã£Æ’Â«,7864,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wayne Gratz,7859,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å¸Â³Ã¤Âºâ€¢Ã§Â«Å“Ã¤Â¹Å¸,7850,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦??Ã©â€¡Å’,7848,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â¸Æ’Ã¨Â¢â€¹Ã¥Â¯â€¦Ã¦Â³Â°,7846,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾Ã°Â´ÃÂ³Ã— Ã€ÃŒÂ¹ÃŸÂ°Ã¼,7844,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â²Â»ÃƒÃ·ÃÃ‹,7811,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â³Ã»F,7798,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,OrÃ¡culo - Rio Claro,7780,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ®Ã£Ã³ Ã‘Ã¢Ã¥Ã«Ã®,7077,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÂµÂ´Â§Â®ÂºqÂ¤Ã¢,7772,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,7726,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¸Â­Â¨Ã˜Â¶Â²,7710,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Liz McComb,7696,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,P.S. Corporation & Engadiner LÃ¤ndlerfrÃ¼nda,7691,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hiroshi Okazaki,7684,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Noir DÃƒÂ©sir,7679,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Doncaster Jazz Orchestra,7678,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sektion KuchikÃ¤schtli,7668,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Janne \Fjellis\ FjellstrÃ¶m,7666,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FrÃ©dÃ©ric Chopin,7659,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MENÃ¢â‚¬â„¢S5,7899,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Pe. JosÃ© de Freitas Campos,7904,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Derozer,7905,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Poor Baker's Dozen,7909,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Maurice AndrÃ©,8307,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Hainen, Elizabeth - Harp",8306,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mozart,8302,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zimerman-Boulez,8297,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"HÃ¤ndel, Georg Friedrich",8288,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Firoenza Cossotto,8287,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazz Jamaica All Stars,8183,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dreadzone,8172,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozomatli,8151,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mychael Danna & Tim ClÃ©ment,8141,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ®Ã·Ã­Ã»Ã¥ Ã‘Ã­Ã Ã©Ã¯Ã¥Ã°Ã»,8137,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?Â¾Ã¦ÂµÂ¦Ã¦Å“â€°Ã¥Â¸Å’,8119,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦??Ã©â€¡Å’,8100,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¨?â€™Ã¤Âºâ€¢Ã§â€Â±Ã¥Â®Å¸,8099,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Â«Â¹Ã¥â€ â€¦Ã£?Â¾Ã£â€šÅ Ã£â€šâ€ž,8093,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Olga Pozdnyakovskaya & Belaya Luna,8068,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦ÂµÂ·Ã¦?Â´Ã©Å¡Å ,8031,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£Æ’?Ã£Æ’Â¥Ã£Æ’Â¼Ã£Æ’ÂªÃ£Æ’Æ’Ã£Æ’â€”,8022,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã­Ã¤Ã°Ã¥Ã© ÃŠÃ«Ã¨Ã¬ÃªÃ®Ã¢Ã±ÃªÃ¨Ã©,8018,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TomÃ¡s San Miguel,7974,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rondo` Veneziano,7964,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ¶gel,7963,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,1.5 ÃªÃ£ Ã®Ã²Ã«Ã¨Ã·Ã­Ã®Ã£Ã® Ã¯Ã¾Ã°Ã¥,7945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Men Of Vizion,7630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¥Â³Â¶Ã£?Â¿Ã£â€šâ€ Ã£??,7624,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Luther \Houserocker\ Johnson,7606,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Charles Aznavour,7404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÃ“ÂµÃºÃ…Ã¯,7398,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â½?Ã©â€¡Å½Ã¥â€¦Æ’Ã¦ËœÂ¥,7373,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã—Ã¨Ã¦ & Co,7370,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Phillip Simon Goletz,7360,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‘Ã¥ÃªÃ²Ã®Ã° ÃƒÃ Ã§Ã ,7355,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã—Ã¥ Ã²Ã¥ Ã­Ã Ã¤Ã®,7351,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"RÃ¤uber, De",7300,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,TiÃ£o Carreiro & Partinho,7265,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â·sÃ„_Â®qÂ±dÂ¼Ã–Â¶Â¤,7262,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â±iÂ¬fÂªÃ›,7258,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Brian Setzer Orchestra,7256,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Denis Ã  Maurice,7250,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚Ã«Ã Ã¤Ã¨Ã¬Ã¨Ã° Ã€Ã±Ã¬Ã®Ã«Ã®Ã¢,7246,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mercedes Benz,7214,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JoÃ£o Victor & VinÃ­cius,7193,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Salty Dogz,7188,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Die schÃ¶nsten Westernmelodien,7184,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ozark Mountain Daredevils,7152,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â²ÃœÃ“Ã±ÃˆÃ™,7151,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Allen Frizzell,7140,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jimmy Gonzalez Y Grupo Mazz,7127,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Suzanne Laughlin,7125,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Alexander UmstÃ¤tter,7110,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾HÂ§Ã“Â¯E,7403,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦Â°Â´Ã¦Â¨Â¹Ã¥Â¥Ë†Ã£â‚¬â€¦,7412,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?Â¤Ã£â€šâ€œÃ£??,7590,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Âª@,7419,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å¸Â³Ã¥Â·?Ã£â€šÂ»Ã£Æ’Âª,7588,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lucky Evans Lopez,7573,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?Â­Ã£?Â´Ã£?â€šÃ¨Â»?Ã¥â€ºÂ£,7562,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¸Ã°Â¸Â§,7559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Astor Piazzolla-Jorge Oraison,7554,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,7546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rodolfo \Popo\ Sanchez & Yasu,7503,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Me'Shell NdegÃ©Ocello,7500,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å¡â€ Ã¥Â·?Ã§Â´â€Ã¥Â­?,7498,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Beirach, Huebner, Mraz",7485,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â©PÂ¿Â·,7480,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å¸Â³Ã¥Å½Å¸Ã¦â€¦Å½Ã¤Â¸â‚¬,7467,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Glenmark Eriksson StrÃ¶mstedt,7466,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Nara LeÃ£o,7455,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Kim Portnoy Jazz Orchestra,7454,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ManÃ¡,7448,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BÃ¤ck Tu DÃ¤ Ruuts,7447,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Alejandro Sanz,7441,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Big Bill Broonzy,7440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Cuby + Blizzards,7439,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,7433,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Black Eagle Jazz Band,7427,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Swedish Jazz Kings featuring Roy Williams,7426,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Leipziger Saxophon Quartettassages,1194,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?Â¾Ã¥Â±â€¦Ã¦â€¦Â¶Ã¥Â­?,1191,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald And Louis Armstrong,1187,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3380,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3487,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3486,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3483,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3423,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3418,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3413,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3411,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3392,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists Mixed by The Aloha Pussycats,3389,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3385,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3382,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3375,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,3236,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3374,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3372,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3371,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3370,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3369,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3356,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various The Emotion Collection,3307,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists. ColecciÃ³n Pop EspaÃ±ol,3305,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3259,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsxties,3254,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various mixed by Panacea,3251,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3496,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3517,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3518,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3527,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3727,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists),3725,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3722,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3719,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3708,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3704,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various/Dry Lungs V Disc 1,3692,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3685,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3681,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3672,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3662,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3653,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3649,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3610,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3597,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Var,3592,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3573,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3569,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3563,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,3545,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various - DjCke[ AS RETURNED!!!,3536,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3534,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various (ON .U Sound),3530,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3241,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3231,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Scott Williamson Jazz Quartet,1177,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2752,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists92 (CD1),2855,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2853,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2845,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2822,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2817,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2813,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2811,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2790,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2777,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2773,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2760,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2748,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3229,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2745,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2737,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2711,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2704,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2701,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2699,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2698,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2697,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2696,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2677,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2676,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artisti,2856,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2866,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2869,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2879,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3226,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,3207,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3205,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3203,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various (See Track Artists),3177,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3124,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3119,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3110,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3097,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3078,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3068,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3053,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3047,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsming,3027,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3025,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3021,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3020,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsxed by Gilles Peterson,3014,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2982,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2960,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2946,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2940,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2934,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3729,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3736,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3741,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4685,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,?? ?? ??,4967,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Palatine: The Factory Story (Various)s,4955,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4934,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4876,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4862,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4815,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4805,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various - Bored Generation,4787,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4706,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4689,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4688,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4677,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,3748,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4668,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4665,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4576,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4575,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artist,4474,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4457,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4456,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various CD3,4454,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,4451,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4434,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4387,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4982,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,4996,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5041,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5064,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,5476,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5470,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5469,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5468,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various/Hits Ãœber 30 CD3,5462,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5451,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5390,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5342,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5322,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5309,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5298,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5256,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5251,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5218,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsan James,5200,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5188,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5169,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5163,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5155,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,5153,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5150,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5141,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5127,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4349,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4348,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4333,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4046,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4002,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3981,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3975,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3960,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3951,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3930,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3925,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3924,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3921,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3919,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3898,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,3893,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,3881,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3873,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,3869,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3856,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3846,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3821,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3807,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3777,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,3776,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,3760,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artist,3751,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4015,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4060,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4317,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4074,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4315,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4305,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4304,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4296,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4295,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4283,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4259,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4255,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4244,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4200,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,4168,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4142,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4141,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4135,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4132,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,<various>,4129,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4124,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4119,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,4117,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4111,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various ArtistsD1,4094,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4090,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,4082,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2671,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2662,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2655,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various (Ã€ÃŒÃÂ¤Â½Ã„Ã€Ã‡ '0'Â½ÃƒÃ€Ã‡ Ã€Ã§ÃÃ®),1234,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1428,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1399,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1365,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1336,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1330,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1328,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1321,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1306,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1282,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1279,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1248,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1198,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1723,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,1195,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,1166,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1160,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1132,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1115,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1104,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1077,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1076,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1067,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1054,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1048,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1439,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1487,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1510,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1512,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1706,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1647,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1644,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1636,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,1619,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1613,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,1608,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1604,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1602,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,1595,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1591,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1590,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1581,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1578,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1576,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã¤Â¸Â­Ã¥Â³Â¶Ã£?Â¿Ã£â€šâ€ Ã£??,1572,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1564,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1562,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1557,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1526,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1525,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1522,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1519,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1035,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1001,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,999,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,480,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsings Of Traditional Irish Dance Music,434,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,417,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,406,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,376,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,321,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Native Artists,301,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,299,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,298,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,270,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,244,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,231,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,210,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,193,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,174,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,146,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,128,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistse 2,121,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,117,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,82,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsry CD2,66,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,57,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,51,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,????,15,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artist,471,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,493,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,969,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,496,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,892,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,885,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,870,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,843,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,840,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsw 1,838,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,827,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,769,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,762,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,760,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,757,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,751,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,745,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,719,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,713,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,712,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,709,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,SjÃ¶rÃ¶var Fabbe,680,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,636,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,625,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTISTS,617,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,519,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,499,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1722,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1738,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2649,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2358,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2419,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2416,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2411,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2390,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2388,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2383,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2381,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2379,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2371,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2363,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2361,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2330,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1750,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2329,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2326,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2324,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2322,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2317,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2302,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2285,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2271,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2248,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistes,2242,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2226,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2433,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2445,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2452,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2460,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2644,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2625,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,2610,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2606,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2587,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2581,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2572,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2556,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2551,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2539,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2534,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2527,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2522,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2514,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2506,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2505,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2503,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artista,2494,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2493,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2489,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2488,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2482,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2462,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2220,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2206,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2185,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1959,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1953,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1949,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1937,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,1936,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1931,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1929,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1928,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1913,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1898,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1891,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1886,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,1868,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1861,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1841,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1823,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,1776,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1771,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1770,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1767,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1763,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1756,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1753,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,1751,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1956,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1961,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,2176,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1966,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2173,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2172,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2171,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,2169,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2165,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2160,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2151,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2150,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2146,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2144,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2134,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2132,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistss],2119,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2088,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,2083,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2074,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2058,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,2028,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsng!,2025,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists los 70s,2013,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsder,1982,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,1974,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,1973,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5578,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5580,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5588,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LanÃ§ando as Redes,115,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Erich Kunz,176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Hezekiah Walker,162,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vanja Lazarova Dimitrova,160,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kazuhiko Kato,156,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The CÃ©ilÃ­ Bandits,152,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LÃ©a MendonÃ§a,145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Esma Redzepova,141,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Guzman,138,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ´ra-Per,134,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ© Reza,132,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Joan Baez,129,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?â€¢Ã£?Â Ã£?Â¾Ã£?â€¢Ã£?â€”,113,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Okay Temiz & The Zurna Project,381,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Stefan SundstrÃ¶m,109,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gerardo PeÃ±a,107,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,CiÃºnas,103,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tschou zÃ¤me!,80,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¼Â¼Â¹ÃŒÃ‡Ã‘Â¼Ã’Â¸Â® Â±Â¹Â¾Ã‡Â¼Â±Â±Â³Â´Ãœ,76,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Detlef JÃ¶cker,74,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Franz Lambert,71,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã±Ã¡Ã®Ã°Ã­Ã¨Ãª,68,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¿Ã€ÃÃŸÂ±Ã¢ÃˆÂ¹,65,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Nikos Hatzopoulos,63,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¿Â©Ã‡Ã _Â½ÂºÃ„Ã‰Ã„Â¡,61,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â°ÃÂ·Ã§Â±j,177,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã€Ã«Ã¥ÃªÃ±Ã Ã­Ã¤Ã° ÃÃ®Ã¢Ã¨ÃªÃ®Ã¢,180,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tomaz Pengov,186,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gutierrez Brothers,190,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Rockdrigo GonzÃ¡lez,379,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃƒÂ«Â®dÂ¡Â¢Ã‘Ã®ÃÂ¼Â¡Â¢Ã€Ã®Ã¨ÂªÂ¡Â¢Ã‚ÃžÂºÂ£Ã“Â¢,372,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Des Geyers Schwarzer Haufen,361,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sevillanas HistÃ³ricas,357,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Elfi Reitz,356,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tata Mirando en zijn zigeunerorkest,354,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SADIK GÃœRBÃœZ,353,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ivan I VrÃ¥a,329,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â½Â²Âµ^,327,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MachitÃºn,320,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MaÃ±a's,316,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Enzo Iannacci,297,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LÃ©a MendonÃ§a,292,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,AndrÃ©s Calamaro,280,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŽÃ•Ã„ÃÃŠÃ‡Ã“_Ã‘ÃÃ“ÃÃ•Ã‹Ã‡Ã“_Ã„Ã‡ÃˆÃ…Ã,269,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Chris Newman and MÃ¡ire NÃ­ Chathasaigh,240,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jari SillanpÃ¤Ã¤,235,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Carlos Nunez,224,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Lasse Stefanz,223,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Piotr Szczepanik,220,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¿Â¹Â¼Ã¶Ã€Ã¼ÂµÂµÂ´Ãœ,208,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Liz Barnes,203,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Raza India,201,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã§Å¸Â¢Ã¦Â²Â¢Ã¦Â°Â¸Ã¥?â€°,54,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©Ë†Â´Ã¦Å“Â¨Ã£?â€šÃ£?Â¿,52,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Ã®Ã«Ã¥Ã°Ã¤ Ã¹Ã¬ Ã¤Ã¢Ã¸Ã¥Ã¡,49,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9215,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9209,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ira Newborn And Various,9201,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9198,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9193,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9180,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9172,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists - Jatin Lalit,9171,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9169,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsoundtrack,9160,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various/ Two If By Sea,9154,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9152,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9143,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9136,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9130,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9118,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9096,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9085,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9061,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9060,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9057,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9024,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9022,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9021,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9210,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsharacter Image Song II,9234,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â±Â±Ã¥Â´Å½Ã£?Â¾Ã£?â€¢Ã£â€šË†Ã£?â€”,47,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9238,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Gazebo,31,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥?â€šÃ¦Å“Â¬Ã§Å“Å¸Ã§Â¶Â¾,30,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â±Â±Ã¥?Â£Ã§â„¢Â¾Ã¦?Âµ,27,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BernadÃ¨te BidÃ ude,26,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazz Signatures,25,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dingdong Avanzado,20,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¾Ã®Â¸Â°Ã€ÃŒ Worship,11,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Å â€¡Ã¥â€ºÂ£Ã¥â€ºâ€ºÃ¥Â­Â£,5,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¤Â¸Â­Ã¦?â€˜Ã©â€ºâ€¦Ã¤Â¿Å ,3,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists - Notting Hill,9758,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã¦??Ã©â€¡Å’,9597,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9443,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9309,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,9306,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9287,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9282,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9275,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,9274,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,9273,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9260,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9249,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9241,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9239,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ãmsir,380,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kalle AlmlÃ¶f,391,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9008,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Trad. Jazz Praise,932,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sonny Morris and Ken Colyer Jazz Band,1002,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,NguyÃªn LÃª,995,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Modern Jazz Trio,993,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‹ÃœÃ­Ã´Ã³Ã©Ã¡Ã² Ã“Ã´Ã¡Ã½Ã±Ã¯Ã²,992,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Magnolia Jazzband,989,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,"Liz Ilku, Harp and Vocals (with Warren Chiasson, Joe Vick, and Brian Brown)",985,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Great Jazz Legends CD 3,984,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,dziuda project,982,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Stan Getz,950,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¥Ã‰Â¸mÂ¯EÂ¤G (Koji Tamaki),949,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JÃ¸rgen Vestergaard,945,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Skitzo,930,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ãˆ. Ã†Ã¥Ã«Ã Ã­Ã­Ã Ã¿ Ã¨ Farlanders,395,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Preservation Hall Jazz Band,928,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,United Future Organization,916,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,United States Army Field Band Jazz Ambassadors,915,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Trotter TrioJazz,913,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,901,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,George Mraz,879,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¥Â²Â¡Ã¥Â®â€°Ã¨Å Â³Ã¦ËœÅ½,862,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã’Ã Ã²Ã¼Ã¿Ã­Ã  ÃÃ³Ã«Ã Ã­Ã®Ã¢Ã ,833,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jacuzzi,824,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŒÃ¥Ã«ÃœÃ² Ã†Ã¡Ã¶Ã¥ÃŸÃ±Ã§Ã²,785,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Basia Szarek,784,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,FrÃ©dÃ©ric Pocquet & Novelas tres,1021,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazz,1027,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Wayne Horvitz and Zony Mash,1031,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,San Francisco Klezmer Experience,1032,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¹ÃšÃÃ¸Â¿Âµ 6ÃÃ½[Game],1176,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ella Fitzgerald,1175,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,The Jazztown Trio,1174,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jazzman,1170,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Okay Temiz Magnetic Band,1161,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Branko Sukovez,1147,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,zzaj,1145,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Krzysztof Komeda,1144,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Szakcsi,1143,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MotÃ¶rhead,1133,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Chris Barber Jazz And Blues Band- Live 1998,1124,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Elizabeth Carthew,1112,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,St Christophers Jazz Band,1097,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Jerry Bergonzi,1094,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dizzy Gillespie,1091,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,David Doruzka,1083,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Sprinkhuizen Fennis & Didderen,1072,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã¦?Â¾Ã¥Â±â€¦Ã¦â€¦Â¶Ã¥Â­?,1071,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Boz Scaggs,1066,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Variety of Jazz Artists,1062,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,RenÃ© Sopa,1061,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Side Street Strutters Jazz Band,1045,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Klezroym,1039,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Steve Kritzer,783,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Nuorva & MÃ¤ki-Lohiluoma,777,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£â€šÂµÃ£â€šÂ¤Ã£â€šÂ²Ã£Æ’Â³Ã£â€šÂ¸,753,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ®Ã¬Ã Ã­ Ã’Ã°Ã ÃµÃ²Ã¥Ã­Ã¡Ã¥Ã°Ã£,543,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Enzo Avitabile,524,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‡Ã‘Â±Â¹Ã„ÃÃ†Â¼Â³Ã™Ã…Â»Â½ÃŒÂ¾Ã®ÃÃ®,515,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã©Â»â€™Ã§â„¢Â¾Ã¥?Ë†Ã¥Â§â€°Ã¥Â¦Â¹,510,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃÃ Ã¤Ã¥Ã¦Ã¤Ã  ÃÃ Ã¡ÃªÃ¨Ã­Ã ,506,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,QuilapayÃºn,503,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tuna de Ingenieros de TelecomunicaciÃ³n de Valencia,502,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,El flamenco a travÃ©s,500,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã Ã¸Ã©Ã· Ã Ã©Ã©Ã°Ã¹Ã¨Ã©Ã©Ã¯,486,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MarÃ­a Dolores Pradera,484,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ¡rios,482,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SpailpÃ­n,457,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Palemiger Spatzen,443,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Peter GrÃ¸nlund,442,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,LucÃ­a de la Cruz,441,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Vicente Fernandez,440,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Al-KindÃ®,437,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zeleziar,436,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¯Â«Ã˜Â¦~,435,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŽÃ«Ã¥Ã£ ÃŠÃ®Ã±Ã²Ã°Ã®Ã¢,433,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Buzzworld,424,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã‚Ã«Ã Ã¤Ã¨Ã¬Ã¨Ã° Ã‚Ã»Ã±Ã®Ã¶ÃªÃ¨Ã©,409,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Kazantzidis Stelios,404,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,VÃ­ctor Herdia,402,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â¤kÃnÂ¦XÂ°Ã›,527,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Tolcsvay BÃ©la,546,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MÃ¡rtires del compÃ¡s,734,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Okay Temiz,559,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Mazinho,733,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Fischer ChÃ¶re,731,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,MarÃ­a Dolores Pradera,722,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã£?Å¸Ã£?Â¾,706,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Zillertaler SchÃ¼rzenjÃ¤ger,703,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,ÃŠÃ®Ã°Ã®Ã«Ã¥Ã¢ Ã‚Ã¨ÃªÃ²Ã®Ã°,698,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã„Ã©ÃœÃ¶Ã¯Ã±Ã¯Ã©,689,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Seemanns-Chor \Elbe1\,685,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SjÃ¶rÃ¶var Fabbe,680,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Double Feature: Die 17 HippiesTreppe\,678,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,SÃ¡ & Guarabyra - Ao Vivo,669,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Â³Â¶Â¸Â¸Ã€Ã‡ Ã…Ã«Â±Ã¢Ã…Â¸,660,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Le MystÃ¨re Des Voix Bulgares,632,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Herschel Sizemore,630,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Eliza Carthy,618,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Carlos NÃºÃ±ez,615,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,StÃ©phane Durand,610,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,JosÃ¨ Feliciano,602,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Dizionario della canzone italiana,586,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,BregenzerwÃ¤lder Dorfmusikanten,581,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Renzo Arbore e l'Orchestra Italiana,569,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Suzanne McDermott,561,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for *possibly* invalid symbols.,1,Ã”Ã¨Ã«Ã¨Ã¯Ã¯ ÃŠÃ¨Ã°ÃªÃ®Ã°Ã®Ã¢,560,"def check_col_has_valid_characters(x: Any) -> bool:
    """"""Check for *possibly* invalid symbols.""""""

    # consider NaNs and floats to be invalid
    if not isinstance(x, str):
        return False

    invalid_symbols = set(
        ""\^z¤¦©¬®¯°±²³´µ¶¸¹º»¼½¾¿ÀÂÃÄÅÆÇÈÌÕÖÜàâäåçèéïð÷øùû˜ѼҸ€中俊劇四団季雅�""
    )
    for char in x:
        if char in invalid_symbols:
            return False

    chinese_pattern = re.compile(r""[\u4e00-\u9fff]"")  # CJK Unified Ideographs
    japanese_pattern = re.compile(
        r""[\u3040-\u30ff\u31f0-\u31ff\u3200-\u9faf]""
    )  # Hiragana, Katakana, CJK Unified Ideographs Extension A
    has_chinese = bool(chinese_pattern.search(x))
    has_japanese = bool(japanese_pattern.search(x))

    if has_chinese or has_japanese:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,9019,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8987,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artist,5590,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,6884,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7075,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7046,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7037,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7012,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6995,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6988,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6976,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,6932,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Pink Floyd Various,6920,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6904,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6893,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,6877,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,????,7543,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6872,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,6839,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6832,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6810,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6781,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various (Dance),6764,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6757,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6754,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6738,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6733,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6730,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsics,7095,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,7097,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7100,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7105,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7505,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7495,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7492,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7491,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,7443,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7431,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7420,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTISTS,7401,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Blues,7399,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7389,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7375,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,7369,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS,7335,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7278,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7277,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7244,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,7224,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7208,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7200,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Country,7176,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,7172,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7170,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7124,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6646,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6618,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTISTS,6604,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5940,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5930,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,5926,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5914,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5880,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5834,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5806,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTISTS,5776,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5769,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5754,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various South Islanders,5752,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5738,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5726,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5707,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5700,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5687,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5681,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5679,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5668,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5667,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5655,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5649,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5647,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,5635,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,5939,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6014,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6594,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6022,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6588,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,6546,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6542,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6530,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,6522,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6515,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6512,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6434,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6362,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Cumbia Mix (Various Artists),6355,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6292,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6291,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6289,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6286,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6261,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6256,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6229,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,6198,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6172,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6108,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6098,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6082,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,6037,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7521,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7549,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8978,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8356,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8555,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8550,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8541,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,8520,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8517,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8491,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8483,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8461,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8414,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8413,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8367,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8339,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7556,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8308,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8284,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8257,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8242,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8224,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistska compilation),8190,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8188,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8176,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,8171,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,8148,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Atrists,8144,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8594,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various artists,8608,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,"various, Orchestra of the hermitage State Museum, St. Petersburg Memoriam, In Memory of the Victims of Fascism and War",8619,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8626,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8962,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8955,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artists,8950,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various - Favourite Classic,8942,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various artistso e culture,8928,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8920,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8855,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8847,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8828,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8822,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8757,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8756,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8740,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8738,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8733,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8730,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,8720,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8707,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,8660,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8650,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artistsstra) [D. Gram],8643,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,various,8637,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8632,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8127,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTISTS.,8108,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,????,8105,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7880,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7876,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7875,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,VARIOUS ARTIST,7858,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã¦??Ã©â€¡Å’,7848,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7847,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7830,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,var,7795,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7781,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7759,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7727,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7720,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7719,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7716,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7713,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7674,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7661,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7656,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists - Edition Collage,7631,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7629,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã¤Â¸Â­Ã¥Â³Â¶Ã£?Â¿Ã£â€šâ€ Ã£??,7624,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7603,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã£?Â¤Ã£â€šâ€œÃ£??,7590,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7570,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7878,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7888,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8103,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7902,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Ã¦??Ã©â€¡Å’,8100,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8082,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8076,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8062,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8054,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8044,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8038,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8024,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8020,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8006,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,8005,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7986,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7983,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7981,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7957,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7951,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7936,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7926,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artist,7918,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7914,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7912,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7911,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,artist,Check for invalid artist values.,0,Various Artists,7907,"def check_artist_is_valid(x: Any) -> bool:
    """"""Check for invalid artist values.""""""

    various_artist_pattern = r""\b(various|various artist(s)?|var)\b""
    try:
        # match on variations of ""various"", ""various artist"",
        # ""various artists"", and ""var""; case-insensitive
        # also match 2 or more question marks like ""????"" or ""?? ??""
        if _match := re.search(various_artist_pattern, re.escape(x), re.IGNORECASE):
            if x != ""Various"":
                return False

        if ""??"" in x:
            return False
    except Exception:
        return False

    return True
"
Column,category,Check for invalid categories.,0,data,8,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,10,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,genre,not_nullable,,,3052,
Column,genre,not_nullable,,,3079,
Column,genre,not_nullable,,,3072,
Column,genre,not_nullable,,,3071,
Column,genre,not_nullable,,,3070,
Column,genre,not_nullable,,,3069,
Column,genre,not_nullable,,,3065,
Column,genre,not_nullable,,,3064,
Column,genre,not_nullable,,,3057,
Column,genre,not_nullable,,,3056,
Column,genre,not_nullable,,,3054,
Column,genre,not_nullable,,,3053,
Column,genre,not_nullable,,,3051,
Column,genre,not_nullable,,,3004,
Column,genre,not_nullable,,,3046,
Column,genre,not_nullable,,,3044,
Column,genre,not_nullable,,,3043,
Column,genre,not_nullable,,,3040,
Column,genre,not_nullable,,,3037,
Column,genre,not_nullable,,,3036,
Column,genre,not_nullable,,,3034,
Column,genre,not_nullable,,,3030,
Column,genre,not_nullable,,,3027,
Column,genre,not_nullable,,,3025,
Column,genre,not_nullable,,,3022,
Column,genre,not_nullable,,,3080,
Column,genre,not_nullable,,,3085,
Column,genre,not_nullable,,,3086,
Column,genre,not_nullable,,,3092,
Column,genre,not_nullable,,,3158,
Column,genre,not_nullable,,,3156,
Column,genre,not_nullable,,,3150,
Column,genre,not_nullable,,,3148,
Column,genre,not_nullable,,,3147,
Column,genre,not_nullable,,,3143,
Column,genre,not_nullable,,,3142,
Column,genre,not_nullable,,,3135,
Column,genre,not_nullable,,,3133,
Column,genre,not_nullable,,,3130,
Column,genre,not_nullable,,,3129,
Column,genre,not_nullable,,,3127,
Column,genre,not_nullable,,,3126,
Column,genre,not_nullable,,,3120,
Column,genre,not_nullable,,,3117,
Column,genre,not_nullable,,,3116,
Column,genre,not_nullable,,,3109,
Column,genre,not_nullable,,,3107,
Column,genre,not_nullable,,,3104,
Column,genre,not_nullable,,,3103,
Column,genre,not_nullable,,,3101,
Column,genre,not_nullable,,,3098,
Column,genre,not_nullable,,,3093,
Column,genre,not_nullable,,,3013,
Column,genre,not_nullable,,,3000,
Column,genre,not_nullable,,,2288,
Column,genre,not_nullable,,,2904,
Column,genre,not_nullable,,,2933,
Column,genre,not_nullable,,,2925,
Column,genre,not_nullable,,,2924,
Column,genre,not_nullable,,,2922,
Column,genre,not_nullable,,,2917,
Column,genre,not_nullable,,,2916,
Column,genre,not_nullable,,,2911,
Column,genre,not_nullable,,,2910,
Column,genre,not_nullable,,,2909,
Column,genre,not_nullable,,,2908,
Column,genre,not_nullable,,,2905,
Column,genre,not_nullable,,,2900,
Column,genre,not_nullable,,,2997,
Column,genre,not_nullable,,,2899,
Column,genre,not_nullable,,,2898,
Column,genre,not_nullable,,,2896,
Column,genre,not_nullable,,,2894,
Column,genre,not_nullable,,,2892,
Column,genre,not_nullable,,,2888,
Column,genre,not_nullable,,,2883,
Column,genre,not_nullable,,,2879,
Column,genre,not_nullable,,,2876,
Column,genre,not_nullable,,,2871,
Column,genre,not_nullable,,,2870,
Column,genre,not_nullable,,,2937,
Column,genre,not_nullable,,,2938,
Column,genre,not_nullable,,,2940,
Column,genre,not_nullable,,,2943,
Column,genre,not_nullable,,,2996,
Column,genre,not_nullable,,,2994,
Column,genre,not_nullable,,,2983,
Column,genre,not_nullable,,,2982,
Column,genre,not_nullable,,,2981,
Column,genre,not_nullable,,,2980,
Column,genre,not_nullable,,,2979,
Column,genre,not_nullable,,,2978,
Column,genre,not_nullable,,,2977,
Column,genre,not_nullable,,,2976,
Column,genre,not_nullable,,,2974,
Column,genre,not_nullable,,,2970,
Column,genre,not_nullable,,,2967,
Column,genre,not_nullable,,,2965,
Column,genre,not_nullable,,,2964,
Column,genre,not_nullable,,,2963,
Column,genre,not_nullable,,,2962,
Column,genre,not_nullable,,,2961,
Column,genre,not_nullable,,,2959,
Column,genre,not_nullable,,,2955,
Column,genre,not_nullable,,,2949,
Column,genre,not_nullable,,,2947,
Column,genre,not_nullable,,,2945,
Column,genre,not_nullable,,,3159,
Column,genre,not_nullable,,,3162,
Column,genre,not_nullable,,,3165,
Column,genre,not_nullable,,,3359,
Column,genre,not_nullable,,,3387,
Column,genre,not_nullable,,,3386,
Column,genre,not_nullable,,,3382,
Column,genre,not_nullable,,,3377,
Column,genre,not_nullable,,,3376,
Column,genre,not_nullable,,,3372,
Column,genre,not_nullable,,,3371,
Column,genre,not_nullable,,,3370,
Column,genre,not_nullable,,,3365,
Column,genre,not_nullable,,,3364,
Column,genre,not_nullable,,,3360,
Column,genre,not_nullable,,,3354,
Column,genre,not_nullable,,,3168,
Column,genre,not_nullable,,,3352,
Column,genre,not_nullable,,,3349,
Column,genre,not_nullable,,,3346,
Column,genre,not_nullable,,,3343,
Column,genre,not_nullable,,,3342,
Column,genre,not_nullable,,,3340,
Column,genre,not_nullable,,,3338,
Column,genre,not_nullable,,,3334,
Column,genre,not_nullable,,,3333,
Column,genre,not_nullable,,,3322,
Column,genre,not_nullable,,,3321,
Column,genre,not_nullable,,,3389,
Column,genre,not_nullable,,,3391,
Column,genre,not_nullable,,,3393,
Column,genre,not_nullable,,,3397,
Column,genre,not_nullable,,,3456,
Column,genre,not_nullable,,,3455,
Column,genre,not_nullable,,,3454,
Column,genre,not_nullable,,,3452,
Column,genre,not_nullable,,,3447,
Column,genre,not_nullable,,,3445,
Column,genre,not_nullable,,,3442,
Column,genre,not_nullable,,,3440,
Column,genre,not_nullable,,,3439,
Column,genre,not_nullable,,,3434,
Column,genre,not_nullable,,,3433,
Column,genre,not_nullable,,,3431,
Column,genre,not_nullable,,,3429,
Column,genre,not_nullable,,,3425,
Column,genre,not_nullable,,,3422,
Column,genre,not_nullable,,,3416,
Column,genre,not_nullable,,,3410,
Column,genre,not_nullable,,,3408,
Column,genre,not_nullable,,,3407,
Column,genre,not_nullable,,,3405,
Column,genre,not_nullable,,,3404,
Column,genre,not_nullable,,,3403,
Column,genre,not_nullable,,,3398,
Column,genre,not_nullable,,,3317,
Column,genre,not_nullable,,,3316,
Column,genre,not_nullable,,,3313,
Column,genre,not_nullable,,,3243,
Column,genre,not_nullable,,,3239,
Column,genre,not_nullable,,,3236,
Column,genre,not_nullable,,,3234,
Column,genre,not_nullable,,,3232,
Column,genre,not_nullable,,,3231,
Column,genre,not_nullable,,,3225,
Column,genre,not_nullable,,,3223,
Column,genre,not_nullable,,,3218,
Column,genre,not_nullable,,,3217,
Column,genre,not_nullable,,,3212,
Column,genre,not_nullable,,,3210,
Column,genre,not_nullable,,,3205,
Column,genre,not_nullable,,,3199,
Column,genre,not_nullable,,,3195,
Column,genre,not_nullable,,,3194,
Column,genre,not_nullable,,,3187,
Column,genre,not_nullable,,,3182,
Column,genre,not_nullable,,,3179,
Column,genre,not_nullable,,,3177,
Column,genre,not_nullable,,,3176,
Column,genre,not_nullable,,,3175,
Column,genre,not_nullable,,,3172,
Column,genre,not_nullable,,,3169,
Column,genre,not_nullable,,,3240,
Column,genre,not_nullable,,,3244,
Column,genre,not_nullable,,,3311,
Column,genre,not_nullable,,,3245,
Column,genre,not_nullable,,,3307,
Column,genre,not_nullable,,,3306,
Column,genre,not_nullable,,,3305,
Column,genre,not_nullable,,,3304,
Column,genre,not_nullable,,,3302,
Column,genre,not_nullable,,,3299,
Column,genre,not_nullable,,,3296,
Column,genre,not_nullable,,,3290,
Column,genre,not_nullable,,,3280,
Column,genre,not_nullable,,,3279,
Column,genre,not_nullable,,,3276,
Column,genre,not_nullable,,,3275,
Column,genre,not_nullable,,,3273,
Column,genre,not_nullable,,,3272,
Column,genre,not_nullable,,,3271,
Column,genre,not_nullable,,,3269,
Column,genre,not_nullable,,,3264,
Column,genre,not_nullable,,,3263,
Column,genre,not_nullable,,,3262,
Column,genre,not_nullable,,,3259,
Column,genre,not_nullable,,,3256,
Column,genre,not_nullable,,,3255,
Column,genre,not_nullable,,,3251,
Column,genre,not_nullable,,,2867,
Column,genre,not_nullable,,,2865,
Column,genre,not_nullable,,,2862,
Column,genre,not_nullable,,,2449,
Column,genre,not_nullable,,,2486,
Column,genre,not_nullable,,,2485,
Column,genre,not_nullable,,,2484,
Column,genre,not_nullable,,,2478,
Column,genre,not_nullable,,,2473,
Column,genre,not_nullable,,,2472,
Column,genre,not_nullable,,,2465,
Column,genre,not_nullable,,,2463,
Column,genre,not_nullable,,,2462,
Column,genre,not_nullable,,,2455,
Column,genre,not_nullable,,,2452,
Column,genre,not_nullable,,,2448,
Column,genre,not_nullable,,,2574,
Column,genre,not_nullable,,,2446,
Column,genre,not_nullable,,,2445,
Column,genre,not_nullable,,,2442,
Column,genre,not_nullable,,,2440,
Column,genre,not_nullable,,,2438,
Column,genre,not_nullable,,,2437,
Column,genre,not_nullable,,,2432,
Column,genre,not_nullable,,,2430,
Column,genre,not_nullable,,,2429,
Column,genre,not_nullable,,,2428,
Column,genre,not_nullable,,,2427,
Column,genre,not_nullable,,,2488,
Column,genre,not_nullable,,,2489,
Column,genre,not_nullable,,,2490,
Column,genre,not_nullable,,,2499,
Column,genre,not_nullable,,,2569,
Column,genre,not_nullable,,,2565,
Column,genre,not_nullable,,,2561,
Column,genre,not_nullable,,,2553,
Column,genre,not_nullable,,,2548,
Column,genre,not_nullable,,,2543,
Column,genre,not_nullable,,,2542,
Column,genre,not_nullable,,,2541,
Column,genre,not_nullable,,,2540,
Column,genre,not_nullable,,,2538,
Column,genre,not_nullable,,,2537,
Column,genre,not_nullable,,,2535,
Column,genre,not_nullable,,,2531,
Column,genre,not_nullable,,,2529,
Column,genre,not_nullable,,,2522,
Column,genre,not_nullable,,,2518,
Column,genre,not_nullable,,,2515,
Column,genre,not_nullable,,,2514,
Column,genre,not_nullable,,,2509,
Column,genre,not_nullable,,,2507,
Column,genre,not_nullable,,,2505,
Column,genre,not_nullable,,,2504,
Column,genre,not_nullable,,,2501,
Column,genre,not_nullable,,,2426,
Column,genre,not_nullable,,,2424,
Column,genre,not_nullable,,,2421,
Column,genre,not_nullable,,,2339,
Column,genre,not_nullable,,,2336,
Column,genre,not_nullable,,,2334,
Column,genre,not_nullable,,,2333,
Column,genre,not_nullable,,,2332,
Column,genre,not_nullable,,,2326,
Column,genre,not_nullable,,,2325,
Column,genre,not_nullable,,,2324,
Column,genre,not_nullable,,,2323,
Column,genre,not_nullable,,,2322,
Column,genre,not_nullable,,,2321,
Column,genre,not_nullable,,,2320,
Column,genre,not_nullable,,,2316,
Column,genre,not_nullable,,,2315,
Column,genre,not_nullable,,,2314,
Column,genre,not_nullable,,,2311,
Column,genre,not_nullable,,,2309,
Column,genre,not_nullable,,,2305,
Column,genre,not_nullable,,,2304,
Column,genre,not_nullable,,,2302,
Column,genre,not_nullable,,,2301,
Column,genre,not_nullable,,,2300,
Column,genre,not_nullable,,,2298,
Column,genre,not_nullable,,,2292,
Column,genre,not_nullable,,,2337,
Column,genre,not_nullable,,,2343,
Column,genre,not_nullable,,,2418,
Column,genre,not_nullable,,,2344,
Column,genre,not_nullable,,,2410,
Column,genre,not_nullable,,,2409,
Column,genre,not_nullable,,,2406,
Column,genre,not_nullable,,,2402,
Column,genre,not_nullable,,,2401,
Column,genre,not_nullable,,,2399,
Column,genre,not_nullable,,,2397,
Column,genre,not_nullable,,,2393,
Column,genre,not_nullable,,,2392,
Column,genre,not_nullable,,,2390,
Column,genre,not_nullable,,,2385,
Column,genre,not_nullable,,,2383,
Column,genre,not_nullable,,,2380,
Column,genre,not_nullable,,,2367,
Column,genre,not_nullable,,,2360,
Column,genre,not_nullable,,,2359,
Column,genre,not_nullable,,,2358,
Column,genre,not_nullable,,,2355,
Column,genre,not_nullable,,,2354,
Column,genre,not_nullable,,,2352,
Column,genre,not_nullable,,,2351,
Column,genre,not_nullable,,,2349,
Column,genre,not_nullable,,,2348,
Column,genre,not_nullable,,,2571,
Column,genre,not_nullable,,,2576,
Column,genre,not_nullable,,,2855,
Column,genre,not_nullable,,,2754,
Column,genre,not_nullable,,,2784,
Column,genre,not_nullable,,,2782,
Column,genre,not_nullable,,,2781,
Column,genre,not_nullable,,,2776,
Column,genre,not_nullable,,,2772,
Column,genre,not_nullable,,,2770,
Column,genre,not_nullable,,,2768,
Column,genre,not_nullable,,,2767,
Column,genre,not_nullable,,,2763,
Column,genre,not_nullable,,,2762,
Column,genre,not_nullable,,,2758,
Column,genre,not_nullable,,,2751,
Column,genre,not_nullable,,,2578,
Column,genre,not_nullable,,,2747,
Column,genre,not_nullable,,,2743,
Column,genre,not_nullable,,,2740,
Column,genre,not_nullable,,,2738,
Column,genre,not_nullable,,,2735,
Column,genre,not_nullable,,,2734,
Column,genre,not_nullable,,,2725,
Column,genre,not_nullable,,,2724,
Column,genre,not_nullable,,,2723,
Column,genre,not_nullable,,,2716,
Column,genre,not_nullable,,,2714,
Column,genre,not_nullable,,,2785,
Column,genre,not_nullable,,,2786,
Column,genre,not_nullable,,,2789,
Column,genre,not_nullable,,,2794,
Column,genre,not_nullable,,,2849,
Column,genre,not_nullable,,,2847,
Column,genre,not_nullable,,,2842,
Column,genre,not_nullable,,,2838,
Column,genre,not_nullable,,,2835,
Column,genre,not_nullable,,,2832,
Column,genre,not_nullable,,,2829,
Column,genre,not_nullable,,,2824,
Column,genre,not_nullable,,,2823,
Column,genre,not_nullable,,,2820,
Column,genre,not_nullable,,,2814,
Column,genre,not_nullable,,,2812,
Column,genre,not_nullable,,,2811,
Column,genre,not_nullable,,,2810,
Column,genre,not_nullable,,,2809,
Column,genre,not_nullable,,,2808,
Column,genre,not_nullable,,,2807,
Column,genre,not_nullable,,,2806,
Column,genre,not_nullable,,,2805,
Column,genre,not_nullable,,,2804,
Column,genre,not_nullable,,,2803,
Column,genre,not_nullable,,,2798,
Column,genre,not_nullable,,,2797,
Column,genre,not_nullable,,,2713,
Column,genre,not_nullable,,,2710,
Column,genre,not_nullable,,,2709,
Column,genre,not_nullable,,,2646,
Column,genre,not_nullable,,,2642,
Column,genre,not_nullable,,,2637,
Column,genre,not_nullable,,,2636,
Column,genre,not_nullable,,,2633,
Column,genre,not_nullable,,,2629,
Column,genre,not_nullable,,,2627,
Column,genre,not_nullable,,,2617,
Column,genre,not_nullable,,,2615,
Column,genre,not_nullable,,,2614,
Column,genre,not_nullable,,,2613,
Column,genre,not_nullable,,,2607,
Column,genre,not_nullable,,,2604,
Column,genre,not_nullable,,,2602,
Column,genre,not_nullable,,,2598,
Column,genre,not_nullable,,,2594,
Column,genre,not_nullable,,,2591,
Column,genre,not_nullable,,,2590,
Column,genre,not_nullable,,,2588,
Column,genre,not_nullable,,,2586,
Column,genre,not_nullable,,,2585,
Column,genre,not_nullable,,,2584,
Column,genre,not_nullable,,,2583,
Column,genre,not_nullable,,,2582,
Column,genre,not_nullable,,,2644,
Column,genre,not_nullable,,,2647,
Column,genre,not_nullable,,,2708,
Column,genre,not_nullable,,,2648,
Column,genre,not_nullable,,,2705,
Column,genre,not_nullable,,,2704,
Column,genre,not_nullable,,,2703,
Column,genre,not_nullable,,,2702,
Column,genre,not_nullable,,,2696,
Column,genre,not_nullable,,,2695,
Column,genre,not_nullable,,,2692,
Column,genre,not_nullable,,,2690,
Column,genre,not_nullable,,,2682,
Column,genre,not_nullable,,,2681,
Column,genre,not_nullable,,,2679,
Column,genre,not_nullable,,,2678,
Column,genre,not_nullable,,,2676,
Column,genre,not_nullable,,,2675,
Column,genre,not_nullable,,,2670,
Column,genre,not_nullable,,,2669,
Column,genre,not_nullable,,,2668,
Column,genre,not_nullable,,,2663,
Column,genre,not_nullable,,,2662,
Column,genre,not_nullable,,,2661,
Column,genre,not_nullable,,,2659,
Column,genre,not_nullable,,,2653,
Column,genre,not_nullable,,,2651,
Column,genre,not_nullable,,,3463,
Column,genre,not_nullable,,,3464,
Column,genre,not_nullable,,,3465,
Column,genre,not_nullable,,,4243,
Column,genre,not_nullable,,,4274,
Column,genre,not_nullable,,,4272,
Column,genre,not_nullable,,,4271,
Column,genre,not_nullable,,,4270,
Column,genre,not_nullable,,,4262,
Column,genre,not_nullable,,,4260,
Column,genre,not_nullable,,,4258,
Column,genre,not_nullable,,,4256,
Column,genre,not_nullable,,,4255,
Column,genre,not_nullable,,,4254,
Column,genre,not_nullable,,,4248,
Column,genre,not_nullable,,,4241,
Column,genre,not_nullable,,,4346,
Column,genre,not_nullable,,,4240,
Column,genre,not_nullable,,,4239,
Column,genre,not_nullable,,,4236,
Column,genre,not_nullable,,,4235,
Column,genre,not_nullable,,,4234,
Column,genre,not_nullable,,,4231,
Column,genre,not_nullable,,,4226,
Column,genre,not_nullable,,,4219,
Column,genre,not_nullable,,,4218,
Column,genre,not_nullable,,,4216,
Column,genre,not_nullable,,,4212,
Column,genre,not_nullable,,,4275,
Column,genre,not_nullable,,,4276,
Column,genre,not_nullable,,,4280,
Column,genre,not_nullable,,,4281,
Column,genre,not_nullable,,,4338,
Column,genre,not_nullable,,,4337,
Column,genre,not_nullable,,,4335,
Column,genre,not_nullable,,,4334,
Column,genre,not_nullable,,,4332,
Column,genre,not_nullable,,,4329,
Column,genre,not_nullable,,,4328,
Column,genre,not_nullable,,,4327,
Column,genre,not_nullable,,,4322,
Column,genre,not_nullable,,,4321,
Column,genre,not_nullable,,,4319,
Column,genre,not_nullable,,,4315,
Column,genre,not_nullable,,,4314,
Column,genre,not_nullable,,,4312,
Column,genre,not_nullable,,,4307,
Column,genre,not_nullable,,,4306,
Column,genre,not_nullable,,,4302,
Column,genre,not_nullable,,,4300,
Column,genre,not_nullable,,,4293,
Column,genre,not_nullable,,,4292,
Column,genre,not_nullable,,,4287,
Column,genre,not_nullable,,,4283,
Column,genre,not_nullable,,,4282,
Column,genre,not_nullable,,,4211,
Column,genre,not_nullable,,,4207,
Column,genre,not_nullable,,,4206,
Column,genre,not_nullable,,,4140,
Column,genre,not_nullable,,,4138,
Column,genre,not_nullable,,,4137,
Column,genre,not_nullable,,,4136,
Column,genre,not_nullable,,,4135,
Column,genre,not_nullable,,,4133,
Column,genre,not_nullable,,,4130,
Column,genre,not_nullable,,,4129,
Column,genre,not_nullable,,,4128,
Column,genre,not_nullable,,,4127,
Column,genre,not_nullable,,,4122,
Column,genre,not_nullable,,,4119,
Column,genre,not_nullable,,,4117,
Column,genre,not_nullable,,,4113,
Column,genre,not_nullable,,,4112,
Column,genre,not_nullable,,,4111,
Column,genre,not_nullable,,,4109,
Column,genre,not_nullable,,,4108,
Column,genre,not_nullable,,,4107,
Column,genre,not_nullable,,,4106,
Column,genre,not_nullable,,,4103,
Column,genre,not_nullable,,,4102,
Column,genre,not_nullable,,,4100,
Column,genre,not_nullable,,,4098,
Column,genre,not_nullable,,,4139,
Column,genre,not_nullable,,,4141,
Column,genre,not_nullable,,,4204,
Column,genre,not_nullable,,,4143,
Column,genre,not_nullable,,,4203,
Column,genre,not_nullable,,,4199,
Column,genre,not_nullable,,,4198,
Column,genre,not_nullable,,,4197,
Column,genre,not_nullable,,,4184,
Column,genre,not_nullable,,,4182,
Column,genre,not_nullable,,,4178,
Column,genre,not_nullable,,,4176,
Column,genre,not_nullable,,,4174,
Column,genre,not_nullable,,,4163,
Column,genre,not_nullable,,,4160,
Column,genre,not_nullable,,,4159,
Column,genre,not_nullable,,,4158,
Column,genre,not_nullable,,,4157,
Column,genre,not_nullable,,,4155,
Column,genre,not_nullable,,,4154,
Column,genre,not_nullable,,,4153,
Column,genre,not_nullable,,,4152,
Column,genre,not_nullable,,,4150,
Column,genre,not_nullable,,,4148,
Column,genre,not_nullable,,,4146,
Column,genre,not_nullable,,,4145,
Column,genre,not_nullable,,,4144,
Column,genre,not_nullable,,,4344,
Column,genre,not_nullable,,,4348,
Column,genre,not_nullable,,,4089,
Column,genre,not_nullable,,,4578,
Column,genre,not_nullable,,,4618,
Column,genre,not_nullable,,,4617,
Column,genre,not_nullable,,,4615,
Column,genre,not_nullable,,,4613,
Column,genre,not_nullable,,,4606,
Column,genre,not_nullable,,,4602,
Column,genre,not_nullable,,,4593,
Column,genre,not_nullable,,,4590,
Column,genre,not_nullable,,,4588,
Column,genre,not_nullable,,,4586,
Column,genre,not_nullable,,,4581,
Column,genre,not_nullable,,,4574,
Column,genre,not_nullable,,,4349,
Column,genre,not_nullable,,,4572,
Column,genre,not_nullable,,,4569,
Column,genre,not_nullable,,,4568,
Column,genre,not_nullable,,,4564,
Column,genre,not_nullable,,,4561,
Column,genre,not_nullable,,,4556,
Column,genre,not_nullable,,,4554,
Column,genre,not_nullable,,,4553,
Column,genre,not_nullable,,,4548,
Column,genre,not_nullable,,,4543,
Column,genre,not_nullable,,,4536,
Column,genre,not_nullable,,,4619,
Column,genre,not_nullable,,,4624,
Column,genre,not_nullable,,,4627,
Column,genre,not_nullable,,,4628,
Column,genre,not_nullable,,,4698,
Column,genre,not_nullable,,,4693,
Column,genre,not_nullable,,,4690,
Column,genre,not_nullable,,,4689,
Column,genre,not_nullable,,,4688,
Column,genre,not_nullable,,,4684,
Column,genre,not_nullable,,,4683,
Column,genre,not_nullable,,,4677,
Column,genre,not_nullable,,,4674,
Column,genre,not_nullable,,,4673,
Column,genre,not_nullable,,,4671,
Column,genre,not_nullable,,,4670,
Column,genre,not_nullable,,,4668,
Column,genre,not_nullable,,,4662,
Column,genre,not_nullable,,,4660,
Column,genre,not_nullable,,,4651,
Column,genre,not_nullable,,,4644,
Column,genre,not_nullable,,,4642,
Column,genre,not_nullable,,,4638,
Column,genre,not_nullable,,,4636,
Column,genre,not_nullable,,,4635,
Column,genre,not_nullable,,,4634,
Column,genre,not_nullable,,,4631,
Column,genre,not_nullable,,,4532,
Column,genre,not_nullable,,,4531,
Column,genre,not_nullable,,,4530,
Column,genre,not_nullable,,,4444,
Column,genre,not_nullable,,,4437,
Column,genre,not_nullable,,,4434,
Column,genre,not_nullable,,,4432,
Column,genre,not_nullable,,,4428,
Column,genre,not_nullable,,,4427,
Column,genre,not_nullable,,,4423,
Column,genre,not_nullable,,,4412,
Column,genre,not_nullable,,,4410,
Column,genre,not_nullable,,,4407,
Column,genre,not_nullable,,,4405,
Column,genre,not_nullable,,,4404,
Column,genre,not_nullable,,,4400,
Column,genre,not_nullable,,,4394,
Column,genre,not_nullable,,,4386,
Column,genre,not_nullable,,,4384,
Column,genre,not_nullable,,,4366,
Column,genre,not_nullable,,,4363,
Column,genre,not_nullable,,,4362,
Column,genre,not_nullable,,,4357,
Column,genre,not_nullable,,,4355,
Column,genre,not_nullable,,,4353,
Column,genre,not_nullable,,,4351,
Column,genre,not_nullable,,,4350,
Column,genre,not_nullable,,,4443,
Column,genre,not_nullable,,,4446,
Column,genre,not_nullable,,,4529,
Column,genre,not_nullable,,,4448,
Column,genre,not_nullable,,,4528,
Column,genre,not_nullable,,,4525,
Column,genre,not_nullable,,,4519,
Column,genre,not_nullable,,,4517,
Column,genre,not_nullable,,,4516,
Column,genre,not_nullable,,,4515,
Column,genre,not_nullable,,,4509,
Column,genre,not_nullable,,,4506,
Column,genre,not_nullable,,,4500,
Column,genre,not_nullable,,,4494,
Column,genre,not_nullable,,,4491,
Column,genre,not_nullable,,,4487,
Column,genre,not_nullable,,,4484,
Column,genre,not_nullable,,,4478,
Column,genre,not_nullable,,,4469,
Column,genre,not_nullable,,,4468,
Column,genre,not_nullable,,,4463,
Column,genre,not_nullable,,,4462,
Column,genre,not_nullable,,,4460,
Column,genre,not_nullable,,,4459,
Column,genre,not_nullable,,,4457,
Column,genre,not_nullable,,,4456,
Column,genre,not_nullable,,,4451,
Column,genre,not_nullable,,,4092,
Column,genre,not_nullable,,,4085,
Column,genre,not_nullable,,,3471,
Column,genre,not_nullable,,,3676,
Column,genre,not_nullable,,,3710,
Column,genre,not_nullable,,,3709,
Column,genre,not_nullable,,,3706,
Column,genre,not_nullable,,,3703,
Column,genre,not_nullable,,,3698,
Column,genre,not_nullable,,,3694,
Column,genre,not_nullable,,,3692,
Column,genre,not_nullable,,,3691,
Column,genre,not_nullable,,,3690,
Column,genre,not_nullable,,,3687,
Column,genre,not_nullable,,,3683,
Column,genre,not_nullable,,,3675,
Column,genre,not_nullable,,,3794,
Column,genre,not_nullable,,,3674,
Column,genre,not_nullable,,,3672,
Column,genre,not_nullable,,,3670,
Column,genre,not_nullable,,,3667,
Column,genre,not_nullable,,,3666,
Column,genre,not_nullable,,,3660,
Column,genre,not_nullable,,,3659,
Column,genre,not_nullable,,,3655,
Column,genre,not_nullable,,,3652,
Column,genre,not_nullable,,,3645,
Column,genre,not_nullable,,,3623,
Column,genre,not_nullable,,,3712,
Column,genre,not_nullable,,,3715,
Column,genre,not_nullable,,,3717,
Column,genre,not_nullable,,,3718,
Column,genre,not_nullable,,,3791,
Column,genre,not_nullable,,,3790,
Column,genre,not_nullable,,,3787,
Column,genre,not_nullable,,,3786,
Column,genre,not_nullable,,,3780,
Column,genre,not_nullable,,,3778,
Column,genre,not_nullable,,,3773,
Column,genre,not_nullable,,,3766,
Column,genre,not_nullable,,,3761,
Column,genre,not_nullable,,,3759,
Column,genre,not_nullable,,,3752,
Column,genre,not_nullable,,,3751,
Column,genre,not_nullable,,,3750,
Column,genre,not_nullable,,,3749,
Column,genre,not_nullable,,,3748,
Column,genre,not_nullable,,,3738,
Column,genre,not_nullable,,,3736,
Column,genre,not_nullable,,,3734,
Column,genre,not_nullable,,,3733,
Column,genre,not_nullable,,,3731,
Column,genre,not_nullable,,,3730,
Column,genre,not_nullable,,,3727,
Column,genre,not_nullable,,,3719,
Column,genre,not_nullable,,,3620,
Column,genre,not_nullable,,,3618,
Column,genre,not_nullable,,,3617,
Column,genre,not_nullable,,,3552,
Column,genre,not_nullable,,,3549,
Column,genre,not_nullable,,,3547,
Column,genre,not_nullable,,,3544,
Column,genre,not_nullable,,,3542,
Column,genre,not_nullable,,,3537,
Column,genre,not_nullable,,,3536,
Column,genre,not_nullable,,,3533,
Column,genre,not_nullable,,,3530,
Column,genre,not_nullable,,,3529,
Column,genre,not_nullable,,,3528,
Column,genre,not_nullable,,,3520,
Column,genre,not_nullable,,,3518,
Column,genre,not_nullable,,,3514,
Column,genre,not_nullable,,,3509,
Column,genre,not_nullable,,,3508,
Column,genre,not_nullable,,,3494,
Column,genre,not_nullable,,,3493,
Column,genre,not_nullable,,,3489,
Column,genre,not_nullable,,,3487,
Column,genre,not_nullable,,,3485,
Column,genre,not_nullable,,,3481,
Column,genre,not_nullable,,,3480,
Column,genre,not_nullable,,,3477,
Column,genre,not_nullable,,,3550,
Column,genre,not_nullable,,,3556,
Column,genre,not_nullable,,,3611,
Column,genre,not_nullable,,,3565,
Column,genre,not_nullable,,,3608,
Column,genre,not_nullable,,,3607,
Column,genre,not_nullable,,,3604,
Column,genre,not_nullable,,,3603,
Column,genre,not_nullable,,,3602,
Column,genre,not_nullable,,,3599,
Column,genre,not_nullable,,,3597,
Column,genre,not_nullable,,,3596,
Column,genre,not_nullable,,,3592,
Column,genre,not_nullable,,,3590,
Column,genre,not_nullable,,,3589,
Column,genre,not_nullable,,,3588,
Column,genre,not_nullable,,,3587,
Column,genre,not_nullable,,,3585,
Column,genre,not_nullable,,,3584,
Column,genre,not_nullable,,,3583,
Column,genre,not_nullable,,,3580,
Column,genre,not_nullable,,,3579,
Column,genre,not_nullable,,,3575,
Column,genre,not_nullable,,,3571,
Column,genre,not_nullable,,,3570,
Column,genre,not_nullable,,,3569,
Column,genre,not_nullable,,,3568,
Column,genre,not_nullable,,,3792,
Column,genre,not_nullable,,,3795,
Column,genre,not_nullable,,,4083,
Column,genre,not_nullable,,,3963,
Column,genre,not_nullable,,,4002,
Column,genre,not_nullable,,,3999,
Column,genre,not_nullable,,,3994,
Column,genre,not_nullable,,,3992,
Column,genre,not_nullable,,,3991,
Column,genre,not_nullable,,,3989,
Column,genre,not_nullable,,,3981,
Column,genre,not_nullable,,,3980,
Column,genre,not_nullable,,,3973,
Column,genre,not_nullable,,,3970,
Column,genre,not_nullable,,,3966,
Column,genre,not_nullable,,,3961,
Column,genre,not_nullable,,,3796,
Column,genre,not_nullable,,,3960,
Column,genre,not_nullable,,,3959,
Column,genre,not_nullable,,,3954,
Column,genre,not_nullable,,,3952,
Column,genre,not_nullable,,,3949,
Column,genre,not_nullable,,,3948,
Column,genre,not_nullable,,,3946,
Column,genre,not_nullable,,,3942,
Column,genre,not_nullable,,,3941,
Column,genre,not_nullable,,,3936,
Column,genre,not_nullable,,,3930,
Column,genre,not_nullable,,,4003,
Column,genre,not_nullable,,,4004,
Column,genre,not_nullable,,,4005,
Column,genre,not_nullable,,,4008,
Column,genre,not_nullable,,,4081,
Column,genre,not_nullable,,,4070,
Column,genre,not_nullable,,,4066,
Column,genre,not_nullable,,,4065,
Column,genre,not_nullable,,,4063,
Column,genre,not_nullable,,,4061,
Column,genre,not_nullable,,,4060,
Column,genre,not_nullable,,,4055,
Column,genre,not_nullable,,,4054,
Column,genre,not_nullable,,,4044,
Column,genre,not_nullable,,,4042,
Column,genre,not_nullable,,,4041,
Column,genre,not_nullable,,,4039,
Column,genre,not_nullable,,,4038,
Column,genre,not_nullable,,,4034,
Column,genre,not_nullable,,,4033,
Column,genre,not_nullable,,,4032,
Column,genre,not_nullable,,,4031,
Column,genre,not_nullable,,,4025,
Column,genre,not_nullable,,,4020,
Column,genre,not_nullable,,,4019,
Column,genre,not_nullable,,,4015,
Column,genre,not_nullable,,,4012,
Column,genre,not_nullable,,,3929,
Column,genre,not_nullable,,,3927,
Column,genre,not_nullable,,,3926,
Column,genre,not_nullable,,,3864,
Column,genre,not_nullable,,,3862,
Column,genre,not_nullable,,,3860,
Column,genre,not_nullable,,,3857,
Column,genre,not_nullable,,,3854,
Column,genre,not_nullable,,,3852,
Column,genre,not_nullable,,,3848,
Column,genre,not_nullable,,,3842,
Column,genre,not_nullable,,,3835,
Column,genre,not_nullable,,,3834,
Column,genre,not_nullable,,,3832,
Column,genre,not_nullable,,,3831,
Column,genre,not_nullable,,,3828,
Column,genre,not_nullable,,,3826,
Column,genre,not_nullable,,,3819,
Column,genre,not_nullable,,,3818,
Column,genre,not_nullable,,,3817,
Column,genre,not_nullable,,,3811,
Column,genre,not_nullable,,,3808,
Column,genre,not_nullable,,,3807,
Column,genre,not_nullable,,,3806,
Column,genre,not_nullable,,,3805,
Column,genre,not_nullable,,,3802,
Column,genre,not_nullable,,,3797,
Column,genre,not_nullable,,,3863,
Column,genre,not_nullable,,,3865,
Column,genre,not_nullable,,,3922,
Column,genre,not_nullable,,,3866,
Column,genre,not_nullable,,,3920,
Column,genre,not_nullable,,,3919,
Column,genre,not_nullable,,,3918,
Column,genre,not_nullable,,,3914,
Column,genre,not_nullable,,,3913,
Column,genre,not_nullable,,,3911,
Column,genre,not_nullable,,,3910,
Column,genre,not_nullable,,,3909,
Column,genre,not_nullable,,,3902,
Column,genre,not_nullable,,,3900,
Column,genre,not_nullable,,,3898,
Column,genre,not_nullable,,,3897,
Column,genre,not_nullable,,,3895,
Column,genre,not_nullable,,,3892,
Column,genre,not_nullable,,,3885,
Column,genre,not_nullable,,,3883,
Column,genre,not_nullable,,,3878,
Column,genre,not_nullable,,,3876,
Column,genre,not_nullable,,,3872,
Column,genre,not_nullable,,,3871,
Column,genre,not_nullable,,,3870,
Column,genre,not_nullable,,,3869,
Column,genre,not_nullable,,,3868,
Column,genre,not_nullable,,,2290,
Column,genre,not_nullable,,,2286,
Column,category,Check for invalid categories.,0,data,11,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,genre,not_nullable,,,679,
Column,genre,not_nullable,,,712,
Column,genre,not_nullable,,,711,
Column,genre,not_nullable,,,704,
Column,genre,not_nullable,,,702,
Column,genre,not_nullable,,,700,
Column,genre,not_nullable,,,697,
Column,genre,not_nullable,,,696,
Column,genre,not_nullable,,,687,
Column,genre,not_nullable,,,685,
Column,genre,not_nullable,,,684,
Column,genre,not_nullable,,,682,
Column,genre,not_nullable,,,671,
Column,genre,not_nullable,,,638,
Column,genre,not_nullable,,,670,
Column,genre,not_nullable,,,666,
Column,genre,not_nullable,,,663,
Column,genre,not_nullable,,,662,
Column,genre,not_nullable,,,658,
Column,genre,not_nullable,,,655,
Column,genre,not_nullable,,,654,
Column,genre,not_nullable,,,649,
Column,genre,not_nullable,,,648,
Column,genre,not_nullable,,,647,
Column,genre,not_nullable,,,645,
Column,genre,not_nullable,,,714,
Column,genre,not_nullable,,,715,
Column,genre,not_nullable,,,719,
Column,genre,not_nullable,,,724,
Column,genre,not_nullable,,,808,
Column,genre,not_nullable,,,807,
Column,genre,not_nullable,,,802,
Column,genre,not_nullable,,,801,
Column,genre,not_nullable,,,797,
Column,genre,not_nullable,,,795,
Column,genre,not_nullable,,,793,
Column,genre,not_nullable,,,775,
Column,genre,not_nullable,,,772,
Column,genre,not_nullable,,,771,
Column,genre,not_nullable,,,770,
Column,genre,not_nullable,,,768,
Column,genre,not_nullable,,,752,
Column,genre,not_nullable,,,751,
Column,genre,not_nullable,,,748,
Column,genre,not_nullable,,,747,
Column,genre,not_nullable,,,746,
Column,genre,not_nullable,,,743,
Column,genre,not_nullable,,,730,
Column,genre,not_nullable,,,729,
Column,genre,not_nullable,,,728,
Column,genre,not_nullable,,,726,
Column,genre,not_nullable,,,725,
Column,genre,not_nullable,,,644,
Column,genre,not_nullable,,,637,
Column,genre,not_nullable,,,2285,
Column,genre,not_nullable,,,521,
Column,genre,not_nullable,,,546,
Column,genre,not_nullable,,,543,
Column,genre,not_nullable,,,541,
Column,genre,not_nullable,,,538,
Column,genre,not_nullable,,,537,
Column,genre,not_nullable,,,535,
Column,genre,not_nullable,,,534,
Column,genre,not_nullable,,,528,
Column,genre,not_nullable,,,527,
Column,genre,not_nullable,,,526,
Column,genre,not_nullable,,,523,
Column,genre,not_nullable,,,519,
Column,genre,not_nullable,,,633,
Column,genre,not_nullable,,,516,
Column,genre,not_nullable,,,508,
Column,genre,not_nullable,,,504,
Column,genre,not_nullable,,,503,
Column,genre,not_nullable,,,501,
Column,genre,not_nullable,,,499,
Column,genre,not_nullable,,,491,
Column,genre,not_nullable,,,489,
Column,genre,not_nullable,,,488,
Column,genre,not_nullable,,,487,
Column,genre,not_nullable,,,485,
Column,genre,not_nullable,,,547,
Column,genre,not_nullable,,,551,
Column,genre,not_nullable,,,552,
Column,genre,not_nullable,,,553,
Column,genre,not_nullable,,,632,
Column,genre,not_nullable,,,631,
Column,genre,not_nullable,,,623,
Column,genre,not_nullable,,,620,
Column,genre,not_nullable,,,612,
Column,genre,not_nullable,,,611,
Column,genre,not_nullable,,,607,
Column,genre,not_nullable,,,606,
Column,genre,not_nullable,,,604,
Column,genre,not_nullable,,,602,
Column,genre,not_nullable,,,601,
Column,genre,not_nullable,,,597,
Column,genre,not_nullable,,,596,
Column,genre,not_nullable,,,592,
Column,genre,not_nullable,,,589,
Column,genre,not_nullable,,,575,
Column,genre,not_nullable,,,572,
Column,genre,not_nullable,,,569,
Column,genre,not_nullable,,,564,
Column,genre,not_nullable,,,561,
Column,genre,not_nullable,,,560,
Column,genre,not_nullable,,,559,
Column,genre,not_nullable,,,558,
Column,genre,not_nullable,,,810,
Column,genre,not_nullable,,,814,
Column,genre,not_nullable,,,815,
Column,genre,not_nullable,,,996,
Column,genre,not_nullable,,,1025,
Column,genre,not_nullable,,,1024,
Column,genre,not_nullable,,,1018,
Column,genre,not_nullable,,,1016,
Column,genre,not_nullable,,,1013,
Column,genre,not_nullable,,,1011,
Column,genre,not_nullable,,,1008,
Column,genre,not_nullable,,,1004,
Column,genre,not_nullable,,,1003,
Column,genre,not_nullable,,,1000,
Column,genre,not_nullable,,,999,
Column,genre,not_nullable,,,995,
Column,genre,not_nullable,,,817,
Column,genre,not_nullable,,,991,
Column,genre,not_nullable,,,990,
Column,genre,not_nullable,,,989,
Column,genre,not_nullable,,,987,
Column,genre,not_nullable,,,984,
Column,genre,not_nullable,,,979,
Column,genre,not_nullable,,,975,
Column,genre,not_nullable,,,969,
Column,genre,not_nullable,,,967,
Column,genre,not_nullable,,,965,
Column,genre,not_nullable,,,963,
Column,genre,not_nullable,,,1028,
Column,genre,not_nullable,,,1029,
Column,genre,not_nullable,,,1030,
Column,genre,not_nullable,,,1034,
Column,genre,not_nullable,,,1081,
Column,genre,not_nullable,,,1080,
Column,genre,not_nullable,,,1079,
Column,genre,not_nullable,,,1077,
Column,genre,not_nullable,,,1074,
Column,genre,not_nullable,,,1068,
Column,genre,not_nullable,,,1067,
Column,genre,not_nullable,,,1066,
Column,genre,not_nullable,,,1064,
Column,genre,not_nullable,,,1063,
Column,genre,not_nullable,,,1062,
Column,genre,not_nullable,,,1061,
Column,genre,not_nullable,,,1060,
Column,genre,not_nullable,,,1058,
Column,genre,not_nullable,,,1055,
Column,genre,not_nullable,,,1053,
Column,genre,not_nullable,,,1050,
Column,genre,not_nullable,,,1047,
Column,genre,not_nullable,,,1046,
Column,genre,not_nullable,,,1045,
Column,genre,not_nullable,,,1042,
Column,genre,not_nullable,,,1038,
Column,genre,not_nullable,,,1035,
Column,genre,not_nullable,,,956,
Column,genre,not_nullable,,,955,
Column,genre,not_nullable,,,953,
Column,genre,not_nullable,,,886,
Column,genre,not_nullable,,,877,
Column,genre,not_nullable,,,869,
Column,genre,not_nullable,,,868,
Column,genre,not_nullable,,,861,
Column,genre,not_nullable,,,860,
Column,genre,not_nullable,,,859,
Column,genre,not_nullable,,,856,
Column,genre,not_nullable,,,855,
Column,genre,not_nullable,,,850,
Column,genre,not_nullable,,,847,
Column,genre,not_nullable,,,843,
Column,genre,not_nullable,,,842,
Column,genre,not_nullable,,,841,
Column,genre,not_nullable,,,837,
Column,genre,not_nullable,,,834,
Column,genre,not_nullable,,,832,
Column,genre,not_nullable,,,830,
Column,genre,not_nullable,,,829,
Column,genre,not_nullable,,,827,
Column,genre,not_nullable,,,823,
Column,genre,not_nullable,,,821,
Column,genre,not_nullable,,,820,
Column,genre,not_nullable,,,818,
Column,genre,not_nullable,,,879,
Column,genre,not_nullable,,,894,
Column,genre,not_nullable,,,952,
Column,genre,not_nullable,,,896,
Column,genre,not_nullable,,,948,
Column,genre,not_nullable,,,945,
Column,genre,not_nullable,,,944,
Column,genre,not_nullable,,,941,
Column,genre,not_nullable,,,940,
Column,genre,not_nullable,,,939,
Column,genre,not_nullable,,,936,
Column,genre,not_nullable,,,935,
Column,genre,not_nullable,,,934,
Column,genre,not_nullable,,,932,
Column,genre,not_nullable,,,928,
Column,genre,not_nullable,,,923,
Column,genre,not_nullable,,,922,
Column,genre,not_nullable,,,921,
Column,genre,not_nullable,,,920,
Column,genre,not_nullable,,,918,
Column,genre,not_nullable,,,913,
Column,genre,not_nullable,,,912,
Column,genre,not_nullable,,,910,
Column,genre,not_nullable,,,909,
Column,genre,not_nullable,,,900,
Column,genre,not_nullable,,,899,
Column,genre,not_nullable,,,898,
Column,genre,not_nullable,,,480,
Column,genre,not_nullable,,,479,
Column,genre,not_nullable,,,476,
Column,category,Check for invalid categories.,0,London Sym Orchlius Orch Wks Disc 2,8645,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9337,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9336,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9335,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9334,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9333,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,9332,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Music From The Motion Picure Soundtrack,9160,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,MILHAUD: Scaramouche,8980,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Opera Favourites/Orchestral Clasics ( disc 1 ),8772,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,P.J.Leusink (1992) / MatthÃ¤us Passion (cd 1),8728,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,French Clarinet Rhapsody,8709,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,The Devil Make Me Do It!,8575,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,genre,not_nullable,,,109,
Column,category,Check for invalid categories.,0,Cleopatre  (Tekanawa/Norman/Barenboim),8565,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,"Paul Rhodes or Mark Summer, cello",8557,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Haydn - Symphony No. 55 in E flat major \Schoolmaster\,8543,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Mome,8447,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Peter Mennin: Symphonies 3 & 7,8323,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Academy of St Martin in the Fields,8299,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,Gabriel Bacquier,8287,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,A Funky Thide Of Sings (1975),853,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,68,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,67,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,66,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,genre,not_nullable,,,1,
Column,genre,not_nullable,,,10,
Column,genre,not_nullable,,,11,
Column,genre,not_nullable,,,17,
Column,genre,not_nullable,,,100,
Column,genre,not_nullable,,,97,
Column,genre,not_nullable,,,96,
Column,genre,not_nullable,,,92,
Column,genre,not_nullable,,,91,
Column,genre,not_nullable,,,81,
Column,genre,not_nullable,,,80,
Column,genre,not_nullable,,,79,
Column,genre,not_nullable,,,77,
Column,genre,not_nullable,,,76,
Column,genre,not_nullable,,,72,
Column,genre,not_nullable,,,70,
Column,genre,not_nullable,,,67,
Column,genre,not_nullable,,,59,
Column,genre,not_nullable,,,58,
Column,genre,not_nullable,,,57,
Column,genre,not_nullable,,,53,
Column,genre,not_nullable,,,45,
Column,genre,not_nullable,,,31,
Column,genre,not_nullable,,,29,
Column,genre,not_nullable,,,22,
Column,genre,not_nullable,,,20,
Column,genre,not_nullable,,,18,
Column,category,Check for invalid categories.,0,data,65,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,64,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,63,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,36,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,34,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,33,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,32,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,31,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,30,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,29,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,28,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,27,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,26,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,25,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,24,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,23,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,22,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,21,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,20,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,19,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,18,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,17,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,16,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,15,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,14,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,13,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,12,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,SonyTSID7008,35,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,37,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,62,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,38,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,61,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,60,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,59,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,58,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,57,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,56,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,WH11109-2,55,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,54,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,53,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,52,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,51,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,50,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,49,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,48,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,47,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,46,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,45,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,44,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,43,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,42,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,41,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,40,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,category,Check for invalid categories.,0,data,39,"def check_category_is_valid(x: Any) -> bool:
    """"""Check for invalid categories.""""""

    if x in [
        ""blues"",
        ""classical"",
        ""country"",
        ""folk"",
        ""jazz"",
        ""misc"",
        ""newage"",
        ""reggae"",
        ""rock"",
        ""soundtrack"",
        ""N/A"",
        # ""REJECT_ROW"",
    ]:
        return True
    else:
        return False
"
Column,genre,not_nullable,,,101,
Column,genre,not_nullable,,,111,
Column,genre,not_nullable,,,474,
Column,genre,not_nullable,,,344,
Column,genre,not_nullable,,,379,
Column,genre,not_nullable,,,376,
Column,genre,not_nullable,,,373,
Column,genre,not_nullable,,,371,
Column,genre,not_nullable,,,369,
Column,genre,not_nullable,,,367,
Column,genre,not_nullable,,,364,
Column,genre,not_nullable,,,359,
Column,genre,not_nullable,,,355,
Column,genre,not_nullable,,,350,
Column,genre,not_nullable,,,348,
Column,genre,not_nullable,,,343,
Column,genre,not_nullable,,,119,
Column,genre,not_nullable,,,340,
Column,genre,not_nullable,,,336,
Column,genre,not_nullable,,,335,
Column,genre,not_nullable,,,324,
Column,genre,not_nullable,,,323,
Column,genre,not_nullable,,,320,
Column,genre,not_nullable,,,319,
Column,genre,not_nullable,,,317,
Column,genre,not_nullable,,,307,
Column,genre,not_nullable,,,296,
Column,genre,not_nullable,,,291,
Column,genre,not_nullable,,,381,
Column,genre,not_nullable,,,387,
Column,genre,not_nullable,,,390,
Column,genre,not_nullable,,,391,
Column,genre,not_nullable,,,472,
Column,genre,not_nullable,,,468,
Column,genre,not_nullable,,,463,
Column,genre,not_nullable,,,457,
Column,genre,not_nullable,,,456,
Column,genre,not_nullable,,,454,
Column,genre,not_nullable,,,446,
Column,genre,not_nullable,,,445,
Column,genre,not_nullable,,,444,
Column,genre,not_nullable,,,440,
Column,genre,not_nullable,,,437,
Column,genre,not_nullable,,,435,
Column,genre,not_nullable,,,433,
Column,genre,not_nullable,,,428,
Column,genre,not_nullable,,,426,
Column,genre,not_nullable,,,423,
Column,genre,not_nullable,,,421,
Column,genre,not_nullable,,,416,
Column,genre,not_nullable,,,411,
Column,genre,not_nullable,,,408,
Column,genre,not_nullable,,,403,
Column,genre,not_nullable,,,397,
Column,genre,not_nullable,,,392,
Column,genre,not_nullable,,,285,
Column,genre,not_nullable,,,283,
Column,genre,not_nullable,,,277,
Column,genre,not_nullable,,,200,
Column,genre,not_nullable,,,189,
Column,genre,not_nullable,,,188,
Column,genre,not_nullable,,,186,
Column,genre,not_nullable,,,184,
Column,genre,not_nullable,,,179,
Column,genre,not_nullable,,,175,
Column,genre,not_nullable,,,174,
Column,genre,not_nullable,,,173,
Column,genre,not_nullable,,,172,
Column,genre,not_nullable,,,170,
Column,genre,not_nullable,,,169,
Column,genre,not_nullable,,,168,
Column,genre,not_nullable,,,158,
Column,genre,not_nullable,,,153,
Column,genre,not_nullable,,,150,
Column,genre,not_nullable,,,149,
Column,genre,not_nullable,,,148,
Column,genre,not_nullable,,,142,
Column,genre,not_nullable,,,137,
Column,genre,not_nullable,,,133,
Column,genre,not_nullable,,,130,
Column,genre,not_nullable,,,129,
Column,genre,not_nullable,,,126,
Column,genre,not_nullable,,,192,
Column,genre,not_nullable,,,205,
Column,genre,not_nullable,,,276,
Column,genre,not_nullable,,,206,
Column,genre,not_nullable,,,274,
Column,genre,not_nullable,,,271,
Column,genre,not_nullable,,,264,
Column,genre,not_nullable,,,260,
Column,genre,not_nullable,,,259,
Column,genre,not_nullable,,,257,
Column,genre,not_nullable,,,255,
Column,genre,not_nullable,,,254,
Column,genre,not_nullable,,,252,
Column,genre,not_nullable,,,251,
Column,genre,not_nullable,,,248,
Column,genre,not_nullable,,,244,
Column,genre,not_nullable,,,239,
Column,genre,not_nullable,,,237,
Column,genre,not_nullable,,,230,
Column,genre,not_nullable,,,229,
Column,genre,not_nullable,,,226,
Column,genre,not_nullable,,,225,
Column,genre,not_nullable,,,224,
Column,genre,not_nullable,,,215,
Column,genre,not_nullable,,,214,
Column,genre,not_nullable,,,209,
Column,genre,not_nullable,,,207,
Column,genre,not_nullable,,,1084,
Column,genre,not_nullable,,,1086,
Column,genre,not_nullable,,,1087,
Column,genre,not_nullable,,,1891,
Column,genre,not_nullable,,,1914,
Column,genre,not_nullable,,,1912,
Column,genre,not_nullable,,,1910,
Column,genre,not_nullable,,,1908,
Column,genre,not_nullable,,,1907,
Column,genre,not_nullable,,,1906,
Column,genre,not_nullable,,,1903,
Column,genre,not_nullable,,,1901,
Column,genre,not_nullable,,,1900,
Column,genre,not_nullable,,,1898,
Column,genre,not_nullable,,,1894,
Column,genre,not_nullable,,,1886,
Column,genre,not_nullable,,,1996,
Column,genre,not_nullable,,,1885,
Column,genre,not_nullable,,,1884,
Column,genre,not_nullable,,,1882,
Column,genre,not_nullable,,,1881,
Column,genre,not_nullable,,,1878,
Column,genre,not_nullable,,,1877,
Column,genre,not_nullable,,,1875,
Column,genre,not_nullable,,,1874,
Column,genre,not_nullable,,,1873,
Column,genre,not_nullable,,,1872,
Column,genre,not_nullable,,,1871,
Column,genre,not_nullable,,,1916,
Column,genre,not_nullable,,,1919,
Column,genre,not_nullable,,,1923,
Column,genre,not_nullable,,,1925,
Column,genre,not_nullable,,,1991,
Column,genre,not_nullable,,,1989,
Column,genre,not_nullable,,,1981,
Column,genre,not_nullable,,,1979,
Column,genre,not_nullable,,,1978,
Column,genre,not_nullable,,,1976,
Column,genre,not_nullable,,,1974,
Column,genre,not_nullable,,,1973,
Column,genre,not_nullable,,,1972,
Column,genre,not_nullable,,,1971,
Column,genre,not_nullable,,,1970,
Column,genre,not_nullable,,,1968,
Column,genre,not_nullable,,,1967,
Column,genre,not_nullable,,,1962,
Column,genre,not_nullable,,,1958,
Column,genre,not_nullable,,,1954,
Column,genre,not_nullable,,,1951,
Column,genre,not_nullable,,,1948,
Column,genre,not_nullable,,,1946,
Column,genre,not_nullable,,,1940,
Column,genre,not_nullable,,,1936,
Column,genre,not_nullable,,,1934,
Column,genre,not_nullable,,,1931,
Column,genre,not_nullable,,,1870,
Column,genre,not_nullable,,,1869,
Column,genre,not_nullable,,,1865,
Column,genre,not_nullable,,,1773,
Column,genre,not_nullable,,,1770,
Column,genre,not_nullable,,,1768,
Column,genre,not_nullable,,,1767,
Column,genre,not_nullable,,,1763,
Column,genre,not_nullable,,,1760,
Column,genre,not_nullable,,,1757,
Column,genre,not_nullable,,,1756,
Column,genre,not_nullable,,,1751,
Column,genre,not_nullable,,,1742,
Column,genre,not_nullable,,,1741,
Column,genre,not_nullable,,,1737,
Column,genre,not_nullable,,,1735,
Column,genre,not_nullable,,,1734,
Column,genre,not_nullable,,,1728,
Column,genre,not_nullable,,,1727,
Column,genre,not_nullable,,,1724,
Column,genre,not_nullable,,,1719,
Column,genre,not_nullable,,,1718,
Column,genre,not_nullable,,,1716,
Column,genre,not_nullable,,,1714,
Column,genre,not_nullable,,,1706,
Column,genre,not_nullable,,,1704,
Column,genre,not_nullable,,,1703,
Column,genre,not_nullable,,,1771,
Column,genre,not_nullable,,,1777,
Column,genre,not_nullable,,,1863,
Column,genre,not_nullable,,,1779,
Column,genre,not_nullable,,,1860,
Column,genre,not_nullable,,,1854,
Column,genre,not_nullable,,,1851,
Column,genre,not_nullable,,,1848,
Column,genre,not_nullable,,,1845,
Column,genre,not_nullable,,,1843,
Column,genre,not_nullable,,,1839,
Column,genre,not_nullable,,,1834,
Column,genre,not_nullable,,,1833,
Column,genre,not_nullable,,,1832,
Column,genre,not_nullable,,,1831,
Column,genre,not_nullable,,,1828,
Column,genre,not_nullable,,,1822,
Column,genre,not_nullable,,,1821,
Column,genre,not_nullable,,,1817,
Column,genre,not_nullable,,,1815,
Column,genre,not_nullable,,,1807,
Column,genre,not_nullable,,,1800,
Column,genre,not_nullable,,,1797,
Column,genre,not_nullable,,,1793,
Column,genre,not_nullable,,,1789,
Column,genre,not_nullable,,,1782,
Column,genre,not_nullable,,,1781,
Column,genre,not_nullable,,,1993,
Column,genre,not_nullable,,,1999,
Column,genre,not_nullable,,,1699,
Column,genre,not_nullable,,,2167,
Column,genre,not_nullable,,,2200,
Column,genre,not_nullable,,,2196,
Column,genre,not_nullable,,,2194,
Column,genre,not_nullable,,,2188,
Column,genre,not_nullable,,,2183,
Column,genre,not_nullable,,,2181,
Column,genre,not_nullable,,,2178,
Column,genre,not_nullable,,,2177,
Column,genre,not_nullable,,,2173,
Column,genre,not_nullable,,,2169,
Column,genre,not_nullable,,,2168,
Column,genre,not_nullable,,,2165,
Column,genre,not_nullable,,,2000,
Column,genre,not_nullable,,,2163,
Column,genre,not_nullable,,,2156,
Column,genre,not_nullable,,,2147,
Column,genre,not_nullable,,,2146,
Column,genre,not_nullable,,,2143,
Column,genre,not_nullable,,,2142,
Column,genre,not_nullable,,,2140,
Column,genre,not_nullable,,,2138,
Column,genre,not_nullable,,,2130,
Column,genre,not_nullable,,,2125,
Column,genre,not_nullable,,,2124,
Column,genre,not_nullable,,,2201,
Column,genre,not_nullable,,,2205,
Column,genre,not_nullable,,,2206,
Column,genre,not_nullable,,,2209,
Column,genre,not_nullable,,,2276,
Column,genre,not_nullable,,,2275,
Column,genre,not_nullable,,,2272,
Column,genre,not_nullable,,,2269,
Column,genre,not_nullable,,,2265,
Column,genre,not_nullable,,,2262,
Column,genre,not_nullable,,,2251,
Column,genre,not_nullable,,,2248,
Column,genre,not_nullable,,,2242,
Column,genre,not_nullable,,,2239,
Column,genre,not_nullable,,,2238,
Column,genre,not_nullable,,,2237,
Column,genre,not_nullable,,,2235,
Column,genre,not_nullable,,,2231,
Column,genre,not_nullable,,,2225,
Column,genre,not_nullable,,,2224,
Column,genre,not_nullable,,,2219,
Column,genre,not_nullable,,,2217,
Column,genre,not_nullable,,,2215,
Column,genre,not_nullable,,,2213,
Column,genre,not_nullable,,,2212,
Column,genre,not_nullable,,,2211,
Column,genre,not_nullable,,,2210,
Column,genre,not_nullable,,,2122,
Column,genre,not_nullable,,,2121,
Column,genre,not_nullable,,,2119,
Column,genre,not_nullable,,,2044,
Column,genre,not_nullable,,,2042,
Column,genre,not_nullable,,,2041,
Column,genre,not_nullable,,,2040,
Column,genre,not_nullable,,,2039,
Column,genre,not_nullable,,,2038,
Column,genre,not_nullable,,,2037,
Column,genre,not_nullable,,,2036,
Column,genre,not_nullable,,,2034,
Column,genre,not_nullable,,,2031,
Column,genre,not_nullable,,,2027,
Column,genre,not_nullable,,,2024,
Column,genre,not_nullable,,,2023,
Column,genre,not_nullable,,,2022,
Column,genre,not_nullable,,,2020,
Column,genre,not_nullable,,,2017,
Column,genre,not_nullable,,,2016,
Column,genre,not_nullable,,,2015,
Column,genre,not_nullable,,,2010,
Column,genre,not_nullable,,,2008,
Column,genre,not_nullable,,,2006,
Column,genre,not_nullable,,,2003,
Column,genre,not_nullable,,,2002,
Column,genre,not_nullable,,,2001,
Column,genre,not_nullable,,,2043,
Column,genre,not_nullable,,,2047,
Column,genre,not_nullable,,,2118,
Column,genre,not_nullable,,,2048,
Column,genre,not_nullable,,,2115,
Column,genre,not_nullable,,,2113,
Column,genre,not_nullable,,,2108,
Column,genre,not_nullable,,,2106,
Column,genre,not_nullable,,,2100,
Column,genre,not_nullable,,,2099,
Column,genre,not_nullable,,,2098,
Column,genre,not_nullable,,,2094,
Column,genre,not_nullable,,,2092,
Column,genre,not_nullable,,,2089,
Column,genre,not_nullable,,,2088,
Column,genre,not_nullable,,,2083,
Column,genre,not_nullable,,,2080,
Column,genre,not_nullable,,,2075,
Column,genre,not_nullable,,,2069,
Column,genre,not_nullable,,,2068,
Column,genre,not_nullable,,,2066,
Column,genre,not_nullable,,,2064,
Column,genre,not_nullable,,,2058,
Column,genre,not_nullable,,,2056,
Column,genre,not_nullable,,,2054,
Column,genre,not_nullable,,,2053,
Column,genre,not_nullable,,,2050,
Column,genre,not_nullable,,,1701,
Column,genre,not_nullable,,,1690,
Column,genre,not_nullable,,,1088,
Column,genre,not_nullable,,,1247,
Column,genre,not_nullable,,,1265,
Column,genre,not_nullable,,,1262,
Column,genre,not_nullable,,,1260,
Column,genre,not_nullable,,,1258,
Column,genre,not_nullable,,,1257,
Column,genre,not_nullable,,,1256,
Column,genre,not_nullable,,,1255,
Column,genre,not_nullable,,,1253,
Column,genre,not_nullable,,,1251,
Column,genre,not_nullable,,,1250,
Column,genre,not_nullable,,,1248,
Column,genre,not_nullable,,,1241,
Column,genre,not_nullable,,,1340,
Column,genre,not_nullable,,,1240,
Column,genre,not_nullable,,,1239,
Column,genre,not_nullable,,,1237,
Column,genre,not_nullable,,,1234,
Column,genre,not_nullable,,,1232,
Column,genre,not_nullable,,,1230,
Column,genre,not_nullable,,,1229,
Column,genre,not_nullable,,,1225,
Column,genre,not_nullable,,,1222,
Column,genre,not_nullable,,,1220,
Column,genre,not_nullable,,,1218,
Column,genre,not_nullable,,,1266,
Column,genre,not_nullable,,,1267,
Column,genre,not_nullable,,,1269,
Column,genre,not_nullable,,,1271,
Column,genre,not_nullable,,,1335,
Column,genre,not_nullable,,,1334,
Column,genre,not_nullable,,,1329,
Column,genre,not_nullable,,,1327,
Column,genre,not_nullable,,,1325,
Column,genre,not_nullable,,,1322,
Column,genre,not_nullable,,,1318,
Column,genre,not_nullable,,,1315,
Column,genre,not_nullable,,,1313,
Column,genre,not_nullable,,,1312,
Column,genre,not_nullable,,,1311,
Column,genre,not_nullable,,,1310,
Column,genre,not_nullable,,,1308,
Column,genre,not_nullable,,,1301,
Column,genre,not_nullable,,,1298,
Column,genre,not_nullable,,,1297,
Column,genre,not_nullable,,,1293,
Column,genre,not_nullable,,,1288,
Column,genre,not_nullable,,,1284,
Column,genre,not_nullable,,,1281,
Column,genre,not_nullable,,,1277,
Column,genre,not_nullable,,,1275,
Column,genre,not_nullable,,,1273,
Column,genre,not_nullable,,,1217,
Column,genre,not_nullable,,,1215,
Column,genre,not_nullable,,,1211,
Column,genre,not_nullable,,,1147,
Column,genre,not_nullable,,,1144,
Column,genre,not_nullable,,,1143,
Column,genre,not_nullable,,,1142,
Column,genre,not_nullable,,,1141,
Column,genre,not_nullable,,,1140,
Column,genre,not_nullable,,,1139,
Column,genre,not_nullable,,,1137,
Column,genre,not_nullable,,,1132,
Column,genre,not_nullable,,,1130,
Column,genre,not_nullable,,,1125,
Column,genre,not_nullable,,,1120,
Column,genre,not_nullable,,,1114,
Column,genre,not_nullable,,,1113,
Column,genre,not_nullable,,,1112,
Column,genre,not_nullable,,,1107,
Column,genre,not_nullable,,,1105,
Column,genre,not_nullable,,,1102,
Column,genre,not_nullable,,,1099,
Column,genre,not_nullable,,,1098,
Column,genre,not_nullable,,,1097,
Column,genre,not_nullable,,,1095,
Column,genre,not_nullable,,,1092,
Column,genre,not_nullable,,,1089,
Column,genre,not_nullable,,,1146,
Column,genre,not_nullable,,,1150,
Column,genre,not_nullable,,,1207,
Column,genre,not_nullable,,,1156,
Column,genre,not_nullable,,,1206,
Column,genre,not_nullable,,,1205,
Column,genre,not_nullable,,,1204,
Column,genre,not_nullable,,,1203,
Column,genre,not_nullable,,,1202,
Column,genre,not_nullable,,,1198,
Column,genre,not_nullable,,,1197,
Column,genre,not_nullable,,,1194,
Column,genre,not_nullable,,,1193,
Column,genre,not_nullable,,,1188,
Column,genre,not_nullable,,,1187,
Column,genre,not_nullable,,,1185,
Column,genre,not_nullable,,,1184,
Column,genre,not_nullable,,,1183,
Column,genre,not_nullable,,,1182,
Column,genre,not_nullable,,,1178,
Column,genre,not_nullable,,,1176,
Column,genre,not_nullable,,,1175,
Column,genre,not_nullable,,,1171,
Column,genre,not_nullable,,,1168,
Column,genre,not_nullable,,,1167,
Column,genre,not_nullable,,,1164,
Column,genre,not_nullable,,,1159,
Column,genre,not_nullable,,,1339,
Column,genre,not_nullable,,,1349,
Column,genre,not_nullable,,,1683,
Column,genre,not_nullable,,,1564,
Column,genre,not_nullable,,,1601,
Column,genre,not_nullable,,,1600,
Column,genre,not_nullable,,,1598,
Column,genre,not_nullable,,,1597,
Column,genre,not_nullable,,,1590,
Column,genre,not_nullable,,,1588,
Column,genre,not_nullable,,,1587,
Column,genre,not_nullable,,,1586,
Column,genre,not_nullable,,,1569,
Column,genre,not_nullable,,,1568,
Column,genre,not_nullable,,,1567,
Column,genre,not_nullable,,,1561,
Column,genre,not_nullable,,,1351,
Column,genre,not_nullable,,,1560,
Column,genre,not_nullable,,,1552,
Column,genre,not_nullable,,,1548,
Column,genre,not_nullable,,,1546,
Column,genre,not_nullable,,,1543,
Column,genre,not_nullable,,,1541,
Column,genre,not_nullable,,,1533,
Column,genre,not_nullable,,,1531,
Column,genre,not_nullable,,,1529,
Column,genre,not_nullable,,,1528,
Column,genre,not_nullable,,,1527,
Column,genre,not_nullable,,,1605,
Column,genre,not_nullable,,,1607,
Column,genre,not_nullable,,,1609,
Column,genre,not_nullable,,,1610,
Column,genre,not_nullable,,,1677,
Column,genre,not_nullable,,,1676,
Column,genre,not_nullable,,,1674,
Column,genre,not_nullable,,,1670,
Column,genre,not_nullable,,,1667,
Column,genre,not_nullable,,,1665,
Column,genre,not_nullable,,,1661,
Column,genre,not_nullable,,,1660,
Column,genre,not_nullable,,,1659,
Column,genre,not_nullable,,,1658,
Column,genre,not_nullable,,,1653,
Column,genre,not_nullable,,,1643,
Column,genre,not_nullable,,,1642,
Column,genre,not_nullable,,,1640,
Column,genre,not_nullable,,,1639,
Column,genre,not_nullable,,,1638,
Column,genre,not_nullable,,,1633,
Column,genre,not_nullable,,,1631,
Column,genre,not_nullable,,,1624,
Column,genre,not_nullable,,,1623,
Column,genre,not_nullable,,,1617,
Column,genre,not_nullable,,,1616,
Column,genre,not_nullable,,,1612,
Column,genre,not_nullable,,,1526,
Column,genre,not_nullable,,,1523,
Column,genre,not_nullable,,,1519,
Column,genre,not_nullable,,,1419,
Column,genre,not_nullable,,,1403,
Column,genre,not_nullable,,,1400,
Column,genre,not_nullable,,,1398,
Column,genre,not_nullable,,,1392,
Column,genre,not_nullable,,,1391,
Column,genre,not_nullable,,,1390,
Column,genre,not_nullable,,,1388,
Column,genre,not_nullable,,,1386,
Column,genre,not_nullable,,,1385,
Column,genre,not_nullable,,,1384,
Column,genre,not_nullable,,,1382,
Column,genre,not_nullable,,,1379,
Column,genre,not_nullable,,,1373,
Column,genre,not_nullable,,,1372,
Column,genre,not_nullable,,,1371,
Column,genre,not_nullable,,,1368,
Column,genre,not_nullable,,,1365,
Column,genre,not_nullable,,,1364,
Column,genre,not_nullable,,,1361,
Column,genre,not_nullable,,,1360,
Column,genre,not_nullable,,,1358,
Column,genre,not_nullable,,,1355,
Column,genre,not_nullable,,,1353,
Column,genre,not_nullable,,,1412,
Column,genre,not_nullable,,,1423,
Column,genre,not_nullable,,,1511,
Column,genre,not_nullable,,,1426,
Column,genre,not_nullable,,,1507,
Column,genre,not_nullable,,,1505,
Column,genre,not_nullable,,,1503,
Column,genre,not_nullable,,,1501,
Column,genre,not_nullable,,,1500,
Column,genre,not_nullable,,,1499,
Column,genre,not_nullable,,,1498,
Column,genre,not_nullable,,,1495,
Column,genre,not_nullable,,,1493,
Column,genre,not_nullable,,,1487,
Column,genre,not_nullable,,,1480,
Column,genre,not_nullable,,,1478,
Column,genre,not_nullable,,,1477,
Column,genre,not_nullable,,,1469,
Column,genre,not_nullable,,,1464,
Column,genre,not_nullable,,,1452,
Column,genre,not_nullable,,,1451,
Column,genre,not_nullable,,,1450,
Column,genre,not_nullable,,,1441,
Column,genre,not_nullable,,,1437,
Column,genre,not_nullable,,,1433,
Column,genre,not_nullable,,,1430,
Column,genre,not_nullable,,,1428,
Column,id,Check that the length of 'id' is 6 characters.,0,9969,9762,lambda x: len(x)==6
